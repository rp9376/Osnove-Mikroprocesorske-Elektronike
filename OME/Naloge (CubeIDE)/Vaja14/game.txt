/*
 * game.c
 *
 *  Created on: 18.5.2022
 *      Author: Rok Plesko
 */


/* **************** MODULE DESCRIPTION *************************

Ta modul implementira algoritem igrice s pomoÄjo avtomatov stanj.
Algoritem igre za svoje delovanje potrebuje podporo sistemskih
modulov za delo z vhodno-izhodnimi napravami sistema ter podporo
aplikacijskih modulov za delo z objekti aplikacije ter podporo
za izris objekotv na zaslon.

************************************************************* */



// ----------- Include other modules (for private) -------------



// ------ Standard C libraries -----
#include <stdio.h>
#include <stdlib.h>		// support for random number generation


// POGLEJTE: igra (tj. aplikacija) je odvisna le od modulov s
// sistemskega nivoja, ne pa tudi od modulov s strojnega nivoja!


// --- Moduli sistemskega nivoja ---


#include "LED.h"				// podpora za delo z LEDicami
#include "kbd.h"				// podpora za delo s tipkovnico
#include "SCI.h"				// podpora za delo s serijskim vmesnikom
#include "joystick.h"			// podpora za delo z joystickom
#include "lcd.h"				// podpora za delo z LCDjem
#include "timing_utils.h"		// podpora za delo z orodji za merjenje Äasa
#include "ugui.h"


// --- Moduli applikacijskega nivoja ----

#include "game.h"			// lastne definicije game.c modula

#include "objects.h"			// v igro vkljuÄimo modul za delo z objekti igre
#include "graphics.h"			// v igro vkljuÄimo modul za prikaz objektov na zaslon



// ---------------------- Private definitions ------------------

void GamePlay_Update_Aiming_LED_Indicator(void);

// ----- Definicija stanj avtomatov  --------


// stanja avtomata Game()
typedef enum GAME_states {GAME_INTRO_STATE, GAME_PLAY_STATE, GAME_OVER_STATE} GAME_states_t;

// stanja avtomata Intro()
typedef enum INTRO_states {INTRO_INIT, INTRO_WAIT_BEFORE_KBD_ACTIVE, INTRO_PRESS_ANY_KEY, INTRO_WAIT_FOR_ANY_KEY, INTRO_LEDS_OFF} INTRO_states_t;

// stanja avtomata GamePlay()
typedef enum GAMEPLAY_states {	GAMEPLAY_INIT,
								GAMEPLAY_COUNTDOWN_3,
								GAMEPLAY_COUNTDOWN_2,
								GAMEPLAY_COUNTDOWN_1,
								GAMEPLAY_COUNTDOWN_CLEAR,
								GAMEPLAY_START_MEASURING_GAMEPLAY_TIME,
								GAMEPLAY_SPAWN_TARGET,
								GAMEPLAY_SHOOT_TARGET,
								GAMEPLAY_BEFORE_GAME_OVER
} GAMEPLAY_states_t;

// stanja avtomata GameOver()
typedef enum GAMEOVER_states {GAMEOVER_SCREEN, GAMEOVER_WAIT_BEFORE_LEDS_OFF, GAMEOVER_LEDS_OFF, GAMEOVER_WAIT_FOR_ANY_KEY} GAMEOVER_states_t;




// ------------- Public function implementations --------------


// Funkcija, ki implementira nad-avtomat Game().
void Game()
{
	// Stanje avtomata je potrebno pomniti tudi, ko se avtomat ne izvaja.
	// To pomeni, da je potrebno stanje avtomata hraniti v spremenljivki,
	// ki ima neskonÄno Ĺživljensko dobo. Lokalni spremenljivki funkcije
	// lahko napravimo Ĺživljensko dobo neskonÄno, Äe jo definiramo kot
	// statiÄno spremenljivko (tj. uporabimo t.i. kljuÄno besedo "static",
	// Osvojimo C, Fajfar et al., stran 83).
	// Hkrati z definicijo spremenljivke poskrbimo ĹĄe za inicializacijo zaÄetnega stanja avtomata.
	static GAME_states_t state = GAME_INTRO_STATE;


	// PomoĹžna spremenljivka, kamor bomo shranjevali vrnjeno izhodno
	// vrednost pod-avtomatov (tj. "exit value").
	// Hkrati z definicijo spremenljivke poskrbimo ĹĄe za inicializacijo zaÄetne vrednosti.
	uint8_t exit_value = 0;


	// Avtomat stanj implementiramo s pomoÄjo "switch-case" stavka, s katerim
	// zelo enostavno doseĹžemo izvajanja le tistega dela kode, ki pripada
	// toÄno doloÄenemu stanju avtomata.
	switch (state)
	{

		case GAME_INTRO_STATE:

			// Znotraj tega stanja izvajamo pod-avtomat Intro().
			exit_value = Intro();

			// Äe pod-avtomat vrne vrednost razliÄno od niÄ,
			// avtomat Game() preide v naslednje stanje.
			if (exit_value != 0)
				state = GAME_PLAY_STATE;

		break;



		case GAME_PLAY_STATE:

			// Znotraj tega stanja izvajamo pod-avtomat GamePlay().
			exit_value = GamePlay();

			// Äe pod-avtomat vrne vrednost razliÄno od niÄ,
			// avtomat Game() preide v naslednje stanje.
			if (exit_value != 0)
				state = GAME_OVER_STATE;

		break;





		case GAME_OVER_STATE:

			// Znotraj tega stanja izvajamo pod-avtomat GameOver().
			exit_value = GameOver();

			// Äe pod-avtomat vrne vrednost razliÄno od niÄ,
			// avtomat Game() preide v naslednje stanje.
			if (exit_value != 0)
				state = GAME_INTRO_STATE;

		break;




		// Avtomatu dodamo "varovalko" za primer, da avtomat zaide v nedefinirano stanje.
		// To napako javimo preko SCI vmesnika. Vidite, da SCI vmesnik uporabljamo
		// za realno-Äasni nadzor nad napakami aplikacije preko serijskega terminala.
		default:

			// Javimo vir napake in vrednost nedefiniranega stanja, v katerem se je naĹĄel avtomat.
			printf("Game(): Error - undefined state (%d)", state);

			// Ustavimo izvajanje z namenom, da razvojnik lahko opazi neobiÄajno obnaĹĄanje aplikacije.
			HAL_Delay(5000);

			// In na koncu avomat restiramo tako, da ga postavimo v zaÄetno stanje.
			state = GAME_INTRO_STATE;
			exit_value = 0;

		break;
	}
}




// Funkcija, ki implementira pod-avtomat Intro().
uint8_t Intro()
{

	// Definicija makro parametrov za pod-avtomat Intro().
	#define INTRO_DELAY_BEFORE_KBD_ACTIVE	0		// Äasovni premor pred aktivacijo tipkovnice


	// Stanje avtomata je potrebno pomniti tudi, ko se avtomat ne izvaja.
	// To pomeni, daje potrebno stanje avtomata hraniti v spremenljivki,
	// ki ima neskonÄno Ĺživljensko dobo. Lokalni spremenljivki funkcije
	// lahko napravimo neskonÄno Ĺživljensko dobo, Äe jo definiramo kot
	// statiÄno spremenljivko ("static").
	// Hkrati z definicijo spremenljivke poskrbimo ĹĄe za inicializacijo zaÄetnega stanja avtomata.
	static INTRO_states_t state = INTRO_INIT;


	// PomoĹžna spremenljivka, kamor bomo shranjevali vrnjeno izhodno
	// vrednost pod-avtomatov (tj. "exit value").
	// Hkrati z definicijo spremenljivke poskrbimo ĹĄe za inicializacijo zaÄetne vrednosti.
	uint8_t exit_value = 0;

	// PomoĹžna spremenljivka, kjer bomo hranili informacijo o pritisnjeni tipki.
	buttons_enum_t	key = BTN_NONE;


	// Ker mora pod-avtomat implementirati Äasovne zakasnitve oziroma premore,
	// bomo potrebovali funkcionalnost ure ĹĄtoparice iz modula timing_utils.c.
	// Premislite: tudi ura ĹĄtoparica mora imeti svoje spremenljivke z neskonÄno
	// Ĺživljensko dobo.
	static stopwatch_handle_t    stopwatch;




	// Avtomat stanj implementiramo s pomoÄjo "switch-case" stavka, s katerim
	// zelo enostavno doseĹžemo izvajanja le tistega dela kode, ki pripada
	// toÄno doloÄenemu stanju avtomata.
	switch (state)
	{

		// ZaÄetno stanje pod-avtomata.
		// Inicializacija vseh podaktovnih struktur igre, risanje "splash screen" zaslona
	 	// ter priĹžig vseh LEDic.
		case INTRO_INIT:

			// Opravila stanja.
			OBJ_init();		// Namig: inicializacijo podatkovnih struktur (tj. objektov)
						// lahko izvedete s klicem ene same funkcije.
			LEDs_write(255);
			//OBJ_init_splash_screen();



			// Ob koncu tega stanja priÄnemo z merjenjem Äasa premora, ki sledi
			// (tj. sproĹžimo uro ĹĄtoparico tako, da postavimo Äasovni zaznamek - "time mark").
			TIMUT_stopwatch_set_time_mark(&stopwatch);

			// DoloÄimo naslednje stanje ter "exit" vrednost.
			state = INTRO_WAIT_BEFORE_KBD_ACTIVE;
			exit_value = 0;

		break;




		// Premor pred aktivacijo tipkovnice, ÄiĹĄÄenje medpomnilnika tipkovnice.
		case INTRO_WAIT_BEFORE_KBD_ACTIVE:

			// V tem stanju preverjamo, ali se je premor Ĺže iztekel.
			if ( TIMUT_stopwatch_has_X_ms_passed(&stopwatch, INTRO_DELAY_BEFORE_KBD_ACTIVE) )
			{
				// Äe se je premor Ĺže iztekel,

				// poÄistimo medpomnilnik tipkovnice.
				KBD_flush();

				// ter doloÄimo naslednje stanje in "exit" vrednost.
				state = INTRO_PRESS_ANY_KEY;
				exit_value = 0;

			}

		break;



		// Izpis "press any key".
		case INTRO_PRESS_ANY_KEY:

			// Opravila stanja.
					// Namig: Napis "Press any key" je shranjen v obliki "sprite-a". PreuÄite,
												// v katerem od objektov se skriva ta "sprite".
			GFX_draw_gfx_object(&splash_screen);
			GFX_draw_one_gfx_object_on_background(&press_any_key_sprite, &background);
			// DoloÄimo naslednje stanje ter "exit" vrednost.
			state = INTRO_WAIT_FOR_ANY_KEY;
			exit_value = 0;

		break;



		// Äakanje na pritisk tipke.
		case INTRO_WAIT_FOR_ANY_KEY:

			// V tem stanju preverjamo, Äe je bila pritisnjena katerakoli tipka.

			// Preberemo informacijo o pritisnjenih tipkah iz medpomnilnika tipkovnice.
			// (Skeniranje tipkovnice se izvaja avtomatsko v sklopu periodic_services.c modula.)
			key = KBD_get_pressed_key();

			// In Äe je bila pritisnjena katerakoli tipka
			if ( key != BTN_NONE )
			{

				// doloÄimo naslednje stanje in "exit" vrednost.
				state = INTRO_LEDS_OFF;
				exit_value = 0;

			}

		break;




		// Ugasnitev vseh LEDic
		case INTRO_LEDS_OFF:

			// Opravila stanja.
			LEDs_write(0);

			// DoloÄimo naslednje stanje ter "exit" vrednost.

			// V tej toÄki se je izvajanje pod-avtomata zakljuÄilo.
			// Stanje avtomata nastavimo na zaÄetno stanje in nastavimo "exit" vrednost 1.
			state = INTRO_INIT;
			exit_value = 1;

		break;






		// Avtomatu dodamo "varovalko" za primer, da avtomat zaide v nedefinirano stanje.
		// To napako javimo preko SCI vmesnika. Vidite, da SCI vmesnik uporabljamo
		// za realno-Äasni nadzor nad napakami aplikacije preko serijskega terminala.
		default:

			// Javimo vir napake in vrednost nedefiniranega stanja, v katerem se je naĹĄel avtomat.
			printf("Intro(): Error - unknown state (%d)", state);

			// Ustavimo izvajanje z namenom, da razvojnik lahko opazi neobiÄajno obnaĹĄanje aplikacije.
			HAL_Delay(5000);

			// In na koncu avomat restiramo tako, da ga postavimo v zaÄetno stanje.
			state = INTRO_INIT;
			exit_value = 0;

		break;


	}


	// Vrnemo zgoraj nastavljeno "exit_value" vrednost nad-avtomatu.
	// Tako bo nad-avtomat vedel, ali mora ĹĄe zaganjati ta pod-avtomat ali
	// pa mora preiti v naslednje stanje.
	return exit_value;

}









// Funkcija, ki implementira pod-avtomat GamePlay().
// Funkcija, ki implementira pod-avtomat GamePlay().
uint8_t GamePlay()
{



	// -------------- Definicije znotraj funkcije GamePlay() ------------------

	// Definicija makro parametrov za pod-avtomat GamePlay().
		// DOPOLNI


	// Spremenljivka, ki hrani stanje avtomata.
	static GAMEPLAY_states_t state = GAMEPLAY_INIT;


	// Pomožna spremenljivka, kamor bomo shranjevali vrnjeno izhodno
	// vrednost pod-avtomatov (tj. "return exit value").
	uint8_t exit_value = 0;


	// Pomožna spremenljivka, kjer bomo hranili informacijo o pritisnjeni tipki.
	buttons_enum_t	key = BTN_NONE;


	// Spremenljivka za implementacijo ure štoparice.
	static stopwatch_handle_t   stopwatch;






	// ----------------- Ugnezdena funkcija GamePlay_UpdateChanges() ---------------------


	// Ugnezdena funkcija (angl. nested function) je funkcija, ki je definirana znotraj
	// druge funkcije. Taka ugnezdena funkcija lahko dostopa do spremenljivk te druge funkcije,
	// ki so bile definirane pred ugnezdeno funkcijo. V našem primeru bomo to izkoristili
	// tako, da bomo znotraj ugnezdene funkcije dostopali do spremenljivke "stopwatch", ki vsebuje
	// informacijo o času, ki je še na voljo za igranje.


	// Ugnezdena funkcija GamePlay_UpdateChanges() poskrbi, da se objekti, ki jih algoritem igre spreminja,
	// posodobijo: tako njihovi parametri kot njihov prikaz na zaslonu.

	void GamePlay_UpdateChanges(void)
	{

		// Spremenljivka za implementacijo ure štoparice.
		static stopwatch_handle_t   update_stopwatch;


		// PAZITE: parametre objektov in njihov izris osvežujemo periodično s
		// točno določeno periodo osveževanja. Tako dosežemo, da igrica vedno teče
		// z enako hitrostjo, neodvisno od hitrosti procesorja (tj. od hitrosti sistemske ure).
		if ( TIMUT_stopwatch_has_another_X_ms_passed( &update_stopwatch, settings.game_play_update_period) )
		{

			// -------- Posodobitve parametrov objektov -----------


			// Posodobimo parametre objektov s pomočjo GFX modula.

				// Posodobimo lokacijo tarče.
					// DOPOLNI done
			GFX_update_moving_gfx_object_location(&target.gfx_object);


			// Posodobimo parametre objektov s pomočjo OBJ modula.

				// Posodobimo lokacijo namerka.
					// DOPOLNI done
			OBJ_crosshair_set_center_location_with_joystick();

				// Posodobimo razdaljo med namerkom in tarčo.
			// DOPOLNI done
			OBJ_crosshair_update_distance_to_target();

				// Posodobimo vrednost "progress bar" indiktorja, ki kaže,
				// koliko časa je še na voljo za igranje.
					// DOPOLNI done
			 OBJ_set_timeout_bar_value(TIMUT_get_stopwatch_elapsed_time(&stopwatch));

				// Posodobimo vrednost doseženih točk.
					// DOPOLNI done
			 OBJ_set_score_text_value(game_status.score);





			// ------ Izris posodobljenih objektov na zaslon -----------


			// Izrišemo posodobljene objekte na zaslon s pomočjo GFX modula.

				// Izris namerka in tarče na ozadje.
			 GFX_draw_two_gfx_objects_on_background(&crosshair.gfx_object, &target.gfx_object, &background);


				// Izris vrednosti doseženih točk.
			 GFX_display_text_object(&score_text);

				// Izris "progress bar" indikatorja preostalega časa za igranje.
					// DOPOLNI

			 GFX_display_progress_bar(&timeout_bar);

			// -------- Posodobitev ostalih izhodnih naprav sistema -------

				// Posodobimo LED indikator točnosti namerka.
					// DOPOLNI
			 /*
			 	 if(crosshair.distance_to_target_center > 150)
			 		 LEDs_write(	00000000b	);
			 	 else if(crosshair.distance_to_target_center <= 150 && crosshair.distance_to_target_center > 100 )
			 		LEDs_write(	10000001b	);
			 	 else if(crosshair.distance_to_target_center <= 100 && crosshair.distance_to_target_center > 75 )
			 		LEDs_write(	11000011b	);
			 	 else if(crosshair.distance_to_target_center <= 75 && crosshair.distance_to_target_center > 35 )
			 		LEDs_write(	11100111b	);
			 	 else if(crosshair.distance_to_target_center <=35)
			 		LEDs_write(	11111111b	);*/


			 GamePlay_Update_Aiming_LED_Indicator();
		}

	}






	// --------------- Implementacija algoritma "igranja igre" z avtomatom stanj ------------------------

	// Avtomat stanj implementiramo s pomočjo "switch-case" stavka.
	switch (state)
	{

		// Začetno stanje pod-avtomata.
		//
		// Inicializacija, ki je potrebna pred začetkom igranja igre:
		//
		// 		- inicializacija generatorja naključnih števil
		//		- izrišemo ozadje
		//		- izrišemo napise "TIME" in "SCORE"
		//		- izrišemo "progress bar" za prikaz časa, ki je še na voljo za igranje
		//		- izpišemo trenutno število točk
		case GAMEPLAY_INIT:

			// Opravila stanja.
				// DOPOLNI
			MATH_init_random_generator();
			GFX_draw_gfx_object(&background);
			GFX_display_progress_bar(&timeout_bar);
			GFX_display_text_object(&score_box_title); //maybe
			GFX_display_text_object(&score_text);

			// Določimo naslednje stanje ter "exit" vrednost.
				// DOPOLNI done
			state = GAMEPLAY_COUNTDOWN_3;
			exit_value = 0;

		break;

		case GAMEPLAY_COUNTDOWN_3:

					// Opravila stanja.
						// DOPOLNI
					TIMUT_stopwatch_set_time_mark(&stopwatch);
					GFX_draw_one_gfx_object_on_background(&countdown_digit_3_sprite, &background);

					// Določimo naslednje stanje ter "exit" vrednost.
						// DOPOLNI done
					state = GAMEPLAY_COUNTDOWN_2;
					exit_value = 0;

				break;

		case GAMEPLAY_COUNTDOWN_2:

					// Opravila stanja.
						// DOPOLNI

					if(TIMUT_stopwatch_has_another_X_ms_passed(&stopwatch, 1000))
					{
						GFX_clear_gfx_object_on_background(&countdown_digit_3_sprite, &background);
						GFX_draw_one_gfx_object_on_background(&countdown_digit_2_sprite, &background);

					// Določimo naslednje stanje ter "exit" vrednost.
						// DOPOLNI done
						state = GAMEPLAY_COUNTDOWN_1;
					}
						exit_value = 0;

				break;

		case GAMEPLAY_COUNTDOWN_1:

					// Opravila stanja.
						// DOPOLNI
					if(TIMUT_stopwatch_has_another_X_ms_passed(&stopwatch, 1000))
					{
						GFX_clear_gfx_object_on_background(&countdown_digit_2_sprite, &background);
						GFX_draw_one_gfx_object_on_background(&countdown_digit_1_sprite, &background);

						// Določimo naslednje stanje ter "exit" vrednost.
						// DOPOLNI done
						state = GAMEPLAY_COUNTDOWN_CLEAR;
						exit_value = 0;
					}

				break;

		case GAMEPLAY_COUNTDOWN_CLEAR:

					// Opravila stanja.
						// DOPOLNI
					if(TIMUT_stopwatch_has_another_X_ms_passed(&stopwatch, 1000))
					{
						GFX_clear_gfx_object_on_background(&countdown_digit_1_sprite, &background);


						// Določimo naslednje stanje ter "exit" vrednost.
						// DOPOLNI done
						state = GAMEPLAY_START_MEASURING_GAMEPLAY_TIME;
						exit_value = 0;
					}
				break;

		case GAMEPLAY_START_MEASURING_GAMEPLAY_TIME:

					// Opravila stanja.
						// DOPOLNI
			TIMUT_stopwatch_set_time_mark(&stopwatch);


					// Določimo naslednje stanje ter "exit" vrednost.
						// DOPOLNI done
					state = GAMEPLAY_SPAWN_TARGET;
					exit_value = 0;

				break;

		case GAMEPLAY_SPAWN_TARGET:

					// Opravila stanja.
						// DOPOLNI
				OBJ_spawn_target();
				KBD_flush();
				GFX_draw_one_gfx_object_on_background(&target.gfx_object, &background);
					// Določimo naslednje stanje ter "exit" vrednost.
						// DOPOLNI done
				state = GAMEPLAY_SHOOT_TARGET;
				exit_value = 0;

				break;


		case GAMEPLAY_SHOOT_TARGET:

					// Opravila stanja.

				if(TIMUT_stopwatch_has_another_X_ms_passed(&stopwatch, settings.game_play_update_period))
					{
					GamePlay_UpdateChanges();
					}

				key = KBD_get_pressed_key();

				if( key != BTN_NONE )
				{
					if(OBJ_is_crosshair_on_target())
					{
						game_status.score += target.points;
						state = GAMEPLAY_SPAWN_TARGET;
						GFX_clear_gfx_object_on_background(&target.gfx_object, &background);

					}
					else
					{
						game_status.score += settings.missed_shot_penalty;
					}

				}



				if(TIMUT_stopwatch_has_X_ms_passed(&stopwatch, settings.game_play_time))
				{
					// Določimo naslednje stanje ter "exit" vrednost.
					state = GAMEPLAY_BEFORE_GAME_OVER;
					exit_value = 0;
				}
				break;

				
				
			case GAMEPLAY_BEFORE_GAME_OVER:

					// Opravila stanja.
						// DOPOLNI

				
				
				
				
					// Določimo naslednje stanje ter "exit" vrednost.
						// DOPOLNI done
				state = GAMEPLAY_INIT;
				exit_value = 1;

				break;





		// Varovalka za nedefinirana stanja.
		default:

			// Javimo vir napake in vrednost nedefiniranega stanja, v katerem se je našel avtomat.
			printf("GamePlay(): Error - unknown state (%d)", state);

			// Ustavimo izvajanje z namenom, da razvojnik lahko opazi neobičajno obnašanje aplikacije.
			HAL_Delay(5000);

			// In na koncu avomat restiramo tako, da ga postavimo v začetno stanje.
			state = GAMEPLAY_INIT;
			exit_value = 0;

		break;

	}


	// Vrnemo "exit value" pod-avtomata.
	return exit_value;


}



// Funkcija, ki implementira pod-avtomat GameOver().
uint8_t GameOver()
{
	// Po vzoru pod-avtomata Intro() implementirajte ĹĄe pod-avtomat GameOver().

	static GAMEOVER_states_t state = GAMEOVER_SCREEN;

	//typedef enum GAMEOVER_states {GAMEOVER_SCREEN, GAMEOVER_WAIT_BEFORE_LEDS_OFF, GAMEOVER_LEDS_OFF, GAMEOVER_WAIT_FOR_ANY_KEY} GAMEOVER_states_t;
	// PomoĹžna spremenljivka, kamor bomo shranjevali vrnjeno izhodno
	// vrednost pod-avtomatov (tj. "exit value").
	// Hkrati z definicijo spremenljivke poskrbimo ĹĄe za inicializacijo zaÄetne vrednosti.
	uint8_t exit_value = 0;

	// PomoĹžna spremenljivka, kjer bomo hranili informacijo o pritisnjeni tipki.
	//buttons_enum_t	key;


	// Ker mora pod-avtomat implementirati Äasovne zakasnitve oziroma premore,
	// bomo potrebovali funkcionalnost ure ĹĄtoparice iz modula timing_utils.c.
	// Premislite: tudi ura ĹĄtoparica mora imeti svoje spremenljivke z neskonÄno
	// Ĺživljensko dobo.
	stopwatch_handle_t    stopwatch;


	switch (state)
		{

			case GAMEOVER_SCREEN:
				//opravila stanja
				GFX_draw_one_gfx_object_on_background(&game_over_sprite, &background);

				LEDs_on(0xFF);

				// Določimo naslednje stanje ter "exit" vrednost.

				// V tej točki se je izvajanje pod-avtomata zaključilo.
				// Stanje avtomata nastavimo na začetno stanje in nastavimo "exit" vrednost 1.
				state = GAMEOVER_WAIT_BEFORE_LEDS_OFF;
				exit_value = 0;

			break;

			case GAMEOVER_WAIT_BEFORE_LEDS_OFF:
				// Opravila stanja.
				KBD_flush();

				LEDs_on(0xFF);
				TIMUT_stopwatch_set_time_mark(&stopwatch);

				if(TIMUT_stopwatch_has_X_ms_passed(&stopwatch, 3000))
				{
				  state = GAMEOVER_LEDS_OFF;
				  exit_value = 0;
				}

			break;


			case GAMEOVER_LEDS_OFF:
				LEDs_off(0xFF);
				  state = GAMEOVER_WAIT_FOR_ANY_KEY;
				  exit_value = 0;
				  TIMUT_stopwatch_set_time_mark(&stopwatch);
				  KBD_flush();
			break;


			case GAMEOVER_WAIT_FOR_ANY_KEY:
				if(TIMUT_stopwatch_has_X_ms_passed(&stopwatch, 10000) || KBD_get_pressed_key() == BTN_NONE)
				{
					//cas 10 s je pretekel
					exit_value = 1;
					state = GAMEOVER_SCREEN;
				}
				else
				{
					 state = GAMEOVER_WAIT_FOR_ANY_KEY;
					 exit_value = 0;
				}


			break;


			// Avtomatu dodamo "varovalko" za primer, da avtomat zaide v nedefinirano stanje.
			// To napako javimo preko SCI vmesnika. Vidite, da SCI vmesnik uporabljamo
			// za realno-Äasni nadzor nad napakami aplikacije preko serijskega terminala.
			default:

				// Javimo vir napake in vrednost nedefiniranega stanja, v katerem se je naĹĄel avtomat.
				printf("Intro(): Error - unknown state (%d)", state);

				// Ustavimo izvajanje z namenom, da razvojnik lahko opazi neobiÄajno obnaĹĄanje aplikacije.
				HAL_Delay(5000);

				// In na koncu avomat restiramo tako, da ga postavimo v zaÄetno stanje.
				state = GAMEOVER_SCREEN;
				exit_value = 0;

			break;


		}


	return exit_value;

}



// Funkcija GamePlay_Update_Aiming_LED_Indicator() posodobi stanje LED indikatorja
// točnosti namerka: bolj kot je namerek na tarči, več LEDic bo prižganih.
void GamePlay_Update_Aiming_LED_Indicator(void)
{

	// Definicija makro parametrov.
	#define NOMINAL_DISTANCE_BETWEEN_TARGET_AND_CROSSHAIR	150

	// Pomožne spremenljivke.
	int16_t percent_distance;
	int16_t percent_vicinity;

	uint8_t number_of_LEDs_on;

	uint8_t bitmask_right = 0;
	uint8_t bitmask_left = 0;
	uint8_t bitmask;


	// Izračunamo relativno oddaljenost tarče
	percent_distance = (crosshair.distance_to_target_center * 100) / NOMINAL_DISTANCE_BETWEEN_TARGET_AND_CROSSHAIR;


	// Porežemo prevelike vrednosti.
	if (percent_distance > 100)
		percent_distance = 100;


	// in jo pretvorimo v "relativno bližino tarče".
	percent_vicinity = 100 - percent_distance;


	// Preračunamo, koliko LEDic je potrebno prižgati za dano "relativno bližino tarče".
	number_of_LEDs_on = ( (1 + NUM_OF_LEDS/2) * percent_vicinity ) / 100;

	// Porežemo prevelike vrednosti.
	if (number_of_LEDs_on  > (NUM_OF_LEDS/2) )
		number_of_LEDs_on = (NUM_OF_LEDS/2);


	// Tvorimo bitno masko za prižig štirih LEDic na desni strani.
	for(uint8_t i = 1; i <= number_of_LEDs_on ; i++ )
	{
		bitmask_right |= 1;
		bitmask_right = bitmask_right << 1;
	}
	bitmask_right = bitmask_right >> 1;


	// Tvorimo bitno masko za prižig štirih LEDic na levi strani.
	bitmask_left = bitmask_right << (8 - number_of_LEDs_on);

	// Bitni maski združimo v eno samo masko
	bitmask = bitmask_right | bitmask_left;


	// in jo uporabimo za prižig LEDic.
	LEDs_write(bitmask);

}


// ------- Test functions ---------


// -------------- Private function implementations -------------

