
Vaja6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dc0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001f98  08001f98  00011f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fa8  08001fa8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fa8  08001fa8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fa8  08001fa8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fa8  08001fa8  00011fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fac  08001fac  00011fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  08001fbc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08001fbc  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c38  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ed  00000000  00000000  00025c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  00027368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000618  00000000  00000000  00027a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025377  00000000  00000000  00028060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000715a  00000000  00000000  0004d3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb1d2  00000000  00000000  00054531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013f703  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001970  00000000  00000000  0013f754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001f80 	.word	0x08001f80

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08001f80 	.word	0x08001f80

08000218 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	683a      	ldr	r2, [r7, #0]
 8000226:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr

08000234 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800023e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000240:	4907      	ldr	r1, [pc, #28]	; (8000260 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4313      	orrs	r3, r2
 8000246:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800024a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4013      	ands	r3, r2
 8000250:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000252:	68fb      	ldr	r3, [r7, #12]
}
 8000254:	bf00      	nop
 8000256:	3714      	adds	r7, #20
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	40021000 	.word	0x40021000

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000268:	f000 fa05 	bl	8000676 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026c:	f000 f82d 	bl	80002ca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000270:	f000 f876 	bl	8000360 <MX_GPIO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  LED_init();
 8000274:	f001 fb2a 	bl	80018cc <LED_init>
  //LED_demo();

  KBD_init();
 8000278:	f001 fd12 	bl	8001ca0 <KBD_init>



  LEDs_on(0b10101010);
 800027c:	20aa      	movs	r0, #170	; 0xaa
 800027e:	f001 fbab 	bl	80019d8 <LEDs_on>
  HAL_Delay(500);
 8000282:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000286:	f000 fa67 	bl	8000758 <HAL_Delay>
  LEDs_off(LEDs_read());
 800028a:	f001 fc29 	bl	8001ae0 <LEDs_read>
 800028e:	4603      	mov	r3, r0
 8000290:	4618      	mov	r0, r3
 8000292:	f001 fbcf 	bl	8001a34 <LEDs_off>
  LEDs_on(0b01010101);
 8000296:	2055      	movs	r0, #85	; 0x55
 8000298:	f001 fb9e 	bl	80019d8 <LEDs_on>
  HAL_Delay(500);
 800029c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002a0:	f000 fa5a 	bl	8000758 <HAL_Delay>
  LEDs_off(LEDs_read());
 80002a4:	f001 fc1c 	bl	8001ae0 <LEDs_read>
 80002a8:	4603      	mov	r3, r0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fbc2 	bl	8001a34 <LEDs_off>
  LEDs_on(0b10101010);
 80002b0:	20aa      	movs	r0, #170	; 0xaa
 80002b2:	f001 fb91 	bl	80019d8 <LEDs_on>
  HAL_Delay(500);
 80002b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ba:	f000 fa4d 	bl	8000758 <HAL_Delay>
  LEDs_write(0);
 80002be:	2000      	movs	r0, #0
 80002c0:	f001 fbe6 	bl	8001a90 <LEDs_write>
  {
    /* USER CODE END WHILE */
	  //KBD_demo();


	  KBD_demo();
 80002c4:	f001 fdd4 	bl	8001e70 <KBD_demo>
  {
 80002c8:	e7fc      	b.n	80002c4 <main+0x60>

080002ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ca:	b580      	push	{r7, lr}
 80002cc:	b094      	sub	sp, #80	; 0x50
 80002ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d0:	f107 0318 	add.w	r3, r7, #24
 80002d4:	2238      	movs	r2, #56	; 0x38
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f001 fe49 	bl	8001f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002ec:	2000      	movs	r0, #0
 80002ee:	f000 fb39 	bl	8000964 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f2:	2302      	movs	r3, #2
 80002f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fc:	2340      	movs	r3, #64	; 0x40
 80002fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000300:	2302      	movs	r3, #2
 8000302:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000304:	2302      	movs	r3, #2
 8000306:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000308:	2304      	movs	r3, #4
 800030a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800030c:	2355      	movs	r3, #85	; 0x55
 800030e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000310:	2302      	movs	r3, #2
 8000312:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000314:	2302      	movs	r3, #2
 8000316:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000318:	2302      	movs	r3, #2
 800031a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031c:	f107 0318 	add.w	r3, r7, #24
 8000320:	4618      	mov	r0, r3
 8000322:	f000 fbd3 	bl	8000acc <HAL_RCC_OscConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800032c:	f000 f914 	bl	8000558 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000330:	230f      	movs	r3, #15
 8000332:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	2303      	movs	r3, #3
 8000336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2104      	movs	r1, #4
 8000348:	4618      	mov	r0, r3
 800034a:	f000 fed7 	bl	80010fc <HAL_RCC_ClockConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000354:	f000 f900 	bl	8000558 <Error_Handler>
  }
}
 8000358:	bf00      	nop
 800035a:	3750      	adds	r7, #80	; 0x50
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	463b      	mov	r3, r7
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
 8000372:	611a      	str	r2, [r3, #16]
 8000374:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000376:	2004      	movs	r0, #4
 8000378:	f7ff ff5c 	bl	8000234 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 800037c:	2020      	movs	r0, #32
 800037e:	f7ff ff59 	bl	8000234 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOG);
 8000382:	2040      	movs	r0, #64	; 0x40
 8000384:	f7ff ff56 	bl	8000234 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_3);
 8000388:	2108      	movs	r1, #8
 800038a:	4870      	ldr	r0, [pc, #448]	; (800054c <MX_GPIO_Init+0x1ec>)
 800038c:	f7ff ff44 	bl	8000218 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_4);
 8000390:	2110      	movs	r1, #16
 8000392:	486e      	ldr	r0, [pc, #440]	; (800054c <MX_GPIO_Init+0x1ec>)
 8000394:	f7ff ff40 	bl	8000218 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_5);
 8000398:	2120      	movs	r1, #32
 800039a:	486c      	ldr	r0, [pc, #432]	; (800054c <MX_GPIO_Init+0x1ec>)
 800039c:	f7ff ff3c 	bl	8000218 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0);
 80003a0:	2101      	movs	r1, #1
 80003a2:	486b      	ldr	r0, [pc, #428]	; (8000550 <MX_GPIO_Init+0x1f0>)
 80003a4:	f7ff ff38 	bl	8000218 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1);
 80003a8:	2102      	movs	r1, #2
 80003aa:	4869      	ldr	r0, [pc, #420]	; (8000550 <MX_GPIO_Init+0x1f0>)
 80003ac:	f7ff ff34 	bl	8000218 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_2);
 80003b0:	2104      	movs	r1, #4
 80003b2:	4867      	ldr	r0, [pc, #412]	; (8000550 <MX_GPIO_Init+0x1f0>)
 80003b4:	f7ff ff30 	bl	8000218 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_3);
 80003b8:	2108      	movs	r1, #8
 80003ba:	4865      	ldr	r0, [pc, #404]	; (8000550 <MX_GPIO_Init+0x1f0>)
 80003bc:	f7ff ff2c 	bl	8000218 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_2);
 80003c0:	2104      	movs	r1, #4
 80003c2:	4862      	ldr	r0, [pc, #392]	; (800054c <MX_GPIO_Init+0x1ec>)
 80003c4:	f7ff ff28 	bl	8000218 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 80003c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003cc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80003ce:	2300      	movs	r3, #0
 80003d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80003d2:	2301      	movs	r3, #1
 80003d4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003d6:	463b      	mov	r3, r7
 80003d8:	4619      	mov	r1, r3
 80003da:	485d      	ldr	r0, [pc, #372]	; (8000550 <MX_GPIO_Init+0x1f0>)
 80003dc:	f001 f9bd 	bl	800175a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80003e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003e4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80003e6:	2300      	movs	r3, #0
 80003e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ee:	463b      	mov	r3, r7
 80003f0:	4619      	mov	r1, r3
 80003f2:	4857      	ldr	r0, [pc, #348]	; (8000550 <MX_GPIO_Init+0x1f0>)
 80003f4:	f001 f9b1 	bl	800175a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80003f8:	2308      	movs	r3, #8
 80003fa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80003fc:	2301      	movs	r3, #1
 80003fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000400:	2300      	movs	r3, #0
 8000402:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000408:	2300      	movs	r3, #0
 800040a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800040c:	463b      	mov	r3, r7
 800040e:	4619      	mov	r1, r3
 8000410:	484e      	ldr	r0, [pc, #312]	; (800054c <MX_GPIO_Init+0x1ec>)
 8000412:	f001 f9a2 	bl	800175a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000416:	2310      	movs	r3, #16
 8000418:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800041a:	2301      	movs	r3, #1
 800041c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800041e:	2300      	movs	r3, #0
 8000420:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800042a:	463b      	mov	r3, r7
 800042c:	4619      	mov	r1, r3
 800042e:	4847      	ldr	r0, [pc, #284]	; (800054c <MX_GPIO_Init+0x1ec>)
 8000430:	f001 f993 	bl	800175a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000434:	2320      	movs	r3, #32
 8000436:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000438:	2301      	movs	r3, #1
 800043a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800043c:	2300      	movs	r3, #0
 800043e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000444:	2300      	movs	r3, #0
 8000446:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000448:	463b      	mov	r3, r7
 800044a:	4619      	mov	r1, r3
 800044c:	483f      	ldr	r0, [pc, #252]	; (800054c <MX_GPIO_Init+0x1ec>)
 800044e:	f001 f984 	bl	800175a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000452:	2301      	movs	r3, #1
 8000454:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000456:	2301      	movs	r3, #1
 8000458:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800045a:	2300      	movs	r3, #0
 800045c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000462:	2300      	movs	r3, #0
 8000464:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000466:	463b      	mov	r3, r7
 8000468:	4619      	mov	r1, r3
 800046a:	4839      	ldr	r0, [pc, #228]	; (8000550 <MX_GPIO_Init+0x1f0>)
 800046c:	f001 f975 	bl	800175a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000470:	2302      	movs	r3, #2
 8000472:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000474:	2301      	movs	r3, #1
 8000476:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000478:	2300      	movs	r3, #0
 800047a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000480:	2300      	movs	r3, #0
 8000482:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000484:	463b      	mov	r3, r7
 8000486:	4619      	mov	r1, r3
 8000488:	4831      	ldr	r0, [pc, #196]	; (8000550 <MX_GPIO_Init+0x1f0>)
 800048a:	f001 f966 	bl	800175a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800048e:	2304      	movs	r3, #4
 8000490:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000492:	2301      	movs	r3, #1
 8000494:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000496:	2300      	movs	r3, #0
 8000498:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800049e:	2300      	movs	r3, #0
 80004a0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a2:	463b      	mov	r3, r7
 80004a4:	4619      	mov	r1, r3
 80004a6:	482a      	ldr	r0, [pc, #168]	; (8000550 <MX_GPIO_Init+0x1f0>)
 80004a8:	f001 f957 	bl	800175a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80004ac:	2308      	movs	r3, #8
 80004ae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004b0:	2301      	movs	r3, #1
 80004b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004bc:	2300      	movs	r3, #0
 80004be:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004c0:	463b      	mov	r3, r7
 80004c2:	4619      	mov	r1, r3
 80004c4:	4822      	ldr	r0, [pc, #136]	; (8000550 <MX_GPIO_Init+0x1f0>)
 80004c6:	f001 f948 	bl	800175a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80004ca:	2304      	movs	r3, #4
 80004cc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004ce:	2301      	movs	r3, #1
 80004d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004da:	2300      	movs	r3, #0
 80004dc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004de:	463b      	mov	r3, r7
 80004e0:	4619      	mov	r1, r3
 80004e2:	481a      	ldr	r0, [pc, #104]	; (800054c <MX_GPIO_Init+0x1ec>)
 80004e4:	f001 f939 	bl	800175a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80004e8:	2301      	movs	r3, #1
 80004ea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80004ec:	2300      	movs	r3, #0
 80004ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80004f0:	2301      	movs	r3, #1
 80004f2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80004f4:	463b      	mov	r3, r7
 80004f6:	4619      	mov	r1, r3
 80004f8:	4816      	ldr	r0, [pc, #88]	; (8000554 <MX_GPIO_Init+0x1f4>)
 80004fa:	f001 f92e 	bl	800175a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80004fe:	2302      	movs	r3, #2
 8000500:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000506:	2301      	movs	r3, #1
 8000508:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800050a:	463b      	mov	r3, r7
 800050c:	4619      	mov	r1, r3
 800050e:	4811      	ldr	r0, [pc, #68]	; (8000554 <MX_GPIO_Init+0x1f4>)
 8000510:	f001 f923 	bl	800175a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000514:	2340      	movs	r3, #64	; 0x40
 8000516:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800051c:	2301      	movs	r3, #1
 800051e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000520:	463b      	mov	r3, r7
 8000522:	4619      	mov	r1, r3
 8000524:	480b      	ldr	r0, [pc, #44]	; (8000554 <MX_GPIO_Init+0x1f4>)
 8000526:	f001 f918 	bl	800175a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800052a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800052e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000534:	2301      	movs	r3, #1
 8000536:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000538:	463b      	mov	r3, r7
 800053a:	4619      	mov	r1, r3
 800053c:	4805      	ldr	r0, [pc, #20]	; (8000554 <MX_GPIO_Init+0x1f4>)
 800053e:	f001 f90c 	bl	800175a <LL_GPIO_Init>

}
 8000542:	bf00      	nop
 8000544:	3718      	adds	r7, #24
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	48001400 	.word	0x48001400
 8000550:	48000800 	.word	0x48000800
 8000554:	48001800 	.word	0x48001800

08000558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055c:	b672      	cpsid	i
}
 800055e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000560:	e7fe      	b.n	8000560 <Error_Handler+0x8>
	...

08000564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <HAL_MspInit+0x44>)
 800056c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800056e:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <HAL_MspInit+0x44>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6613      	str	r3, [r2, #96]	; 0x60
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <HAL_MspInit+0x44>)
 8000578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <HAL_MspInit+0x44>)
 8000584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000586:	4a08      	ldr	r2, [pc, #32]	; (80005a8 <HAL_MspInit+0x44>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058c:	6593      	str	r3, [r2, #88]	; 0x58
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_MspInit+0x44>)
 8000590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800059a:	f000 fa87 	bl	8000aac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <NMI_Handler+0x4>

080005b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <HardFault_Handler+0x4>

080005b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <MemManage_Handler+0x4>

080005be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <BusFault_Handler+0x4>

080005c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <UsageFault_Handler+0x4>

080005ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f8:	f000 f890 	bl	800071c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <SystemInit+0x20>)
 8000606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800060a:	4a05      	ldr	r2, [pc, #20]	; (8000620 <SystemInit+0x20>)
 800060c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000626:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <LoopForever+0x6>)
  ldr r1, =_edata
 800062a:	490e      	ldr	r1, [pc, #56]	; (8000664 <LoopForever+0xa>)
  ldr r2, =_sidata
 800062c:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <LoopForever+0xe>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000630:	e002      	b.n	8000638 <LoopCopyDataInit>

08000632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000636:	3304      	adds	r3, #4

08000638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800063c:	d3f9      	bcc.n	8000632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063e:	4a0b      	ldr	r2, [pc, #44]	; (800066c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000640:	4c0b      	ldr	r4, [pc, #44]	; (8000670 <LoopForever+0x16>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000644:	e001      	b.n	800064a <LoopFillZerobss>

08000646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000648:	3204      	adds	r2, #4

0800064a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800064c:	d3fb      	bcc.n	8000646 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800064e:	f7ff ffd7 	bl	8000600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000652:	f001 fc69 	bl	8001f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000656:	f7ff fe05 	bl	8000264 <main>

0800065a <LoopForever>:

LoopForever:
    b LoopForever
 800065a:	e7fe      	b.n	800065a <LoopForever>
  ldr   r0, =_estack
 800065c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000664:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000668:	08001fb0 	.word	0x08001fb0
  ldr r2, =_sbss
 800066c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000670:	200000ec 	.word	0x200000ec

08000674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000674:	e7fe      	b.n	8000674 <ADC1_2_IRQHandler>

08000676 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800067c:	2300      	movs	r3, #0
 800067e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000680:	2003      	movs	r0, #3
 8000682:	f000 f93d 	bl	8000900 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000686:	200f      	movs	r0, #15
 8000688:	f000 f80e 	bl	80006a8 <HAL_InitTick>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d002      	beq.n	8000698 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	71fb      	strb	r3, [r7, #7]
 8000696:	e001      	b.n	800069c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000698:	f7ff ff64 	bl	8000564 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800069c:	79fb      	ldrb	r3, [r7, #7]

}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <HAL_InitTick+0x68>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d022      	beq.n	8000702 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006bc:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_InitTick+0x6c>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <HAL_InitTick+0x68>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80006cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 f93a 	bl	800094a <HAL_SYSTICK_Config>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10f      	bne.n	80006fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b0f      	cmp	r3, #15
 80006e0:	d809      	bhi.n	80006f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e2:	2200      	movs	r2, #0
 80006e4:	6879      	ldr	r1, [r7, #4]
 80006e6:	f04f 30ff 	mov.w	r0, #4294967295
 80006ea:	f000 f914 	bl	8000916 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <HAL_InitTick+0x70>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	e007      	b.n	8000706 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	73fb      	strb	r3, [r7, #15]
 80006fa:	e004      	b.n	8000706 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006fc:	2301      	movs	r3, #1
 80006fe:	73fb      	strb	r3, [r7, #15]
 8000700:	e001      	b.n	8000706 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000706:	7bfb      	ldrb	r3, [r7, #15]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000008 	.word	0x20000008
 8000714:	20000000 	.word	0x20000000
 8000718:	20000004 	.word	0x20000004

0800071c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_IncTick+0x1c>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_IncTick+0x20>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4413      	add	r3, r2
 800072a:	4a03      	ldr	r2, [pc, #12]	; (8000738 <HAL_IncTick+0x1c>)
 800072c:	6013      	str	r3, [r2, #0]
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	20000028 	.word	0x20000028
 800073c:	20000008 	.word	0x20000008

08000740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <HAL_GetTick+0x14>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000028 	.word	0x20000028

08000758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000760:	f7ff ffee 	bl	8000740 <HAL_GetTick>
 8000764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000770:	d004      	beq.n	800077c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_Delay+0x40>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	4413      	add	r3, r2
 800077a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800077c:	bf00      	nop
 800077e:	f7ff ffdf 	bl	8000740 <HAL_GetTick>
 8000782:	4602      	mov	r2, r0
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	429a      	cmp	r2, r3
 800078c:	d8f7      	bhi.n	800077e <HAL_Delay+0x26>
  {
  }
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000008 	.word	0x20000008

0800079c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <__NVIC_SetPriorityGrouping+0x44>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b8:	4013      	ands	r3, r2
 80007ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ce:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <__NVIC_SetPriorityGrouping+0x44>)
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	60d3      	str	r3, [r2, #12]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <__NVIC_GetPriorityGrouping+0x18>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	0a1b      	lsrs	r3, r3, #8
 80007ee:	f003 0307 	and.w	r3, r3, #7
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	db0a      	blt.n	800082a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	490c      	ldr	r1, [pc, #48]	; (800084c <__NVIC_SetPriority+0x4c>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	0112      	lsls	r2, r2, #4
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	440b      	add	r3, r1
 8000824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000828:	e00a      	b.n	8000840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4908      	ldr	r1, [pc, #32]	; (8000850 <__NVIC_SetPriority+0x50>)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	3b04      	subs	r3, #4
 8000838:	0112      	lsls	r2, r2, #4
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	440b      	add	r3, r1
 800083e:	761a      	strb	r2, [r3, #24]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000e100 	.word	0xe000e100
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	f1c3 0307 	rsb	r3, r3, #7
 800086e:	2b04      	cmp	r3, #4
 8000870:	bf28      	it	cs
 8000872:	2304      	movcs	r3, #4
 8000874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3304      	adds	r3, #4
 800087a:	2b06      	cmp	r3, #6
 800087c:	d902      	bls.n	8000884 <NVIC_EncodePriority+0x30>
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3b03      	subs	r3, #3
 8000882:	e000      	b.n	8000886 <NVIC_EncodePriority+0x32>
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000888:	f04f 32ff 	mov.w	r2, #4294967295
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43da      	mvns	r2, r3
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	401a      	ands	r2, r3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800089c:	f04f 31ff 	mov.w	r1, #4294967295
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	43d9      	mvns	r1, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	4313      	orrs	r3, r2
         );
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3724      	adds	r7, #36	; 0x24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008cc:	d301      	bcc.n	80008d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00f      	b.n	80008f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <SysTick_Config+0x40>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008da:	210f      	movs	r1, #15
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f7ff ff8e 	bl	8000800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <SysTick_Config+0x40>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ea:	4b04      	ldr	r3, [pc, #16]	; (80008fc <SysTick_Config+0x40>)
 80008ec:	2207      	movs	r2, #7
 80008ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	e000e010 	.word	0xe000e010

08000900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff ff47 	bl	800079c <__NVIC_SetPriorityGrouping>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b086      	sub	sp, #24
 800091a:	af00      	add	r7, sp, #0
 800091c:	4603      	mov	r3, r0
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000924:	f7ff ff5e 	bl	80007e4 <__NVIC_GetPriorityGrouping>
 8000928:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	68b9      	ldr	r1, [r7, #8]
 800092e:	6978      	ldr	r0, [r7, #20]
 8000930:	f7ff ff90 	bl	8000854 <NVIC_EncodePriority>
 8000934:	4602      	mov	r2, r0
 8000936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093a:	4611      	mov	r1, r2
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff5f 	bl	8000800 <__NVIC_SetPriority>
}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff ffb2 	bl	80008bc <SysTick_Config>
 8000958:	4603      	mov	r3, r0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d141      	bne.n	80009f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000972:	4b4b      	ldr	r3, [pc, #300]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800097a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800097e:	d131      	bne.n	80009e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000980:	4b47      	ldr	r3, [pc, #284]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000986:	4a46      	ldr	r2, [pc, #280]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800098c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000990:	4b43      	ldr	r3, [pc, #268]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000998:	4a41      	ldr	r2, [pc, #260]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800099a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800099e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80009a0:	4b40      	ldr	r3, [pc, #256]	; (8000aa4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2232      	movs	r2, #50	; 0x32
 80009a6:	fb02 f303 	mul.w	r3, r2, r3
 80009aa:	4a3f      	ldr	r2, [pc, #252]	; (8000aa8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80009ac:	fba2 2303 	umull	r2, r3, r2, r3
 80009b0:	0c9b      	lsrs	r3, r3, #18
 80009b2:	3301      	adds	r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80009b6:	e002      	b.n	80009be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80009be:	4b38      	ldr	r3, [pc, #224]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009ca:	d102      	bne.n	80009d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d1f2      	bne.n	80009b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009d2:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009de:	d158      	bne.n	8000a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80009e0:	2303      	movs	r3, #3
 80009e2:	e057      	b.n	8000a94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80009e4:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80009e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009ea:	4a2d      	ldr	r2, [pc, #180]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80009ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80009f4:	e04d      	b.n	8000a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009fc:	d141      	bne.n	8000a82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80009fe:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a0a:	d131      	bne.n	8000a70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000a0c:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a12:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a1c:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a24:	4a1e      	ldr	r2, [pc, #120]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2232      	movs	r2, #50	; 0x32
 8000a32:	fb02 f303 	mul.w	r3, r2, r3
 8000a36:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000a38:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3c:	0c9b      	lsrs	r3, r3, #18
 8000a3e:	3301      	adds	r3, #1
 8000a40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000a42:	e002      	b.n	8000a4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a56:	d102      	bne.n	8000a5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1f2      	bne.n	8000a44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a6a:	d112      	bne.n	8000a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	e011      	b.n	8000a94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000a80:	e007      	b.n	8000a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a90:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	40007000 	.word	0x40007000
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	431bde83 	.word	0x431bde83

08000aac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000ab6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aba:	6093      	str	r3, [r2, #8]
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40007000 	.word	0x40007000

08000acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d101      	bne.n	8000ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e306      	b.n	80010ec <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d075      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000aea:	4b97      	ldr	r3, [pc, #604]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	f003 030c 	and.w	r3, r3, #12
 8000af2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000af4:	4b94      	ldr	r3, [pc, #592]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	f003 0303 	and.w	r3, r3, #3
 8000afc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	2b0c      	cmp	r3, #12
 8000b02:	d102      	bne.n	8000b0a <HAL_RCC_OscConfig+0x3e>
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d002      	beq.n	8000b10 <HAL_RCC_OscConfig+0x44>
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	2b08      	cmp	r3, #8
 8000b0e:	d10b      	bne.n	8000b28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b10:	4b8d      	ldr	r3, [pc, #564]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d05b      	beq.n	8000bd4 <HAL_RCC_OscConfig+0x108>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d157      	bne.n	8000bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	e2e1      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b30:	d106      	bne.n	8000b40 <HAL_RCC_OscConfig+0x74>
 8000b32:	4b85      	ldr	r3, [pc, #532]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a84      	ldr	r2, [pc, #528]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	e01d      	b.n	8000b7c <HAL_RCC_OscConfig+0xb0>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b48:	d10c      	bne.n	8000b64 <HAL_RCC_OscConfig+0x98>
 8000b4a:	4b7f      	ldr	r3, [pc, #508]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a7e      	ldr	r2, [pc, #504]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	4b7c      	ldr	r3, [pc, #496]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a7b      	ldr	r2, [pc, #492]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b60:	6013      	str	r3, [r2, #0]
 8000b62:	e00b      	b.n	8000b7c <HAL_RCC_OscConfig+0xb0>
 8000b64:	4b78      	ldr	r3, [pc, #480]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a77      	ldr	r2, [pc, #476]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	4b75      	ldr	r3, [pc, #468]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a74      	ldr	r2, [pc, #464]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d013      	beq.n	8000bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b84:	f7ff fddc 	bl	8000740 <HAL_GetTick>
 8000b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b8a:	e008      	b.n	8000b9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b8c:	f7ff fdd8 	bl	8000740 <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	2b64      	cmp	r3, #100	; 0x64
 8000b98:	d901      	bls.n	8000b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	e2a6      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b9e:	4b6a      	ldr	r3, [pc, #424]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0f0      	beq.n	8000b8c <HAL_RCC_OscConfig+0xc0>
 8000baa:	e014      	b.n	8000bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bac:	f7ff fdc8 	bl	8000740 <HAL_GetTick>
 8000bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000bb2:	e008      	b.n	8000bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bb4:	f7ff fdc4 	bl	8000740 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	2b64      	cmp	r3, #100	; 0x64
 8000bc0:	d901      	bls.n	8000bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	e292      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000bc6:	4b60      	ldr	r3, [pc, #384]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1f0      	bne.n	8000bb4 <HAL_RCC_OscConfig+0xe8>
 8000bd2:	e000      	b.n	8000bd6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d075      	beq.n	8000cce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000be2:	4b59      	ldr	r3, [pc, #356]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f003 030c 	and.w	r3, r3, #12
 8000bea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000bec:	4b56      	ldr	r3, [pc, #344]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	2b0c      	cmp	r3, #12
 8000bfa:	d102      	bne.n	8000c02 <HAL_RCC_OscConfig+0x136>
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d002      	beq.n	8000c08 <HAL_RCC_OscConfig+0x13c>
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d11f      	bne.n	8000c48 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c08:	4b4f      	ldr	r3, [pc, #316]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d005      	beq.n	8000c20 <HAL_RCC_OscConfig+0x154>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d101      	bne.n	8000c20 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e265      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c20:	4b49      	ldr	r3, [pc, #292]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	061b      	lsls	r3, r3, #24
 8000c2e:	4946      	ldr	r1, [pc, #280]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000c30:	4313      	orrs	r3, r2
 8000c32:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000c34:	4b45      	ldr	r3, [pc, #276]	; (8000d4c <HAL_RCC_OscConfig+0x280>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fd35 	bl	80006a8 <HAL_InitTick>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d043      	beq.n	8000ccc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e251      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d023      	beq.n	8000c98 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c50:	4b3d      	ldr	r3, [pc, #244]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a3c      	ldr	r2, [pc, #240]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c5c:	f7ff fd70 	bl	8000740 <HAL_GetTick>
 8000c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c62:	e008      	b.n	8000c76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c64:	f7ff fd6c 	bl	8000740 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d901      	bls.n	8000c76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	e23a      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c76:	4b34      	ldr	r3, [pc, #208]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f0      	beq.n	8000c64 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c82:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	691b      	ldr	r3, [r3, #16]
 8000c8e:	061b      	lsls	r3, r3, #24
 8000c90:	492d      	ldr	r1, [pc, #180]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000c92:	4313      	orrs	r3, r2
 8000c94:	604b      	str	r3, [r1, #4]
 8000c96:	e01a      	b.n	8000cce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c98:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a2a      	ldr	r2, [pc, #168]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000c9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fd4c 	bl	8000740 <HAL_GetTick>
 8000ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000caa:	e008      	b.n	8000cbe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cac:	f7ff fd48 	bl	8000740 <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d901      	bls.n	8000cbe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e216      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1f0      	bne.n	8000cac <HAL_RCC_OscConfig+0x1e0>
 8000cca:	e000      	b.n	8000cce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ccc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0308 	and.w	r3, r3, #8
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d041      	beq.n	8000d5e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d01c      	beq.n	8000d1c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ce8:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cf2:	f7ff fd25 	bl	8000740 <HAL_GetTick>
 8000cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000cf8:	e008      	b.n	8000d0c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cfa:	f7ff fd21 	bl	8000740 <HAL_GetTick>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d901      	bls.n	8000d0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	e1ef      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0ef      	beq.n	8000cfa <HAL_RCC_OscConfig+0x22e>
 8000d1a:	e020      	b.n	8000d5e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d22:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <HAL_RCC_OscConfig+0x27c>)
 8000d24:	f023 0301 	bic.w	r3, r3, #1
 8000d28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d2c:	f7ff fd08 	bl	8000740 <HAL_GetTick>
 8000d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d32:	e00d      	b.n	8000d50 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d34:	f7ff fd04 	bl	8000740 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d906      	bls.n	8000d50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000d42:	2303      	movs	r3, #3
 8000d44:	e1d2      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d50:	4b8c      	ldr	r3, [pc, #560]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1ea      	bne.n	8000d34 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 80a6 	beq.w	8000eb8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000d70:	4b84      	ldr	r3, [pc, #528]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d101      	bne.n	8000d80 <HAL_RCC_OscConfig+0x2b4>
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e000      	b.n	8000d82 <HAL_RCC_OscConfig+0x2b6>
 8000d80:	2300      	movs	r3, #0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00d      	beq.n	8000da2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	4b7f      	ldr	r3, [pc, #508]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8a:	4a7e      	ldr	r2, [pc, #504]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d90:	6593      	str	r3, [r2, #88]	; 0x58
 8000d92:	4b7c      	ldr	r3, [pc, #496]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000da2:	4b79      	ldr	r3, [pc, #484]	; (8000f88 <HAL_RCC_OscConfig+0x4bc>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d118      	bne.n	8000de0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000dae:	4b76      	ldr	r3, [pc, #472]	; (8000f88 <HAL_RCC_OscConfig+0x4bc>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a75      	ldr	r2, [pc, #468]	; (8000f88 <HAL_RCC_OscConfig+0x4bc>)
 8000db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dba:	f7ff fcc1 	bl	8000740 <HAL_GetTick>
 8000dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dc0:	e008      	b.n	8000dd4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dc2:	f7ff fcbd 	bl	8000740 <HAL_GetTick>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d901      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e18b      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dd4:	4b6c      	ldr	r3, [pc, #432]	; (8000f88 <HAL_RCC_OscConfig+0x4bc>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0f0      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d108      	bne.n	8000dfa <HAL_RCC_OscConfig+0x32e>
 8000de8:	4b66      	ldr	r3, [pc, #408]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dee:	4a65      	ldr	r2, [pc, #404]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000df8:	e024      	b.n	8000e44 <HAL_RCC_OscConfig+0x378>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b05      	cmp	r3, #5
 8000e00:	d110      	bne.n	8000e24 <HAL_RCC_OscConfig+0x358>
 8000e02:	4b60      	ldr	r3, [pc, #384]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e08:	4a5e      	ldr	r2, [pc, #376]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e12:	4b5c      	ldr	r3, [pc, #368]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e18:	4a5a      	ldr	r2, [pc, #360]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e22:	e00f      	b.n	8000e44 <HAL_RCC_OscConfig+0x378>
 8000e24:	4b57      	ldr	r3, [pc, #348]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e2a:	4a56      	ldr	r2, [pc, #344]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000e2c:	f023 0301 	bic.w	r3, r3, #1
 8000e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e34:	4b53      	ldr	r3, [pc, #332]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e3a:	4a52      	ldr	r2, [pc, #328]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000e3c:	f023 0304 	bic.w	r3, r3, #4
 8000e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d016      	beq.n	8000e7a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e4c:	f7ff fc78 	bl	8000740 <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e52:	e00a      	b.n	8000e6a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e54:	f7ff fc74 	bl	8000740 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e140      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e6a:	4b46      	ldr	r3, [pc, #280]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0ed      	beq.n	8000e54 <HAL_RCC_OscConfig+0x388>
 8000e78:	e015      	b.n	8000ea6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e7a:	f7ff fc61 	bl	8000740 <HAL_GetTick>
 8000e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e80:	e00a      	b.n	8000e98 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e82:	f7ff fc5d 	bl	8000740 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e129      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e98:	4b3a      	ldr	r3, [pc, #232]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1ed      	bne.n	8000e82 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000ea6:	7ffb      	ldrb	r3, [r7, #31]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d105      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eac:	4b35      	ldr	r3, [pc, #212]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb0:	4a34      	ldr	r2, [pc, #208]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0320 	and.w	r3, r3, #32
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d03c      	beq.n	8000f3e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d01c      	beq.n	8000f06 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000ecc:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ed2:	4a2c      	ldr	r2, [pc, #176]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000edc:	f7ff fc30 	bl	8000740 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000ee4:	f7ff fc2c 	bl	8000740 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e0fa      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000ef6:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0ef      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x418>
 8000f04:	e01b      	b.n	8000f3e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000f06:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000f08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f0c:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000f0e:	f023 0301 	bic.w	r3, r3, #1
 8000f12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f16:	f7ff fc13 	bl	8000740 <HAL_GetTick>
 8000f1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f1e:	f7ff fc0f 	bl	8000740 <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e0dd      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1ef      	bne.n	8000f1e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 80d1 	beq.w	80010ea <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f003 030c 	and.w	r3, r3, #12
 8000f50:	2b0c      	cmp	r3, #12
 8000f52:	f000 808b 	beq.w	800106c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d15e      	bne.n	800101c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <HAL_RCC_OscConfig+0x4b8>)
 8000f64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6a:	f7ff fbe9 	bl	8000740 <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f70:	e00c      	b.n	8000f8c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f72:	f7ff fbe5 	bl	8000740 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d905      	bls.n	8000f8c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e0b3      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f8c:	4b59      	ldr	r3, [pc, #356]	; (80010f4 <HAL_RCC_OscConfig+0x628>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1ec      	bne.n	8000f72 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f98:	4b56      	ldr	r3, [pc, #344]	; (80010f4 <HAL_RCC_OscConfig+0x628>)
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	4b56      	ldr	r3, [pc, #344]	; (80010f8 <HAL_RCC_OscConfig+0x62c>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6a11      	ldr	r1, [r2, #32]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000fa8:	3a01      	subs	r2, #1
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	4311      	orrs	r1, r2
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000fb2:	0212      	lsls	r2, r2, #8
 8000fb4:	4311      	orrs	r1, r2
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000fba:	0852      	lsrs	r2, r2, #1
 8000fbc:	3a01      	subs	r2, #1
 8000fbe:	0552      	lsls	r2, r2, #21
 8000fc0:	4311      	orrs	r1, r2
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000fc6:	0852      	lsrs	r2, r2, #1
 8000fc8:	3a01      	subs	r2, #1
 8000fca:	0652      	lsls	r2, r2, #25
 8000fcc:	4311      	orrs	r1, r2
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000fd2:	06d2      	lsls	r2, r2, #27
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	4947      	ldr	r1, [pc, #284]	; (80010f4 <HAL_RCC_OscConfig+0x628>)
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fdc:	4b45      	ldr	r3, [pc, #276]	; (80010f4 <HAL_RCC_OscConfig+0x628>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a44      	ldr	r2, [pc, #272]	; (80010f4 <HAL_RCC_OscConfig+0x628>)
 8000fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fe6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000fe8:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <HAL_RCC_OscConfig+0x628>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	4a41      	ldr	r2, [pc, #260]	; (80010f4 <HAL_RCC_OscConfig+0x628>)
 8000fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ff2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fba4 	bl	8000740 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ffc:	f7ff fba0 	bl	8000740 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e06e      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800100e:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <HAL_RCC_OscConfig+0x628>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f0      	beq.n	8000ffc <HAL_RCC_OscConfig+0x530>
 800101a:	e066      	b.n	80010ea <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800101c:	4b35      	ldr	r3, [pc, #212]	; (80010f4 <HAL_RCC_OscConfig+0x628>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a34      	ldr	r2, [pc, #208]	; (80010f4 <HAL_RCC_OscConfig+0x628>)
 8001022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001026:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001028:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <HAL_RCC_OscConfig+0x628>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	4a31      	ldr	r2, [pc, #196]	; (80010f4 <HAL_RCC_OscConfig+0x628>)
 800102e:	f023 0303 	bic.w	r3, r3, #3
 8001032:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001034:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <HAL_RCC_OscConfig+0x628>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4a2e      	ldr	r2, [pc, #184]	; (80010f4 <HAL_RCC_OscConfig+0x628>)
 800103a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800103e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001042:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001044:	f7ff fb7c 	bl	8000740 <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800104c:	f7ff fb78 	bl	8000740 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e046      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <HAL_RCC_OscConfig+0x628>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f0      	bne.n	800104c <HAL_RCC_OscConfig+0x580>
 800106a:	e03e      	b.n	80010ea <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d101      	bne.n	8001078 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e039      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <HAL_RCC_OscConfig+0x628>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f003 0203 	and.w	r2, r3, #3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	429a      	cmp	r2, r3
 800108a:	d12c      	bne.n	80010e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	3b01      	subs	r3, #1
 8001098:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800109a:	429a      	cmp	r2, r3
 800109c:	d123      	bne.n	80010e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d11b      	bne.n	80010e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d113      	bne.n	80010e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	085b      	lsrs	r3, r3, #1
 80010ca:	3b01      	subs	r3, #1
 80010cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d109      	bne.n	80010e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010dc:	085b      	lsrs	r3, r3, #1
 80010de:	3b01      	subs	r3, #1
 80010e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d001      	beq.n	80010ea <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021000 	.word	0x40021000
 80010f8:	019f800c 	.word	0x019f800c

080010fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e11e      	b.n	8001352 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001114:	4b91      	ldr	r3, [pc, #580]	; (800135c <HAL_RCC_ClockConfig+0x260>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 030f 	and.w	r3, r3, #15
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d910      	bls.n	8001144 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001122:	4b8e      	ldr	r3, [pc, #568]	; (800135c <HAL_RCC_ClockConfig+0x260>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f023 020f 	bic.w	r2, r3, #15
 800112a:	498c      	ldr	r1, [pc, #560]	; (800135c <HAL_RCC_ClockConfig+0x260>)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	4313      	orrs	r3, r2
 8001130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001132:	4b8a      	ldr	r3, [pc, #552]	; (800135c <HAL_RCC_ClockConfig+0x260>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	429a      	cmp	r2, r3
 800113e:	d001      	beq.n	8001144 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e106      	b.n	8001352 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d073      	beq.n	8001238 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b03      	cmp	r3, #3
 8001156:	d129      	bne.n	80011ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001158:	4b81      	ldr	r3, [pc, #516]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e0f4      	b.n	8001352 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001168:	f000 f966 	bl	8001438 <RCC_GetSysClockFreqFromPLLSource>
 800116c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4a7c      	ldr	r2, [pc, #496]	; (8001364 <HAL_RCC_ClockConfig+0x268>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d93f      	bls.n	80011f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001176:	4b7a      	ldr	r3, [pc, #488]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800118a:	2b00      	cmp	r3, #0
 800118c:	d033      	beq.n	80011f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001192:	2b00      	cmp	r3, #0
 8001194:	d12f      	bne.n	80011f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001196:	4b72      	ldr	r3, [pc, #456]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800119e:	4a70      	ldr	r2, [pc, #448]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 80011a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e024      	b.n	80011f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d107      	bne.n	80011c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011b4:	4b6a      	ldr	r3, [pc, #424]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d109      	bne.n	80011d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e0c6      	b.n	8001352 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011c4:	4b66      	ldr	r3, [pc, #408]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e0be      	b.n	8001352 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80011d4:	f000 f8ce 	bl	8001374 <HAL_RCC_GetSysClockFreq>
 80011d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4a61      	ldr	r2, [pc, #388]	; (8001364 <HAL_RCC_ClockConfig+0x268>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d909      	bls.n	80011f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80011e2:	4b5f      	ldr	r3, [pc, #380]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011ea:	4a5d      	ldr	r2, [pc, #372]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 80011ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80011f6:	4b5a      	ldr	r3, [pc, #360]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f023 0203 	bic.w	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4957      	ldr	r1, [pc, #348]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 8001204:	4313      	orrs	r3, r2
 8001206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001208:	f7ff fa9a 	bl	8000740 <HAL_GetTick>
 800120c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120e:	e00a      	b.n	8001226 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001210:	f7ff fa96 	bl	8000740 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	f241 3288 	movw	r2, #5000	; 0x1388
 800121e:	4293      	cmp	r3, r2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e095      	b.n	8001352 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001226:	4b4e      	ldr	r3, [pc, #312]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 020c 	and.w	r2, r3, #12
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	429a      	cmp	r2, r3
 8001236:	d1eb      	bne.n	8001210 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d023      	beq.n	800128c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001250:	4b43      	ldr	r3, [pc, #268]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4a42      	ldr	r2, [pc, #264]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 8001256:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800125a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	2b00      	cmp	r3, #0
 8001266:	d007      	beq.n	8001278 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001268:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001270:	4a3b      	ldr	r2, [pc, #236]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 8001272:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001276:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001278:	4b39      	ldr	r3, [pc, #228]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	4936      	ldr	r1, [pc, #216]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 8001286:	4313      	orrs	r3, r2
 8001288:	608b      	str	r3, [r1, #8]
 800128a:	e008      	b.n	800129e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b80      	cmp	r3, #128	; 0x80
 8001290:	d105      	bne.n	800129e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001292:	4b33      	ldr	r3, [pc, #204]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	4a32      	ldr	r2, [pc, #200]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 8001298:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800129c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800129e:	4b2f      	ldr	r3, [pc, #188]	; (800135c <HAL_RCC_ClockConfig+0x260>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d21d      	bcs.n	80012e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ac:	4b2b      	ldr	r3, [pc, #172]	; (800135c <HAL_RCC_ClockConfig+0x260>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f023 020f 	bic.w	r2, r3, #15
 80012b4:	4929      	ldr	r1, [pc, #164]	; (800135c <HAL_RCC_ClockConfig+0x260>)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80012bc:	f7ff fa40 	bl	8000740 <HAL_GetTick>
 80012c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c2:	e00a      	b.n	80012da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c4:	f7ff fa3c 	bl	8000740 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e03b      	b.n	8001352 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <HAL_RCC_ClockConfig+0x260>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d1ed      	bne.n	80012c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d008      	beq.n	8001306 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	4917      	ldr	r1, [pc, #92]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 8001302:	4313      	orrs	r3, r2
 8001304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d009      	beq.n	8001326 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	490f      	ldr	r1, [pc, #60]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 8001322:	4313      	orrs	r3, r2
 8001324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001326:	f000 f825 	bl	8001374 <HAL_RCC_GetSysClockFreq>
 800132a:	4602      	mov	r2, r0
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_RCC_ClockConfig+0x264>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	091b      	lsrs	r3, r3, #4
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	490c      	ldr	r1, [pc, #48]	; (8001368 <HAL_RCC_ClockConfig+0x26c>)
 8001338:	5ccb      	ldrb	r3, [r1, r3]
 800133a:	f003 031f 	and.w	r3, r3, #31
 800133e:	fa22 f303 	lsr.w	r3, r2, r3
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <HAL_RCC_ClockConfig+0x270>)
 8001344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_RCC_ClockConfig+0x274>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f9ac 	bl	80006a8 <HAL_InitTick>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40022000 	.word	0x40022000
 8001360:	40021000 	.word	0x40021000
 8001364:	04c4b400 	.word	0x04c4b400
 8001368:	08001f98 	.word	0x08001f98
 800136c:	20000000 	.word	0x20000000
 8001370:	20000004 	.word	0x20000004

08001374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800137a:	4b2c      	ldr	r3, [pc, #176]	; (800142c <HAL_RCC_GetSysClockFreq+0xb8>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b04      	cmp	r3, #4
 8001384:	d102      	bne.n	800138c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001386:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	e047      	b.n	800141c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800138c:	4b27      	ldr	r3, [pc, #156]	; (800142c <HAL_RCC_GetSysClockFreq+0xb8>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 030c 	and.w	r3, r3, #12
 8001394:	2b08      	cmp	r3, #8
 8001396:	d102      	bne.n	800139e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001398:	4b26      	ldr	r3, [pc, #152]	; (8001434 <HAL_RCC_GetSysClockFreq+0xc0>)
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	e03e      	b.n	800141c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800139e:	4b23      	ldr	r3, [pc, #140]	; (800142c <HAL_RCC_GetSysClockFreq+0xb8>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b0c      	cmp	r3, #12
 80013a8:	d136      	bne.n	8001418 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <HAL_RCC_GetSysClockFreq+0xb8>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <HAL_RCC_GetSysClockFreq+0xb8>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	091b      	lsrs	r3, r3, #4
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3301      	adds	r3, #1
 80013c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d10c      	bne.n	80013e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80013c8:	4a1a      	ldr	r2, [pc, #104]	; (8001434 <HAL_RCC_GetSysClockFreq+0xc0>)
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d0:	4a16      	ldr	r2, [pc, #88]	; (800142c <HAL_RCC_GetSysClockFreq+0xb8>)
 80013d2:	68d2      	ldr	r2, [r2, #12]
 80013d4:	0a12      	lsrs	r2, r2, #8
 80013d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	617b      	str	r3, [r7, #20]
      break;
 80013e0:	e00c      	b.n	80013fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80013e2:	4a13      	ldr	r2, [pc, #76]	; (8001430 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	4a10      	ldr	r2, [pc, #64]	; (800142c <HAL_RCC_GetSysClockFreq+0xb8>)
 80013ec:	68d2      	ldr	r2, [r2, #12]
 80013ee:	0a12      	lsrs	r2, r2, #8
 80013f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80013f4:	fb02 f303 	mul.w	r3, r2, r3
 80013f8:	617b      	str	r3, [r7, #20]
      break;
 80013fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_RCC_GetSysClockFreq+0xb8>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0e5b      	lsrs	r3, r3, #25
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	3301      	adds	r3, #1
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	fbb2 f3f3 	udiv	r3, r2, r3
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	e001      	b.n	800141c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800141c:	693b      	ldr	r3, [r7, #16]
}
 800141e:	4618      	mov	r0, r3
 8001420:	371c      	adds	r7, #28
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
 8001430:	00f42400 	.word	0x00f42400
 8001434:	007a1200 	.word	0x007a1200

08001438 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	091b      	lsrs	r3, r3, #4
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	3301      	adds	r3, #1
 8001454:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	2b03      	cmp	r3, #3
 800145a:	d10c      	bne.n	8001476 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800145c:	4a17      	ldr	r2, [pc, #92]	; (80014bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	fbb2 f3f3 	udiv	r3, r2, r3
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001466:	68d2      	ldr	r2, [r2, #12]
 8001468:	0a12      	lsrs	r2, r2, #8
 800146a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800146e:	fb02 f303 	mul.w	r3, r2, r3
 8001472:	617b      	str	r3, [r7, #20]
    break;
 8001474:	e00c      	b.n	8001490 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	fbb2 f3f3 	udiv	r3, r2, r3
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001480:	68d2      	ldr	r2, [r2, #12]
 8001482:	0a12      	lsrs	r2, r2, #8
 8001484:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001488:	fb02 f303 	mul.w	r3, r2, r3
 800148c:	617b      	str	r3, [r7, #20]
    break;
 800148e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0e5b      	lsrs	r3, r3, #25
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	3301      	adds	r3, #1
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80014aa:	687b      	ldr	r3, [r7, #4]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	371c      	adds	r7, #28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	40021000 	.word	0x40021000
 80014bc:	007a1200 	.word	0x007a1200
 80014c0:	00f42400 	.word	0x00f42400

080014c4 <LL_GPIO_SetPinMode>:
{
 80014c4:	b480      	push	{r7}
 80014c6:	b08b      	sub	sp, #44	; 0x2c
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa93 f3a3 	rbit	r3, r3
 80014de:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80014ea:	2320      	movs	r3, #32
 80014ec:	e003      	b.n	80014f6 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	fab3 f383 	clz	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	2103      	movs	r1, #3
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	401a      	ands	r2, r3
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	fa93 f3a3 	rbit	r3, r3
 800150c:	61fb      	str	r3, [r7, #28]
  return result;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001518:	2320      	movs	r3, #32
 800151a:	e003      	b.n	8001524 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	fab3 f383 	clz	r3, r3
 8001522:	b2db      	uxtb	r3, r3
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	431a      	orrs	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	601a      	str	r2, [r3, #0]
}
 8001532:	bf00      	nop
 8001534:	372c      	adds	r7, #44	; 0x2c
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <LL_GPIO_SetPinOutputType>:
{
 800153e:	b480      	push	{r7}
 8001540:	b085      	sub	sp, #20
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	43db      	mvns	r3, r3
 8001552:	401a      	ands	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	fb01 f303 	mul.w	r3, r1, r3
 800155c:	431a      	orrs	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	605a      	str	r2, [r3, #4]
}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <LL_GPIO_SetPinSpeed>:
{
 800156e:	b480      	push	{r7}
 8001570:	b08b      	sub	sp, #44	; 0x2c
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	fa93 f3a3 	rbit	r3, r3
 8001588:	613b      	str	r3, [r7, #16]
  return result;
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001594:	2320      	movs	r3, #32
 8001596:	e003      	b.n	80015a0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	fab3 f383 	clz	r3, r3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2103      	movs	r1, #3
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	401a      	ands	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	fa93 f3a3 	rbit	r3, r3
 80015b6:	61fb      	str	r3, [r7, #28]
  return result;
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80015c2:	2320      	movs	r3, #32
 80015c4:	e003      	b.n	80015ce <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	fab3 f383 	clz	r3, r3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	431a      	orrs	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	609a      	str	r2, [r3, #8]
}
 80015dc:	bf00      	nop
 80015de:	372c      	adds	r7, #44	; 0x2c
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <LL_GPIO_SetPinPull>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	b08b      	sub	sp, #44	; 0x2c
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	613b      	str	r3, [r7, #16]
  return result;
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800160e:	2320      	movs	r3, #32
 8001610:	e003      	b.n	800161a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	fab3 f383 	clz	r3, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2103      	movs	r1, #3
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	401a      	ands	r2, r3
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162a:	6a3b      	ldr	r3, [r7, #32]
 800162c:	fa93 f3a3 	rbit	r3, r3
 8001630:	61fb      	str	r3, [r7, #28]
  return result;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800163c:	2320      	movs	r3, #32
 800163e:	e003      	b.n	8001648 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	fab3 f383 	clz	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	431a      	orrs	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	60da      	str	r2, [r3, #12]
}
 8001656:	bf00      	nop
 8001658:	372c      	adds	r7, #44	; 0x2c
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LL_GPIO_SetAFPin_0_7>:
{
 8001662:	b480      	push	{r7}
 8001664:	b08b      	sub	sp, #44	; 0x2c
 8001666:	af00      	add	r7, sp, #0
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6a1a      	ldr	r2, [r3, #32]
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	fa93 f3a3 	rbit	r3, r3
 800167c:	613b      	str	r3, [r7, #16]
  return result;
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001688:	2320      	movs	r3, #32
 800168a:	e003      	b.n	8001694 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	fab3 f383 	clz	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	210f      	movs	r1, #15
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	401a      	ands	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	fa93 f3a3 	rbit	r3, r3
 80016aa:	61fb      	str	r3, [r7, #28]
  return result;
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80016b6:	2320      	movs	r3, #32
 80016b8:	e003      	b.n	80016c2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	fab3 f383 	clz	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	431a      	orrs	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	621a      	str	r2, [r3, #32]
}
 80016d0:	bf00      	nop
 80016d2:	372c      	adds	r7, #44	; 0x2c
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_GPIO_SetAFPin_8_15>:
{
 80016dc:	b480      	push	{r7}
 80016de:	b08b      	sub	sp, #44	; 0x2c
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	fa93 f3a3 	rbit	r3, r3
 80016f8:	613b      	str	r3, [r7, #16]
  return result;
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001704:	2320      	movs	r3, #32
 8001706:	e003      	b.n	8001710 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	210f      	movs	r1, #15
 8001714:	fa01 f303 	lsl.w	r3, r1, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	401a      	ands	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001722:	6a3b      	ldr	r3, [r7, #32]
 8001724:	fa93 f3a3 	rbit	r3, r3
 8001728:	61fb      	str	r3, [r7, #28]
  return result;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001734:	2320      	movs	r3, #32
 8001736:	e003      	b.n	8001740 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	fab3 f383 	clz	r3, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	fa01 f303 	lsl.w	r3, r1, r3
 8001748:	431a      	orrs	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800174e:	bf00      	nop
 8001750:	372c      	adds	r7, #44	; 0x2c
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b088      	sub	sp, #32
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	fa93 f3a3 	rbit	r3, r3
 8001770:	60fb      	str	r3, [r7, #12]
  return result;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <LL_GPIO_Init+0x26>
    return 32U;
 800177c:	2320      	movs	r3, #32
 800177e:	e003      	b.n	8001788 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fab3 f383 	clz	r3, r3
 8001786:	b2db      	uxtb	r3, r3
 8001788:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800178a:	e048      	b.n	800181e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2101      	movs	r1, #1
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d03a      	beq.n	8001818 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d003      	beq.n	80017b2 <LL_GPIO_Init+0x58>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d10e      	bne.n	80017d0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	461a      	mov	r2, r3
 80017b8:	69b9      	ldr	r1, [r7, #24]
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff fed7 	bl	800156e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	6819      	ldr	r1, [r3, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	461a      	mov	r2, r3
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff feb7 	bl	800153e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	461a      	mov	r2, r3
 80017d6:	69b9      	ldr	r1, [r7, #24]
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff05 	bl	80015e8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d111      	bne.n	800180a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	2bff      	cmp	r3, #255	; 0xff
 80017ea:	d807      	bhi.n	80017fc <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	461a      	mov	r2, r3
 80017f2:	69b9      	ldr	r1, [r7, #24]
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff34 	bl	8001662 <LL_GPIO_SetAFPin_0_7>
 80017fa:	e006      	b.n	800180a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	461a      	mov	r2, r3
 8001802:	69b9      	ldr	r1, [r7, #24]
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff69 	bl	80016dc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	461a      	mov	r2, r3
 8001810:	69b9      	ldr	r1, [r7, #24]
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fe56 	bl	80014c4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	3301      	adds	r3, #1
 800181c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1af      	bne.n	800178c <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3720      	adds	r7, #32
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <LL_GPIO_IsOutputPinSet>:
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->ODR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	4013      	ands	r3, r2
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d101      	bne.n	8001852 <LL_GPIO_IsOutputPinSet+0x1c>
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <LL_GPIO_IsOutputPinSet+0x1e>
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_GPIO_SetOutputPin>:
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	619a      	str	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_GPIO_ResetOutputPin>:
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	4013      	ands	r3, r2
 80018ae:	041a      	lsls	r2, r3, #16
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	400b      	ands	r3, r1
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	619a      	str	r2, [r3, #24]
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <LED_init>:


// Funkcija LED_init() poskrbi, da se pravilno inicializira LED_group_handle_t struktura.
// Poskrbi tudi, da se določi začetno stanje LEDic.
void LED_init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
		// Uporabite makroje "GPIOn" in "LL_GPIO_PIN_n" iz nizko-nivojske LL knjižnice.
		// Spodaj imate primer za inicializacijo LEDice LED0.


		// LEDice na portu F
		LED_group.LEDs[LED0].pin = LL_GPIO_PIN_2;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <LED_init+0x70>)
 80018d2:	2204      	movs	r2, #4
 80018d4:	605a      	str	r2, [r3, #4]
		LED_group.LEDs[LED0].port = GPIOF;
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <LED_init+0x70>)
 80018d8:	4a19      	ldr	r2, [pc, #100]	; (8001940 <LED_init+0x74>)
 80018da:	601a      	str	r2, [r3, #0]

		LED_group.LEDs[LED1].pin = LL_GPIO_PIN_3;
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <LED_init+0x70>)
 80018de:	2208      	movs	r2, #8
 80018e0:	60da      	str	r2, [r3, #12]
		LED_group.LEDs[LED1].port = GPIOF;
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <LED_init+0x70>)
 80018e4:	4a16      	ldr	r2, [pc, #88]	; (8001940 <LED_init+0x74>)
 80018e6:	609a      	str	r2, [r3, #8]

		LED_group.LEDs[LED2].pin = LL_GPIO_PIN_4;
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <LED_init+0x70>)
 80018ea:	2210      	movs	r2, #16
 80018ec:	615a      	str	r2, [r3, #20]
		LED_group.LEDs[LED2].port = GPIOF;
 80018ee:	4b13      	ldr	r3, [pc, #76]	; (800193c <LED_init+0x70>)
 80018f0:	4a13      	ldr	r2, [pc, #76]	; (8001940 <LED_init+0x74>)
 80018f2:	611a      	str	r2, [r3, #16]

		LED_group.LEDs[LED3].pin = LL_GPIO_PIN_5;
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <LED_init+0x70>)
 80018f6:	2220      	movs	r2, #32
 80018f8:	61da      	str	r2, [r3, #28]
		LED_group.LEDs[LED3].port = GPIOF;
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <LED_init+0x70>)
 80018fc:	4a10      	ldr	r2, [pc, #64]	; (8001940 <LED_init+0x74>)
 80018fe:	619a      	str	r2, [r3, #24]
	//-----------------------------------------------------------
		// LEDice na portu C
		LED_group.LEDs[LED4].pin = LL_GPIO_PIN_0;
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <LED_init+0x70>)
 8001902:	2201      	movs	r2, #1
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
		LED_group.LEDs[LED4].port = GPIOC;
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <LED_init+0x70>)
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <LED_init+0x78>)
 800190a:	621a      	str	r2, [r3, #32]

		LED_group.LEDs[LED5].pin = LL_GPIO_PIN_1;
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <LED_init+0x70>)
 800190e:	2202      	movs	r2, #2
 8001910:	62da      	str	r2, [r3, #44]	; 0x2c
		LED_group.LEDs[LED5].port = GPIOC;
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <LED_init+0x70>)
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <LED_init+0x78>)
 8001916:	629a      	str	r2, [r3, #40]	; 0x28

		LED_group.LEDs[LED6].pin = LL_GPIO_PIN_2;
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <LED_init+0x70>)
 800191a:	2204      	movs	r2, #4
 800191c:	635a      	str	r2, [r3, #52]	; 0x34
		LED_group.LEDs[LED6].port = GPIOC;
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <LED_init+0x70>)
 8001920:	4a08      	ldr	r2, [pc, #32]	; (8001944 <LED_init+0x78>)
 8001922:	631a      	str	r2, [r3, #48]	; 0x30

		LED_group.LEDs[LED7].pin = LL_GPIO_PIN_3;
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <LED_init+0x70>)
 8001926:	2208      	movs	r2, #8
 8001928:	63da      	str	r2, [r3, #60]	; 0x3c
		LED_group.LEDs[LED7].port = GPIOC;
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <LED_init+0x70>)
 800192c:	4a05      	ldr	r2, [pc, #20]	; (8001944 <LED_init+0x78>)
 800192e:	639a      	str	r2, [r3, #56]	; 0x38

	// 2. Nastavite začetno stanje LEDic (t.i. privzeto stanje (angl. default state)).

		// Na začetku po inicializaciji želimo imeti vse LEDice ugasnjene.
		// Uporabi se lahko kar LEDs_write() funkcijo.
		LEDs_write(0x00);
 8001930:	2000      	movs	r0, #0
 8001932:	f000 f8ad 	bl	8001a90 <LEDs_write>

}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000002c 	.word	0x2000002c
 8001940:	48001400 	.word	0x48001400
 8001944:	48000800 	.word	0x48000800

08001948 <LED_on>:

// Funkcija LED_on() prižge tisto LEDico v skupini, ki jo specificira
// vrednost "LEDn". Vrednost "LEDn" pa je lahko eden od elementov iz
// seznama naštevnega tipa LEDs_enum_t.
void LED_on(LEDs_enum_t LEDn)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
	// Za prižig LEDice uporabimo sledečo nizko-nivojsko LL funkcijo:
	//
	//		void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
	//
	LL_GPIO_SetOutputPin(LED_group.LEDs[LEDn].port, LED_group.LEDs[LEDn].pin );
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <LED_on+0x2c>)
 8001956:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	4905      	ldr	r1, [pc, #20]	; (8001974 <LED_on+0x2c>)
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	440b      	add	r3, r1
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4619      	mov	r1, r3
 8001966:	4610      	mov	r0, r2
 8001968:	f7ff ff7a 	bl	8001860 <LL_GPIO_SetOutputPin>
	// zamenjate z npr. LED3 iz seznama naštevnega tipa; in tako boste s klicem zgornje
	// funkcijo postavili na visoko stanje prav tisti digitalni izhod, ki pripada
	// portu in pinu LEDice LED3.


}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2000002c 	.word	0x2000002c

08001978 <LED_off>:

// Funkcija LED_on() ugasne tisto LEDico v skupini, ki jo specificira
// vrednost "LEDn". Vrednost "LEDn" pa je lahko eden od elementov iz
// seznama naštevnega tipa LEDs_enum_t.
void LED_off(LEDs_enum_t LEDn)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin( LED_group.LEDs[LEDn].port, LED_group.LEDs[LEDn].pin );
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <LED_off+0x2c>)
 8001986:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	4905      	ldr	r1, [pc, #20]	; (80019a4 <LED_off+0x2c>)
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	440b      	add	r3, r1
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4619      	mov	r1, r3
 8001996:	4610      	mov	r0, r2
 8001998:	f7ff ff70 	bl	800187c <LL_GPIO_ResetOutputPin>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	2000002c 	.word	0x2000002c

080019a8 <LED_toggle>:

// Funkcija LED_toggle() invertira stanje tiste LEDico v skupini, ki jo specificira
// vrednost "LEDn". Vrednost "LEDn" pa je lahko eden od elementov iz
// seznama naštevnega tipa LEDs_enum_t.
void LED_toggle( LEDs_enum_t LEDn )
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_TogglePin( LED_group.LEDs[LEDn].port, LED_group.LEDs[LEDn].pin );
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <LED_toggle+0x2c>)
 80019b6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	4905      	ldr	r1, [pc, #20]	; (80019d4 <LED_toggle+0x2c>)
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	440b      	add	r3, r1
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	4619      	mov	r1, r3
 80019c6:	4610      	mov	r0, r2
 80019c8:	f7ff ff66 	bl	8001898 <LL_GPIO_TogglePin>
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	2000002c 	.word	0x2000002c

080019d8 <LEDs_on>:
// S funkcijo "LEDs_on()" prižgemo le tiste LEDice v LED skupini, ki jih določa vhodni argument
// bitna maska "LED_bitmask": če je postavljen i-ti bit maske "LED_bitmask", potem prižgemo i-to
// LEDico v skupini; sicer ne spreminjamo stanja LEDice. Pri tem se upošteva enak vrstni red LEDic,
// kot je bil definiran v naštevnem tipu LEDs_enum_t.
void LEDs_on(uint8_t LED_bitmask)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]

	// Pomožna bitna maska, s katero bomo "brali" vrednosti posameznih bitov
	// vhodnega argumenta "LED_bitmask" od LSB bita proti MSB bitu.
	uint8_t bitmask = 0x01;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]

	// S "for" zanko se sprehodimo preko vseh LEDic v sistemu.
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	73bb      	strb	r3, [r7, #14]
 80019ea:	e018      	b.n	8001a1e <LEDs_on+0x46>
	{
		// S pomočjo pomožne maske "bitmask" preberemo stanje i-tega bita v vhodnem argumentu "LED_bitmask".
		if ( LED_bitmask & bitmask )
 80019ec:	79fa      	ldrb	r2, [r7, #7]
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	4013      	ands	r3, r2
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00c      	beq.n	8001a12 <LEDs_on+0x3a>
		{
			// In če je i-ti bit v vhodnem argumentu "LED_bitmask" postavljen, prižgemo i-to LEDico.
			LL_GPIO_SetOutputPin( LED_group.LEDs[i].port, LED_group.LEDs[i].pin );
 80019f8:	7bbb      	ldrb	r3, [r7, #14]
 80019fa:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <LEDs_on+0x58>)
 80019fc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001a00:	7bbb      	ldrb	r3, [r7, #14]
 8001a02:	490b      	ldr	r1, [pc, #44]	; (8001a30 <LEDs_on+0x58>)
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	440b      	add	r3, r1
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	f7ff ff27 	bl	8001860 <LL_GPIO_SetOutputPin>
		}

		// In nato si pripravimo novo pomožno bitno masko za branje naslednjega bita v vhodnem argumentu.
		bitmask <<= 1;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8001a18:	7bbb      	ldrb	r3, [r7, #14]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	73bb      	strb	r3, [r7, #14]
 8001a1e:	7bbb      	ldrb	r3, [r7, #14]
 8001a20:	2b07      	cmp	r3, #7
 8001a22:	d9e3      	bls.n	80019ec <LEDs_on+0x14>
	}
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	2000002c 	.word	0x2000002c

08001a34 <LEDs_off>:
// S funkcijo "LEDs_off()" ugašamo le tiste LEDice v LED skupini, ki jih določa vhodni argument
// bitna maska "LED_bitmask": če je postavljen i-ti bit maske "LED_bitmask", potem ugasnemo i-to
// LEDico v skupini; sicer ne spreminjamo stanja LEDice. Pri tem se upošteva enak vrstni red LEDic,
// kot je bil definiran v naštevnem tipu LEDs_enum_t.
void LEDs_off(uint8_t LED_bitmask)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
	uint8_t bitmask = 0x01;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	73bb      	strb	r3, [r7, #14]
 8001a46:	e018      	b.n	8001a7a <LEDs_off+0x46>
		{
			// S pomočjo pomožne maske "bitmask" preberemo stanje i-tega bita v vhodnem argumentu "LED_bitmask".
			if ( LED_bitmask & bitmask )
 8001a48:	79fa      	ldrb	r2, [r7, #7]
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00c      	beq.n	8001a6e <LEDs_off+0x3a>
			{
				// In če je i-ti bit v vhodnem argumentu "LED_bitmask" postavljen, prižgemo i-to LEDico.
				LL_GPIO_ResetOutputPin( LED_group.LEDs[i].port, LED_group.LEDs[i].pin );
 8001a54:	7bbb      	ldrb	r3, [r7, #14]
 8001a56:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <LEDs_off+0x58>)
 8001a58:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001a5c:	7bbb      	ldrb	r3, [r7, #14]
 8001a5e:	490b      	ldr	r1, [pc, #44]	; (8001a8c <LEDs_off+0x58>)
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4619      	mov	r1, r3
 8001a68:	4610      	mov	r0, r2
 8001a6a:	f7ff ff07 	bl	800187c <LL_GPIO_ResetOutputPin>
			}

			// In nato si pripravimo novo pomožno bitno masko za branje naslednjega bita v vhodnem argumentu.
			bitmask <<= 1;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8001a74:	7bbb      	ldrb	r3, [r7, #14]
 8001a76:	3301      	adds	r3, #1
 8001a78:	73bb      	strb	r3, [r7, #14]
 8001a7a:	7bbb      	ldrb	r3, [r7, #14]
 8001a7c:	2b07      	cmp	r3, #7
 8001a7e:	d9e3      	bls.n	8001a48 <LEDs_off+0x14>




	// DOPOLNI. Reši se na enak način kot LEDs_on().
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000002c 	.word	0x2000002c

08001a90 <LEDs_write>:
// V primeru funkcije LEDs_write() pa vrednost vhodnega argumenta "value"
// neposredno določa, katere LEDice v LED skupini bodo prižgane ter katere
// ugasnjene po ideji: če postavljen i-ti bit vrednosti "value", potem naj
// bo prižgana i-ta LEDica; sicer naj bo ugasnjena.
void LEDs_write(uint8_t value)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
	uint8_t bitmask = 0x01;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	73fb      	strb	r3, [r7, #15]

	// S "for" zanko se sprehodimo preko vseh LEDic v sistemu.
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73bb      	strb	r3, [r7, #14]
 8001aa2:	e014      	b.n	8001ace <LEDs_write+0x3e>
	{
		// Preveri vrednost i-tega bita vhodnega argumenta "value".
		if (value & bitmask)
 8001aa4:	79fa      	ldrb	r2, [r7, #7]
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d004      	beq.n	8001aba <LEDs_write+0x2a>
		{
			// Če je i-ti bit enak 1, potem naj se prižge i-ta LEDica, pri čemer se pa
			// upošteva vrstni red LEDic, kot je bil definiran v naštevnem tipu LEDs_enum_t;

			LED_on(i);
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff48 	bl	8001948 <LED_on>
 8001ab8:	e003      	b.n	8001ac2 <LEDs_write+0x32>
		}
		else
		{
			// sicer pa naj se i-ta LEDica ugasne.

			LED_off(i);
 8001aba:	7bbb      	ldrb	r3, [r7, #14]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5b 	bl	8001978 <LED_off>

		}


		// In nato si pripravimo novo pomožno bitno masko za branje naslednjega bita v vhodnem argumentu.
		bitmask <<= 1;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8001ac8:	7bbb      	ldrb	r3, [r7, #14]
 8001aca:	3301      	adds	r3, #1
 8001acc:	73bb      	strb	r3, [r7, #14]
 8001ace:	7bbb      	ldrb	r3, [r7, #14]
 8001ad0:	2b07      	cmp	r3, #7
 8001ad2:	d9e7      	bls.n	8001aa4 <LEDs_write+0x14>
	}
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <LEDs_read>:


// Funkcija LEDs_read() vrne 8-bitno vrednost, kjer i-ti bit odraža stanje
// i-te LEDice v LED skupini.
uint8_t LEDs_read(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	71fb      	strb	r3, [r7, #7]
	uint8_t bitmask = 0x01;
 8001aea:	2301      	movs	r3, #1
 8001aec:	71bb      	strb	r3, [r7, #6]

	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	717b      	strb	r3, [r7, #5]
 8001af2:	e019      	b.n	8001b28 <LEDs_read+0x48>
	{
		if ( LL_GPIO_IsOutputPinSet( LED_group.LEDs[i].port, LED_group.LEDs[i].pin ) )
 8001af4:	797b      	ldrb	r3, [r7, #5]
 8001af6:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <LEDs_read+0x58>)
 8001af8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001afc:	797b      	ldrb	r3, [r7, #5]
 8001afe:	490e      	ldr	r1, [pc, #56]	; (8001b38 <LEDs_read+0x58>)
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	440b      	add	r3, r1
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4619      	mov	r1, r3
 8001b08:	4610      	mov	r0, r2
 8001b0a:	f7ff fe94 	bl	8001836 <LL_GPIO_IsOutputPinSet>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <LEDs_read+0x3c>
			value |= bitmask;
 8001b14:	79fa      	ldrb	r2, [r7, #7]
 8001b16:	79bb      	ldrb	r3, [r7, #6]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	71fb      	strb	r3, [r7, #7]

		bitmask <<= 1;
 8001b1c:	79bb      	ldrb	r3, [r7, #6]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8001b22:	797b      	ldrb	r3, [r7, #5]
 8001b24:	3301      	adds	r3, #1
 8001b26:	717b      	strb	r3, [r7, #5]
 8001b28:	797b      	ldrb	r3, [r7, #5]
 8001b2a:	2b07      	cmp	r3, #7
 8001b2c:	d9e2      	bls.n	8001af4 <LEDs_read+0x14>
	}

	return value;
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	2000002c 	.word	0x2000002c

08001b3c <BUF_init>:


// -------------- Public function implementations --------------

void BUF_init(buf_handle_t *buf_handle, uint8_t *buffer_ptr, uint32_t buf_length)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
	// Initialize the buffer handle according to given parameters.
	buf_handle->buffer = buffer_ptr;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	601a      	str	r2, [r3, #0]
	buf_handle->length = buf_length;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	605a      	str	r2, [r3, #4]


	// And flush the buffer.
	BUF_flush(buf_handle);
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 f804 	bl	8001b62 <BUF_flush>
}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <BUF_flush>:


buf_rtrn_codes_t BUF_flush(buf_handle_t *buf_handle)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
	buf_handle->front = 0;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]
	buf_handle->rear = 0;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
	buf_handle->data_size = 0;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
	buf_handle->free_size = buf_handle->length;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	615a      	str	r2, [r3, #20]

	return BUFFER_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <BUF_store_byte>:



// Store one byte of data.
buf_rtrn_codes_t BUF_store_byte(buf_handle_t *buf_handle, uint8_t data)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	70fb      	strb	r3, [r7, #3]
	// check if buffer already full
	if (buf_handle->data_size >= buf_handle->length)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d301      	bcc.n	8001bae <BUF_store_byte+0x1c>
	{
		return BUFFER_FULL;	//-> if so, return error
 8001baa:	2301      	movs	r3, #1
 8001bac:	e02a      	b.n	8001c04 <BUF_store_byte+0x72>
	}
	else // Ta else je fucking useless!!
	{
		// check special case: buffer empty
		if (buf_handle->data_size == 0)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <BUF_store_byte+0x32>
		{
			buf_handle->front = 0;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	60da      	str	r2, [r3, #12]
			buf_handle->rear = 0;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	e00d      	b.n	8001be0 <BUF_store_byte+0x4e>
		}
		else
		{
			// increase rear pointer and apply modular arithmetics
			buf_handle->rear++;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	609a      	str	r2, [r3, #8]

			if (buf_handle->rear >= buf_handle->length)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d302      	bcc.n	8001be0 <BUF_store_byte+0x4e>
			{
				buf_handle->rear = 0;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
			}
		}


		// by now rear pointer is ready for new data -> store data
		buf_handle->buffer[buf_handle->rear] = data;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4413      	add	r3, r2
 8001bea:	78fa      	ldrb	r2, [r7, #3]
 8001bec:	701a      	strb	r2, [r3, #0]

		// update data size and free size
		buf_handle->data_size++;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	611a      	str	r2, [r3, #16]
		buf_handle->free_size--;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	1e5a      	subs	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	615a      	str	r2, [r3, #20]

		return BUFFER_OK;
 8001c02:	2300      	movs	r3, #0
	}

}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <BUF_get_byte>:



// Read one byte of data and store it to the given location.
buf_rtrn_codes_t BUF_get_byte(buf_handle_t *buf_handle, uint8_t *data)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	// first check if buffer empty
	if (buf_handle->data_size == 0)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <BUF_get_byte+0x16>
	{
		return BUFFER_EMPTY;	// return error code and exit this function
 8001c22:	2302      	movs	r3, #2
 8001c24:	e020      	b.n	8001c68 <BUF_get_byte+0x58>
	}

	// else read and return data from the buffer "front"
	*data = buf_handle->buffer[buf_handle->front];	//Get data from the queue "front"
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	781a      	ldrb	r2, [r3, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	701a      	strb	r2, [r3, #0]

	// update data size and free size
	buf_handle->data_size--;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	1e5a      	subs	r2, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	611a      	str	r2, [r3, #16]
	buf_handle->free_size++;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	615a      	str	r2, [r3, #20]


	// update the "front" value NOT using the modulo arithmetics but
	// using if-then instead because it is faster on uC
	buf_handle->front++;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	60da      	str	r2, [r3, #12]

	if (buf_handle->front >= buf_handle->length)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d302      	bcc.n	8001c66 <BUF_get_byte+0x56>
	{
		buf_handle->front = 0;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
	}

	return BUFFER_OK;	// return BUFFER_OK error code
 8001c66:	2300      	movs	r3, #0

}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <LL_GPIO_IsInputPinSet>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691a      	ldr	r2, [r3, #16]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	4013      	ands	r3, r2
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d101      	bne.n	8001c90 <LL_GPIO_IsInputPinSet+0x1c>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <LL_GPIO_IsInputPinSet+0x1e>
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <KBD_init>:

// Funkcija KBD_init() poskrbi, da se pravilno inicializira keyboard_handle_t strukturna spremenljivka.
// Poskrbi tudi za inicializacijo medpomnilnika tipkovnice.
//
void KBD_init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
		// To storite tako, da pravilno inicializirate "handle" strukture posameznih tipk.
		// Uporabite makroje "GPIOn" in "LL_GPIO_PIN_n" iz nizko-nivojske LL knjižnice.


		// buttons on port C
		keyboard.buttons[ BTN_ESC ].pin = LL_GPIO_PIN_14 ;
 8001ca6:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <KBD_init+0xa0>)
 8001ca8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cac:	605a      	str	r2, [r3, #4]
		keyboard.buttons[ BTN_ESC ].port = GPIOC;
 8001cae:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <KBD_init+0xa0>)
 8001cb0:	4a24      	ldr	r2, [pc, #144]	; (8001d44 <KBD_init+0xa4>)
 8001cb2:	601a      	str	r2, [r3, #0]

		keyboard.buttons[ BTN_OK ].pin = LL_GPIO_PIN_15 ;
 8001cb4:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <KBD_init+0xa0>)
 8001cb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cba:	611a      	str	r2, [r3, #16]
		keyboard.buttons[ BTN_OK ].port = GPIOC;
 8001cbc:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <KBD_init+0xa0>)
 8001cbe:	4a21      	ldr	r2, [pc, #132]	; (8001d44 <KBD_init+0xa4>)
 8001cc0:	60da      	str	r2, [r3, #12]

			// DOPOLNI done


		// buttons on port G
		keyboard.buttons[ BTN_RIGHT ].pin = LL_GPIO_PIN_8 ;
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <KBD_init+0xa0>)
 8001cc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cc8:	61da      	str	r2, [r3, #28]
		keyboard.buttons[ BTN_RIGHT ].port = GPIOG;
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <KBD_init+0xa0>)
 8001ccc:	4a1e      	ldr	r2, [pc, #120]	; (8001d48 <KBD_init+0xa8>)
 8001cce:	619a      	str	r2, [r3, #24]

		keyboard.buttons[ BTN_LEFT ].pin = LL_GPIO_PIN_6 ;
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <KBD_init+0xa0>)
 8001cd2:	2240      	movs	r2, #64	; 0x40
 8001cd4:	629a      	str	r2, [r3, #40]	; 0x28
		keyboard.buttons[ BTN_LEFT ].port = GPIOG;
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <KBD_init+0xa0>)
 8001cd8:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <KBD_init+0xa8>)
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24

		keyboard.buttons[ BTN_DOWN ].pin = LL_GPIO_PIN_1 ;
 8001cdc:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <KBD_init+0xa0>)
 8001cde:	2202      	movs	r2, #2
 8001ce0:	635a      	str	r2, [r3, #52]	; 0x34
		keyboard.buttons[ BTN_DOWN ].port = GPIOG;
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <KBD_init+0xa0>)
 8001ce4:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <KBD_init+0xa8>)
 8001ce6:	631a      	str	r2, [r3, #48]	; 0x30

		keyboard.buttons[ BTN_UP ].pin = LL_GPIO_PIN_0 ;
 8001ce8:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <KBD_init+0xa0>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40
		keyboard.buttons[ BTN_UP ].port = GPIOG;
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <KBD_init+0xa0>)
 8001cf0:	4a15      	ldr	r2, [pc, #84]	; (8001d48 <KBD_init+0xa8>)
 8001cf2:	63da      	str	r2, [r3, #60]	; 0x3c

	// 2. Inicializirajte začetne vrednosti "handle" strukture za posamezne tipke v tipkovnici na sistemskem nivoju


		// Sprehodimo se preko vseh "handle" struktur za delo s posameznimi tipkami.
		for(int i=0; i < NUM_OF_BTN; i++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	e016      	b.n	8001d28 <KBD_init+0x88>
			// Ne pozabite, da v "handle" strukturah za posamezne tipke hranimo tudi vrednost prejšnjega
			// in trenutnega stanja tipk! In te vrednosti je potrebno na začetku nastaviti.
			// Smiselno jih je nastaviti na tako vrednost, kot da so tipke na začetku v sproščenem,
			// nestisnjenem stanju. In tu si lahko pomagate s pomožnim naštevnim tipom button_sig_value_t.

			keyboard.buttons[i].state_old = BTN_SIG_VALUE_RELEASED;
 8001cfa:	4911      	ldr	r1, [pc, #68]	; (8001d40 <KBD_init+0xa0>)
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	3308      	adds	r3, #8
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	701a      	strb	r2, [r3, #0]
			keyboard.buttons[i].state_new = BTN_SIG_VALUE_RELEASED;
 8001d0e:	490c      	ldr	r1, [pc, #48]	; (8001d40 <KBD_init+0xa0>)
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3309      	adds	r3, #9
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
		for(int i=0; i < NUM_OF_BTN; i++)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3301      	adds	r3, #1
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b05      	cmp	r3, #5
 8001d2c:	dde5      	ble.n	8001cfa <KBD_init+0x5a>

	// 3. Inicializiramo še medpomnilnik tipkovnice.

		// Uporabimo funkcijo BUF_init(), ki določi, katera tabela se bo uporabljala kot
		// ciklični medpomnilnik ter kako dolg bo ta medpomnilnik.
		BUF_init( &kbd_buf_handle, kbd_buffer, KBD_BUF_LEN);
 8001d2e:	2220      	movs	r2, #32
 8001d30:	4906      	ldr	r1, [pc, #24]	; (8001d4c <KBD_init+0xac>)
 8001d32:	4807      	ldr	r0, [pc, #28]	; (8001d50 <KBD_init+0xb0>)
 8001d34:	f7ff ff02 	bl	8001b3c <BUF_init>

}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2000006c 	.word	0x2000006c
 8001d44:	48000800 	.word	0x48000800
 8001d48:	48001800 	.word	0x48001800
 8001d4c:	200000b4 	.word	0x200000b4
 8001d50:	200000d4 	.word	0x200000d4

08001d54 <KBD_scan>:
// Funkcija KBD_scan() prebere trenutno stanje tipk v tipkovnici; ugotovi,
// katere tipke so bile pritisnjene ter shrani to informacijo v medpomnilnik
// tipkovnice, da se bo kasneje lahko sistem odzval na pritisk teh tipk.
//
void KBD_scan(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
	// in ugotovi, ali je bila pritisnjena. Če je bila pritisnjena,
	// shrani to informacijo v medpomnilnik tipkovnice, da se bo
	// kasneje lahko sistem odzval na pritisk te tipke.

	// Sprehodimo se preko vseh "handle" struktur za delo s posameznimi tipkami.
	for(int i=0; i < NUM_OF_BTN; i++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	e051      	b.n	8001e04 <KBD_scan+0xb0>
	{
		// Znotraj zanke delamo trenutno z i-to tipko. Spremenljivka "i" je pomožni števec zanke.

		// Trenutno, novo stanje tipke postane sedaj staro stanje tipke
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new ;
 8001d60:	492c      	ldr	r1, [pc, #176]	; (8001e14 <KBD_scan+0xc0>)
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	3309      	adds	r3, #9
 8001d70:	7818      	ldrb	r0, [r3, #0]
 8001d72:	4928      	ldr	r1, [pc, #160]	; (8001e14 <KBD_scan+0xc0>)
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	3308      	adds	r3, #8
 8001d82:	4602      	mov	r2, r0
 8001d84:	701a      	strb	r2, [r3, #0]

		// in novo, trenutno stanje tipke se prebere iz ustreznega digitalne GPIO vhoda.
		//DOPOLNI half done
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port, keyboard.buttons[i].pin);
 8001d86:	4923      	ldr	r1, [pc, #140]	; (8001e14 <KBD_scan+0xc0>)
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	491f      	ldr	r1, [pc, #124]	; (8001e14 <KBD_scan+0xc0>)
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	3304      	adds	r3, #4
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	f7ff ff63 	bl	8001c74 <LL_GPIO_IsInputPinSet>
 8001dae:	4603      	mov	r3, r0
 8001db0:	b2d8      	uxtb	r0, r3
 8001db2:	4918      	ldr	r1, [pc, #96]	; (8001e14 <KBD_scan+0xc0>)
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3309      	adds	r3, #9
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	701a      	strb	r2, [r3, #0]


		// Sedaj je potrebno preveriti, ali se je za i-to tipko zgodil pritisk. Pri tem si pomagajte s starim in
		// trenutnim stanjem tipke. Pomaga vam lahko tudi pomožni naštevni tip button_sig_value_t.
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED)
 8001dc6:	4913      	ldr	r1, [pc, #76]	; (8001e14 <KBD_scan+0xc0>)
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	3309      	adds	r3, #9
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d110      	bne.n	8001dfe <KBD_scan+0xaa>
 8001ddc:	490d      	ldr	r1, [pc, #52]	; (8001e14 <KBD_scan+0xc0>)
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	3308      	adds	r3, #8
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d105      	bne.n	8001dfe <KBD_scan+0xaa>
		{

			// In če zaznamo pritisk i-te tipke, shranimo to informacijo v medpomnilnik tipkovnice.
			// Shranimo seveda kar vrednost elementa naštevnega tipa, ki pripada obravnavani i-ti tipki.
			// In to je seveda kar vrednost pomožne spremenljivke "i". Uporabimo funkcijo BUF_store_byte().
			BUF_store_byte( &kbd_buf_handle, i);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	4619      	mov	r1, r3
 8001df8:	4807      	ldr	r0, [pc, #28]	; (8001e18 <KBD_scan+0xc4>)
 8001dfa:	f7ff feca 	bl	8001b92 <BUF_store_byte>
	for(int i=0; i < NUM_OF_BTN; i++)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3301      	adds	r3, #1
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b05      	cmp	r3, #5
 8001e08:	ddaa      	ble.n	8001d60 <KBD_scan+0xc>

		}

	}

}
 8001e0a:	bf00      	nop
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	2000006c 	.word	0x2000006c
 8001e18:	200000d4 	.word	0x200000d4

08001e1c <KBD_get_pressed_key>:
// Funkcija KBD_get_pressed_key() iz medpomnilnika tipkovnice vrne
// informacijo o tem, katera je naslednja pritisnjena tipka, na katero
// se še nismo odzvali (tj. je nismo obdelali, "sprocesirali").
//
buttons_enum_t KBD_get_pressed_key(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
	// V nasprotnem primeru sklepamo, da je bilo branje elementa iz
	// medpomnilnika neuspešno, ker je medpomnilnik prazen.


	// Torej poskusimo prebrati nov element iz medpomnilnika in ga shraniti v spremenljivko "pressed_button".
	if ( BUF_get_byte( &kbd_buf_handle, &pressed_button ) == BUFFER_OK )
 8001e22:	1dfb      	adds	r3, r7, #7
 8001e24:	4619      	mov	r1, r3
 8001e26:	4806      	ldr	r0, [pc, #24]	; (8001e40 <KBD_get_pressed_key+0x24>)
 8001e28:	f7ff fef2 	bl	8001c10 <BUF_get_byte>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <KBD_get_pressed_key+0x1a>
	{
		// Če je bilo branje elementa iz medpomnilnika v spremenljivko "pressed_button"
		// uspešno (tj. vrnjen BUFFER_OK), potem je vrednost, ki jo mora funkcija
		// KBD_get_pressed_key() vrniti kar enaka vrednosti pomožne spremenljivke "pressed_button".

		return pressed_button;
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	e000      	b.n	8001e38 <KBD_get_pressed_key+0x1c>
		// Če pa je bilo branje elementa iz medpomnilnika v spremenljivko "pressed_button"
		// neuspešno (tj. ni bil vrnjen BUFFER_OK), potem pa sklepamo, da je medpomnilnik
		// prazen in da pravzaprav ni bila pritisnjena nobena nova tipka.
		// Funkcija KBD_get_pressed_key() mora vrniti kodo "BTN_NONE".

		return BTN_NONE;
 8001e36:	2307      	movs	r3, #7
	}

}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200000d4 	.word	0x200000d4

08001e44 <KBD_get_button_state>:
// Funkcija KBD_get_button_state() vrne TRENUTNO stanje tipke, ki jo specificiramo
// z vhodnim argumentom funkcije "button". Vhodni argument je seveda element naštevnega
// tipa "buttons_enum_t".
//
button_sig_value_t KBD_get_button_state(buttons_enum_t button)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]

	// Torej trenutno stanje tipke vam je že na voljo in je shranjeno v "state_new"
	// parametru ustrezne "handle" strukture tipke.


	return keyboard.buttons[button].state_new;
 8001e4e:	79fa      	ldrb	r2, [r7, #7]
 8001e50:	4906      	ldr	r1, [pc, #24]	; (8001e6c <KBD_get_button_state+0x28>)
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	3309      	adds	r3, #9
 8001e5e:	781b      	ldrb	r3, [r3, #0]

}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	2000006c 	.word	0x2000006c

08001e70 <KBD_demo>:




void KBD_demo(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
	buttons_enum_t pressed_key;


	// scan keyboard buttons
		// DOPOLNI done
	KBD_scan();
 8001e76:	f7ff ff6d 	bl	8001d54 <KBD_scan>

	// get next pressed button
		// DOPOLNI done

	pressed_key = KBD_get_pressed_key();
 8001e7a:	f7ff ffcf 	bl	8001e1c <KBD_get_pressed_key>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]



	// read all pressed keys from the keyboard buffer
	while (pressed_key != BTN_NONE)
 8001e82:	e02e      	b.n	8001ee2 <KBD_demo+0x72>
	{
		// toggle LEDs according to pressed keys
		switch (pressed_key)
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	2b05      	cmp	r3, #5
 8001e88:	d826      	bhi.n	8001ed8 <KBD_demo+0x68>
 8001e8a:	a201      	add	r2, pc, #4	; (adr r2, 8001e90 <KBD_demo+0x20>)
 8001e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e90:	08001ea9 	.word	0x08001ea9
 8001e94:	08001eb1 	.word	0x08001eb1
 8001e98:	08001eb9 	.word	0x08001eb9
 8001e9c:	08001ec1 	.word	0x08001ec1
 8001ea0:	08001ec9 	.word	0x08001ec9
 8001ea4:	08001ed1 	.word	0x08001ed1
		{

		// DOPOLNI
		case BTN_ESC:
			LED_toggle(BTN_ESC);
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff fd7d 	bl	80019a8 <LED_toggle>
			break;
 8001eae:	e014      	b.n	8001eda <KBD_demo+0x6a>

		case BTN_OK:
			LED_toggle(BTN_OK);
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f7ff fd79 	bl	80019a8 <LED_toggle>
			break;
 8001eb6:	e010      	b.n	8001eda <KBD_demo+0x6a>

		case BTN_RIGHT:
			LED_toggle(BTN_RIGHT);
 8001eb8:	2002      	movs	r0, #2
 8001eba:	f7ff fd75 	bl	80019a8 <LED_toggle>
			break;
 8001ebe:	e00c      	b.n	8001eda <KBD_demo+0x6a>

		case BTN_LEFT:
			LED_toggle(BTN_LEFT);
 8001ec0:	2003      	movs	r0, #3
 8001ec2:	f7ff fd71 	bl	80019a8 <LED_toggle>
			break;
 8001ec6:	e008      	b.n	8001eda <KBD_demo+0x6a>

		case BTN_DOWN:
			LED_toggle(BTN_DOWN);
 8001ec8:	2004      	movs	r0, #4
 8001eca:	f7ff fd6d 	bl	80019a8 <LED_toggle>
			break;
 8001ece:	e004      	b.n	8001eda <KBD_demo+0x6a>

		case BTN_UP:
			LED_toggle(BTN_UP);
 8001ed0:	2005      	movs	r0, #5
 8001ed2:	f7ff fd69 	bl	80019a8 <LED_toggle>
			break;
 8001ed6:	e000      	b.n	8001eda <KBD_demo+0x6a>

		  default:
			  break;
 8001ed8:	bf00      	nop
		}

		// get next pressed button
		pressed_key = KBD_get_pressed_key();
 8001eda:	f7ff ff9f 	bl	8001e1c <KBD_get_pressed_key>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
	while (pressed_key != BTN_NONE)
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	2b07      	cmp	r3, #7
 8001ee6:	d1cd      	bne.n	8001e84 <KBD_demo+0x14>
	}

	// test KBD_get_button_state() function
		// DOPOLNI done

	if(KBD_get_button_state(BTN_OK) == BTN_SIG_VALUE_PRESSED && KBD_get_button_state(BTN_ESC) == BTN_SIG_VALUE_PRESSED)
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f7ff ffab 	bl	8001e44 <KBD_get_button_state>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d111      	bne.n	8001f18 <KBD_demo+0xa8>
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff ffa5 	bl	8001e44 <KBD_get_button_state>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10b      	bne.n	8001f18 <KBD_demo+0xa8>
	{
		LEDs_write(0xFF);
 8001f00:	20ff      	movs	r0, #255	; 0xff
 8001f02:	f7ff fdc5 	bl	8001a90 <LEDs_write>
		HAL_Delay(100);
 8001f06:	2064      	movs	r0, #100	; 0x64
 8001f08:	f7fe fc26 	bl	8000758 <HAL_Delay>
		LEDs_write(0);
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff fdbf 	bl	8001a90 <LEDs_write>
		HAL_Delay(100);
 8001f12:	2064      	movs	r0, #100	; 0x64
 8001f14:	f7fe fc20 	bl	8000758 <HAL_Delay>
	}


	// scan keyboard period
	HAL_Delay(10);
 8001f18:	200a      	movs	r0, #10
 8001f1a:	f7fe fc1d 	bl	8000758 <HAL_Delay>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop

08001f28 <__libc_init_array>:
 8001f28:	b570      	push	{r4, r5, r6, lr}
 8001f2a:	4d0d      	ldr	r5, [pc, #52]	; (8001f60 <__libc_init_array+0x38>)
 8001f2c:	4c0d      	ldr	r4, [pc, #52]	; (8001f64 <__libc_init_array+0x3c>)
 8001f2e:	1b64      	subs	r4, r4, r5
 8001f30:	10a4      	asrs	r4, r4, #2
 8001f32:	2600      	movs	r6, #0
 8001f34:	42a6      	cmp	r6, r4
 8001f36:	d109      	bne.n	8001f4c <__libc_init_array+0x24>
 8001f38:	4d0b      	ldr	r5, [pc, #44]	; (8001f68 <__libc_init_array+0x40>)
 8001f3a:	4c0c      	ldr	r4, [pc, #48]	; (8001f6c <__libc_init_array+0x44>)
 8001f3c:	f000 f820 	bl	8001f80 <_init>
 8001f40:	1b64      	subs	r4, r4, r5
 8001f42:	10a4      	asrs	r4, r4, #2
 8001f44:	2600      	movs	r6, #0
 8001f46:	42a6      	cmp	r6, r4
 8001f48:	d105      	bne.n	8001f56 <__libc_init_array+0x2e>
 8001f4a:	bd70      	pop	{r4, r5, r6, pc}
 8001f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f50:	4798      	blx	r3
 8001f52:	3601      	adds	r6, #1
 8001f54:	e7ee      	b.n	8001f34 <__libc_init_array+0xc>
 8001f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f5a:	4798      	blx	r3
 8001f5c:	3601      	adds	r6, #1
 8001f5e:	e7f2      	b.n	8001f46 <__libc_init_array+0x1e>
 8001f60:	08001fa8 	.word	0x08001fa8
 8001f64:	08001fa8 	.word	0x08001fa8
 8001f68:	08001fa8 	.word	0x08001fa8
 8001f6c:	08001fac 	.word	0x08001fac

08001f70 <memset>:
 8001f70:	4402      	add	r2, r0
 8001f72:	4603      	mov	r3, r0
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d100      	bne.n	8001f7a <memset+0xa>
 8001f78:	4770      	bx	lr
 8001f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f7e:	e7f9      	b.n	8001f74 <memset+0x4>

08001f80 <_init>:
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f82:	bf00      	nop
 8001f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f86:	bc08      	pop	{r3}
 8001f88:	469e      	mov	lr, r3
 8001f8a:	4770      	bx	lr

08001f8c <_fini>:
 8001f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8e:	bf00      	nop
 8001f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f92:	bc08      	pop	{r3}
 8001f94:	469e      	mov	lr, r3
 8001f96:	4770      	bx	lr
