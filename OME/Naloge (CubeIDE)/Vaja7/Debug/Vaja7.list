
Vaja7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08003fd0  08003fd0  00013fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e8  080040e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080040e8  080040e8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040e8  080040e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040e8  080040e8  000140e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040ec  080040ec  000140ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080040f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000070  08004160  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08004160  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9b1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002684  00000000  00000000  0002ca51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  0002f0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  0002fc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028819  00000000  00000000  000306d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba1e  00000000  00000000  00058ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4493  00000000  00000000  00064907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158d9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034c8  00000000  00000000  00158df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003fb8 	.word	0x08003fb8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08003fb8 	.word	0x08003fb8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f043 0201 	orr.w	r2, r3, #1
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	601a      	str	r2, [r3, #0]
}
 80002d4:	bf00      	nop
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr

080002e0 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	601a      	str	r2, [r3, #0]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000300:	b480      	push	{r7}
 8000302:	b089      	sub	sp, #36	; 0x24
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	3308      	adds	r3, #8
 800030e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	e853 3f00 	ldrex	r3, [r3]
 8000316:	60bb      	str	r3, [r7, #8]
   return(result);
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	075b      	lsls	r3, r3, #29
 8000322:	4313      	orrs	r3, r2
 8000324:	61fb      	str	r3, [r7, #28]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3308      	adds	r3, #8
 800032a:	69fa      	ldr	r2, [r7, #28]
 800032c:	61ba      	str	r2, [r7, #24]
 800032e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000330:	6979      	ldr	r1, [r7, #20]
 8000332:	69ba      	ldr	r2, [r7, #24]
 8000334:	e841 2300 	strex	r3, r2, [r1]
 8000338:	613b      	str	r3, [r7, #16]
   return(result);
 800033a:	693b      	ldr	r3, [r7, #16]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d1e4      	bne.n	800030a <LL_USART_SetTXFIFOThreshold+0xa>
}
 8000340:	bf00      	nop
 8000342:	bf00      	nop
 8000344:	3724      	adds	r7, #36	; 0x24
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr

0800034e <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800034e:	b480      	push	{r7}
 8000350:	b089      	sub	sp, #36	; 0x24
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
 8000356:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3308      	adds	r3, #8
 800035c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	e853 3f00 	ldrex	r3, [r3]
 8000364:	60bb      	str	r3, [r7, #8]
   return(result);
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	065b      	lsls	r3, r3, #25
 8000370:	4313      	orrs	r3, r2
 8000372:	61fb      	str	r3, [r7, #28]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3308      	adds	r3, #8
 8000378:	69fa      	ldr	r2, [r7, #28]
 800037a:	61ba      	str	r2, [r7, #24]
 800037c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800037e:	6979      	ldr	r1, [r7, #20]
 8000380:	69ba      	ldr	r2, [r7, #24]
 8000382:	e841 2300 	strex	r3, r2, [r1]
 8000386:	613b      	str	r3, [r7, #16]
   return(result);
 8000388:	693b      	ldr	r3, [r7, #16]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d1e4      	bne.n	8000358 <LL_USART_SetRXFIFOThreshold+0xa>
}
 800038e:	bf00      	nop
 8000390:	bf00      	nop
 8000392:	3724      	adds	r7, #36	; 0x24
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <LL_USART_DisableOverrunDetect>:
  * @rmtoll CR3          OVRDIS        LL_USART_DisableOverrunDetect
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	609a      	str	r2, [r3, #8]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	609a      	str	r2, [r3, #8]
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	69db      	ldr	r3, [r3, #28]
 80003f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80003fc:	d101      	bne.n	8000402 <LL_USART_IsActiveFlag_TEACK+0x1a>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <LL_USART_IsActiveFlag_TEACK+0x1c>
 8000402:	2300      	movs	r3, #0
}
 8000404:	4618      	mov	r0, r3
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	69db      	ldr	r3, [r3, #28]
 800041c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000420:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000424:	d101      	bne.n	800042a <LL_USART_IsActiveFlag_REACK+0x1a>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_USART_IsActiveFlag_REACK+0x1c>
 800042a:	2300      	movs	r3, #0
}
 800042c:	4618      	mov	r0, r3
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	683a      	ldr	r2, [r7, #0]
 8000446:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800045e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000460:	4907      	ldr	r1, [pc, #28]	; (8000480 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4313      	orrs	r3, r2
 8000466:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800046a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4013      	ands	r3, r2
 8000470:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000472:	68fb      	ldr	r3, [r7, #12]
}
 8000474:	bf00      	nop
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	40021000 	.word	0x40021000

08000484 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800048e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000490:	4907      	ldr	r1, [pc, #28]	; (80004b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4313      	orrs	r3, r2
 8000496:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800049a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4013      	ands	r3, r2
 80004a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a2:	68fb      	ldr	r3, [r7, #12]
}
 80004a4:	bf00      	nop
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	40021000 	.word	0x40021000

080004b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b8:	f000 fb37 	bl	8000b2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004bc:	f000 f83c 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c0:	f000 f91e 	bl	8000700 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004c4:	f000 f884 	bl	80005d0 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  LED_init();
 80004c8:	f002 fa60 	bl	800298c <LED_init>
  //LED_demo();

  LEDs_on(0b10101010);
 80004cc:	20aa      	movs	r0, #170	; 0xaa
 80004ce:	f002 facb 	bl	8002a68 <LEDs_on>
  HAL_Delay(200);
 80004d2:	20c8      	movs	r0, #200	; 0xc8
 80004d4:	f000 fb9a 	bl	8000c0c <HAL_Delay>
  LEDs_off(LEDs_read());
 80004d8:	f002 fb4a 	bl	8002b70 <LEDs_read>
 80004dc:	4603      	mov	r3, r0
 80004de:	4618      	mov	r0, r3
 80004e0:	f002 faf0 	bl	8002ac4 <LEDs_off>
  LEDs_on(0b01010101);
 80004e4:	2055      	movs	r0, #85	; 0x55
 80004e6:	f002 fabf 	bl	8002a68 <LEDs_on>
  HAL_Delay(200);
 80004ea:	20c8      	movs	r0, #200	; 0xc8
 80004ec:	f000 fb8e 	bl	8000c0c <HAL_Delay>
  LEDs_off(LEDs_read());
 80004f0:	f002 fb3e 	bl	8002b70 <LEDs_read>
 80004f4:	4603      	mov	r3, r0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 fae4 	bl	8002ac4 <LEDs_off>
  LEDs_on(0b10101010);
 80004fc:	20aa      	movs	r0, #170	; 0xaa
 80004fe:	f002 fab3 	bl	8002a68 <LEDs_on>
  HAL_Delay(200);
 8000502:	20c8      	movs	r0, #200	; 0xc8
 8000504:	f000 fb82 	bl	8000c0c <HAL_Delay>
  LEDs_write(0);
 8000508:	2000      	movs	r0, #0
 800050a:	f002 fb09 	bl	8002b20 <LEDs_write>

  KBD_init();
 800050e:	f002 fca3 	bl	8002e58 <KBD_init>

  SCI_init();
 8000512:	f002 fb9d 	bl	8002c50 <SCI_init>

  //SCI_demo_Hello_world();
  //*
  SCI_send_char('B');
 8000516:	2042      	movs	r0, #66	; 0x42
 8000518:	f002 fbb0 	bl	8002c7c <SCI_send_char>
  printf("Hello world");
 800051c:	4805      	ldr	r0, [pc, #20]	; (8000534 <main+0x80>)
 800051e:	f002 fd27 	bl	8002f70 <iprintf>
  SCI_demo_Hello_world_printf();
 8000522:	f002 fc39 	bl	8002d98 <SCI_demo_Hello_world_printf>
  SCI_demo_echo_with_polling();
 8000526:	f002 fc51 	bl	8002dcc <SCI_demo_echo_with_polling>

  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_Delay(200);
 800052a:	20c8      	movs	r0, #200	; 0xc8
 800052c:	f000 fb6e 	bl	8000c0c <HAL_Delay>
 8000530:	e7fb      	b.n	800052a <main+0x76>
 8000532:	bf00      	nop
 8000534:	08003fd0 	.word	0x08003fd0

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0318 	add.w	r3, r7, #24
 8000542:	2238      	movs	r2, #56	; 0x38
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f002 fd0a 	bl	8002f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800055a:	2000      	movs	r0, #0
 800055c:	f000 fc5c 	bl	8000e18 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056a:	2340      	movs	r3, #64	; 0x40
 800056c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000572:	2302      	movs	r3, #2
 8000574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000576:	2304      	movs	r3, #4
 8000578:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800057a:	2355      	movs	r3, #85	; 0x55
 800057c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0318 	add.w	r3, r7, #24
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fcf6 	bl	8000f80 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800059a:	f000 f9af 	bl	80008fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2303      	movs	r3, #3
 80005a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2104      	movs	r1, #4
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fffa 	bl	80015b0 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005c2:	f000 f99b 	bl	80008fc <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3750      	adds	r7, #80	; 0x50
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b0a4      	sub	sp, #144	; 0x90
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80005d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005da:	2220      	movs	r2, #32
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fcbe 	bl	8002f60 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
 80005f4:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2254      	movs	r2, #84	; 0x54
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f002 fcaf 	bl	8002f60 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000602:	2304      	movs	r3, #4
 8000604:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f001 f9b3 	bl	8001978 <HAL_RCCEx_PeriphCLKConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_USART3_UART_Init+0x4c>
  {
    Error_Handler();
 8000618:	f000 f970 	bl	80008fc <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800061c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000620:	f7ff ff30 	bl	8000484 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000624:	2002      	movs	r0, #2
 8000626:	f7ff ff15 	bl	8000454 <LL_AHB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB8-BOOT0   ------> USART3_RX
  PB9   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800062a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062e:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000630:	2302      	movs	r3, #2
 8000632:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800063c:	2300      	movs	r3, #0
 800063e:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000640:	2307      	movs	r3, #7
 8000642:	66fb      	str	r3, [r7, #108]	; 0x6c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000644:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000648:	4619      	mov	r1, r3
 800064a:	482b      	ldr	r0, [pc, #172]	; (80006f8 <MX_USART3_UART_Init+0x128>)
 800064c:	f001 fd2b 	bl	80020a6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000654:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000656:	2302      	movs	r3, #2
 8000658:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000662:	2300      	movs	r3, #0
 8000664:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000666:	2307      	movs	r3, #7
 8000668:	66fb      	str	r3, [r7, #108]	; 0x6c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800066e:	4619      	mov	r1, r3
 8000670:	4821      	ldr	r0, [pc, #132]	; (80006f8 <MX_USART3_UART_Init+0x128>)
 8000672:	f001 fd18 	bl	80020a6 <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	673b      	str	r3, [r7, #112]	; 0x70
  USART_InitStruct.BaudRate = 115200;
 800067a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800067e:	677b      	str	r3, [r7, #116]	; 0x74
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000680:	2300      	movs	r3, #0
 8000682:	67bb      	str	r3, [r7, #120]	; 0x78
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000684:	2300      	movs	r3, #0
 8000686:	67fb      	str	r3, [r7, #124]	; 0x7c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800068e:	230c      	movs	r3, #12
 8000690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800069a:	2300      	movs	r3, #0
 800069c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  LL_USART_Init(USART3, &USART_InitStruct);
 80006a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006a4:	4619      	mov	r1, r3
 80006a6:	4815      	ldr	r0, [pc, #84]	; (80006fc <MX_USART3_UART_Init+0x12c>)
 80006a8:	f002 f8b8 	bl	800281c <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 80006ac:	2100      	movs	r1, #0
 80006ae:	4813      	ldr	r0, [pc, #76]	; (80006fc <MX_USART3_UART_Init+0x12c>)
 80006b0:	f7ff fe26 	bl	8000300 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 80006b4:	2100      	movs	r1, #0
 80006b6:	4811      	ldr	r0, [pc, #68]	; (80006fc <MX_USART3_UART_Init+0x12c>)
 80006b8:	f7ff fe49 	bl	800034e <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART3);
 80006bc:	480f      	ldr	r0, [pc, #60]	; (80006fc <MX_USART3_UART_Init+0x12c>)
 80006be:	f7ff fe0f 	bl	80002e0 <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(USART3);
 80006c2:	480e      	ldr	r0, [pc, #56]	; (80006fc <MX_USART3_UART_Init+0x12c>)
 80006c4:	f7ff fe6a 	bl	800039c <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(USART3);
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <MX_USART3_UART_Init+0x12c>)
 80006ca:	f7ff fe77 	bl	80003bc <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART3 */

  /* USER CODE END WKUPType USART3 */

  LL_USART_Enable(USART3);
 80006ce:	480b      	ldr	r0, [pc, #44]	; (80006fc <MX_USART3_UART_Init+0x12c>)
 80006d0:	f7ff fdf6 	bl	80002c0 <LL_USART_Enable>

  /* Polling USART3 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART3))) || (!(LL_USART_IsActiveFlag_REACK(USART3))))
 80006d4:	bf00      	nop
 80006d6:	4809      	ldr	r0, [pc, #36]	; (80006fc <MX_USART3_UART_Init+0x12c>)
 80006d8:	f7ff fe86 	bl	80003e8 <LL_USART_IsActiveFlag_TEACK>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d0f9      	beq.n	80006d6 <MX_USART3_UART_Init+0x106>
 80006e2:	4806      	ldr	r0, [pc, #24]	; (80006fc <MX_USART3_UART_Init+0x12c>)
 80006e4:	f7ff fe94 	bl	8000410 <LL_USART_IsActiveFlag_REACK>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d0f3      	beq.n	80006d6 <MX_USART3_UART_Init+0x106>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	3790      	adds	r7, #144	; 0x90
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	48000400 	.word	0x48000400
 80006fc:	40004800 	.word	0x40004800

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	463b      	mov	r3, r7
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
 8000714:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000716:	2004      	movs	r0, #4
 8000718:	f7ff fe9c 	bl	8000454 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 800071c:	2020      	movs	r0, #32
 800071e:	f7ff fe99 	bl	8000454 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOG);
 8000722:	2040      	movs	r0, #64	; 0x40
 8000724:	f7ff fe96 	bl	8000454 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000728:	2002      	movs	r0, #2
 800072a:	f7ff fe93 	bl	8000454 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_3);
 800072e:	2108      	movs	r1, #8
 8000730:	486f      	ldr	r0, [pc, #444]	; (80008f0 <MX_GPIO_Init+0x1f0>)
 8000732:	f7ff fe81 	bl	8000438 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_4);
 8000736:	2110      	movs	r1, #16
 8000738:	486d      	ldr	r0, [pc, #436]	; (80008f0 <MX_GPIO_Init+0x1f0>)
 800073a:	f7ff fe7d 	bl	8000438 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_5);
 800073e:	2120      	movs	r1, #32
 8000740:	486b      	ldr	r0, [pc, #428]	; (80008f0 <MX_GPIO_Init+0x1f0>)
 8000742:	f7ff fe79 	bl	8000438 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0);
 8000746:	2101      	movs	r1, #1
 8000748:	486a      	ldr	r0, [pc, #424]	; (80008f4 <MX_GPIO_Init+0x1f4>)
 800074a:	f7ff fe75 	bl	8000438 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1);
 800074e:	2102      	movs	r1, #2
 8000750:	4868      	ldr	r0, [pc, #416]	; (80008f4 <MX_GPIO_Init+0x1f4>)
 8000752:	f7ff fe71 	bl	8000438 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_2);
 8000756:	2104      	movs	r1, #4
 8000758:	4866      	ldr	r0, [pc, #408]	; (80008f4 <MX_GPIO_Init+0x1f4>)
 800075a:	f7ff fe6d 	bl	8000438 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_3);
 800075e:	2108      	movs	r1, #8
 8000760:	4864      	ldr	r0, [pc, #400]	; (80008f4 <MX_GPIO_Init+0x1f4>)
 8000762:	f7ff fe69 	bl	8000438 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_2);
 8000766:	2104      	movs	r1, #4
 8000768:	4861      	ldr	r0, [pc, #388]	; (80008f0 <MX_GPIO_Init+0x1f0>)
 800076a:	f7ff fe65 	bl	8000438 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 800076e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000772:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	485c      	ldr	r0, [pc, #368]	; (80008f4 <MX_GPIO_Init+0x1f4>)
 8000782:	f001 fc90 	bl	80020a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800078a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000790:	2301      	movs	r3, #1
 8000792:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4856      	ldr	r0, [pc, #344]	; (80008f4 <MX_GPIO_Init+0x1f4>)
 800079a:	f001 fc84 	bl	80020a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800079e:	2308      	movs	r3, #8
 80007a0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007a2:	2301      	movs	r3, #1
 80007a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007b2:	463b      	mov	r3, r7
 80007b4:	4619      	mov	r1, r3
 80007b6:	484e      	ldr	r0, [pc, #312]	; (80008f0 <MX_GPIO_Init+0x1f0>)
 80007b8:	f001 fc75 	bl	80020a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80007bc:	2310      	movs	r3, #16
 80007be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007c0:	2301      	movs	r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007d0:	463b      	mov	r3, r7
 80007d2:	4619      	mov	r1, r3
 80007d4:	4846      	ldr	r0, [pc, #280]	; (80008f0 <MX_GPIO_Init+0x1f0>)
 80007d6:	f001 fc66 	bl	80020a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80007da:	2320      	movs	r3, #32
 80007dc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007de:	2301      	movs	r3, #1
 80007e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	483f      	ldr	r0, [pc, #252]	; (80008f0 <MX_GPIO_Init+0x1f0>)
 80007f4:	f001 fc57 	bl	80020a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80007f8:	2301      	movs	r3, #1
 80007fa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007fc:	2301      	movs	r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080c:	463b      	mov	r3, r7
 800080e:	4619      	mov	r1, r3
 8000810:	4838      	ldr	r0, [pc, #224]	; (80008f4 <MX_GPIO_Init+0x1f4>)
 8000812:	f001 fc48 	bl	80020a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000816:	2302      	movs	r3, #2
 8000818:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800081a:	2301      	movs	r3, #1
 800081c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082a:	463b      	mov	r3, r7
 800082c:	4619      	mov	r1, r3
 800082e:	4831      	ldr	r0, [pc, #196]	; (80008f4 <MX_GPIO_Init+0x1f4>)
 8000830:	f001 fc39 	bl	80020a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000834:	2304      	movs	r3, #4
 8000836:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000838:	2301      	movs	r3, #1
 800083a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	463b      	mov	r3, r7
 800084a:	4619      	mov	r1, r3
 800084c:	4829      	ldr	r0, [pc, #164]	; (80008f4 <MX_GPIO_Init+0x1f4>)
 800084e:	f001 fc2a 	bl	80020a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000852:	2308      	movs	r3, #8
 8000854:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000856:	2301      	movs	r3, #1
 8000858:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000866:	463b      	mov	r3, r7
 8000868:	4619      	mov	r1, r3
 800086a:	4822      	ldr	r0, [pc, #136]	; (80008f4 <MX_GPIO_Init+0x1f4>)
 800086c:	f001 fc1b 	bl	80020a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000870:	2304      	movs	r3, #4
 8000872:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000874:	2301      	movs	r3, #1
 8000876:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	4819      	ldr	r0, [pc, #100]	; (80008f0 <MX_GPIO_Init+0x1f0>)
 800088a:	f001 fc0c 	bl	80020a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800088e:	2301      	movs	r3, #1
 8000890:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000896:	2301      	movs	r3, #1
 8000898:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800089a:	463b      	mov	r3, r7
 800089c:	4619      	mov	r1, r3
 800089e:	4816      	ldr	r0, [pc, #88]	; (80008f8 <MX_GPIO_Init+0x1f8>)
 80008a0:	f001 fc01 	bl	80020a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80008a4:	2302      	movs	r3, #2
 80008a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b0:	463b      	mov	r3, r7
 80008b2:	4619      	mov	r1, r3
 80008b4:	4810      	ldr	r0, [pc, #64]	; (80008f8 <MX_GPIO_Init+0x1f8>)
 80008b6:	f001 fbf6 	bl	80020a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80008ba:	2340      	movs	r3, #64	; 0x40
 80008bc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008c6:	463b      	mov	r3, r7
 80008c8:	4619      	mov	r1, r3
 80008ca:	480b      	ldr	r0, [pc, #44]	; (80008f8 <MX_GPIO_Init+0x1f8>)
 80008cc:	f001 fbeb 	bl	80020a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80008d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80008da:	2301      	movs	r3, #1
 80008dc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_GPIO_Init+0x1f8>)
 80008e4:	f001 fbdf 	bl	80020a6 <LL_GPIO_Init>

}
 80008e8:	bf00      	nop
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	48001400 	.word	0x48001400
 80008f4:	48000800 	.word	0x48000800
 80008f8:	48001800 	.word	0x48001800

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_MspInit+0x44>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <HAL_MspInit+0x44>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6613      	str	r3, [r2, #96]	; 0x60
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <HAL_MspInit+0x44>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_MspInit+0x44>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <HAL_MspInit+0x44>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6593      	str	r3, [r2, #88]	; 0x58
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_MspInit+0x44>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800093e:	f000 fb0f 	bl	8000f60 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099c:	f000 f918 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	e00a      	b.n	80009cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009b6:	f3af 8000 	nop.w
 80009ba:	4601      	mov	r1, r0
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	60ba      	str	r2, [r7, #8]
 80009c2:	b2ca      	uxtb	r2, r1
 80009c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697a      	ldr	r2, [r7, #20]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dbf0      	blt.n	80009b6 <_read+0x12>
	}

return len;
 80009d4:	687b      	ldr	r3, [r7, #4]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <_close>:
	}
	return len;
}

int _close(int file)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
	return -1;
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a06:	605a      	str	r2, [r3, #4]
	return 0;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <_isatty>:

int _isatty(int file)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
	return 0;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <_sbrk+0x5c>)
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <_sbrk+0x60>)
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d102      	bne.n	8000a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <_sbrk+0x64>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <_sbrk+0x68>)
 8000a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d207      	bcs.n	8000a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a78:	f002 fa48 	bl	8002f0c <__errno>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	220c      	movs	r2, #12
 8000a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	e009      	b.n	8000a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	4a05      	ldr	r2, [pc, #20]	; (8000aac <_sbrk+0x64>)
 8000a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20020000 	.word	0x20020000
 8000aa8:	00000400 	.word	0x00000400
 8000aac:	2000008c 	.word	0x2000008c
 8000ab0:	20000170 	.word	0x20000170

08000ab4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <SystemInit+0x20>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <SystemInit+0x20>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ada:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ade:	490e      	ldr	r1, [pc, #56]	; (8000b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae0:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <LoopForever+0xe>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af4:	4c0b      	ldr	r4, [pc, #44]	; (8000b24 <LoopForever+0x16>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b02:	f7ff ffd7 	bl	8000ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b06:	f002 fa07 	bl	8002f18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b0a:	f7ff fcd3 	bl	80004b4 <main>

08000b0e <LoopForever>:

LoopForever:
    b LoopForever
 8000b0e:	e7fe      	b.n	8000b0e <LoopForever>
  ldr   r0, =_estack
 8000b10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b1c:	080040f0 	.word	0x080040f0
  ldr r2, =_sbss
 8000b20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b24:	20000170 	.word	0x20000170

08000b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC1_2_IRQHandler>

08000b2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f93d 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f000 f80e 	bl	8000b5c <HAL_InitTick>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	71fb      	strb	r3, [r7, #7]
 8000b4a:	e001      	b.n	8000b50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b4c:	f7ff fedc 	bl	8000908 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b50:	79fb      	ldrb	r3, [r7, #7]

}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <HAL_InitTick+0x68>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d022      	beq.n	8000bb6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_InitTick+0x6c>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <HAL_InitTick+0x68>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 f93a 	bl	8000dfe <HAL_SYSTICK_Config>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10f      	bne.n	8000bb0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b0f      	cmp	r3, #15
 8000b94:	d809      	bhi.n	8000baa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b96:	2200      	movs	r2, #0
 8000b98:	6879      	ldr	r1, [r7, #4]
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	f000 f914 	bl	8000dca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <HAL_InitTick+0x70>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	e007      	b.n	8000bba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	e004      	b.n	8000bba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	e001      	b.n	8000bba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000004 	.word	0x20000004

08000bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_IncTick+0x1c>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a03      	ldr	r2, [pc, #12]	; (8000bec <HAL_IncTick+0x1c>)
 8000be0:	6013      	str	r3, [r2, #0]
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	20000098 	.word	0x20000098
 8000bf0:	20000008 	.word	0x20000008

08000bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <HAL_GetTick+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000098 	.word	0x20000098

08000c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c14:	f7ff ffee 	bl	8000bf4 <HAL_GetTick>
 8000c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c24:	d004      	beq.n	8000c30 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <HAL_Delay+0x40>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c30:	bf00      	nop
 8000c32:	f7ff ffdf 	bl	8000bf4 <HAL_GetTick>
 8000c36:	4602      	mov	r2, r0
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d8f7      	bhi.n	8000c32 <HAL_Delay+0x26>
  {
  }
}
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000008 	.word	0x20000008

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	; (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f7ff ff8e 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff47 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff5e 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff90 	bl	8000d08 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5f 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffb2 	bl	8000d70 <SysTick_Config>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d141      	bne.n	8000eaa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e26:	4b4b      	ldr	r3, [pc, #300]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e32:	d131      	bne.n	8000e98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e34:	4b47      	ldr	r3, [pc, #284]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e3a:	4a46      	ldr	r2, [pc, #280]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e44:	4b43      	ldr	r3, [pc, #268]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e4c:	4a41      	ldr	r2, [pc, #260]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e54:	4b40      	ldr	r3, [pc, #256]	; (8000f58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2232      	movs	r2, #50	; 0x32
 8000e5a:	fb02 f303 	mul.w	r3, r2, r3
 8000e5e:	4a3f      	ldr	r2, [pc, #252]	; (8000f5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e60:	fba2 2303 	umull	r2, r3, r2, r3
 8000e64:	0c9b      	lsrs	r3, r3, #18
 8000e66:	3301      	adds	r3, #1
 8000e68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e6a:	e002      	b.n	8000e72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e72:	4b38      	ldr	r3, [pc, #224]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e7e:	d102      	bne.n	8000e86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f2      	bne.n	8000e6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e86:	4b33      	ldr	r3, [pc, #204]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e92:	d158      	bne.n	8000f46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e057      	b.n	8000f48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e98:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e9e:	4a2d      	ldr	r2, [pc, #180]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ea4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000ea8:	e04d      	b.n	8000f46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eb0:	d141      	bne.n	8000f36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000eb2:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ebe:	d131      	bne.n	8000f24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ec0:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ec6:	4a23      	ldr	r2, [pc, #140]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ecc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed0:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ed8:	4a1e      	ldr	r2, [pc, #120]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ede:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2232      	movs	r2, #50	; 0x32
 8000ee6:	fb02 f303 	mul.w	r3, r2, r3
 8000eea:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000eec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef0:	0c9b      	lsrs	r3, r3, #18
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ef6:	e002      	b.n	8000efe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f0a:	d102      	bne.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f2      	bne.n	8000ef8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f1e:	d112      	bne.n	8000f46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e011      	b.n	8000f48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000f34:	e007      	b.n	8000f46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	40007000 	.word	0x40007000
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	431bde83 	.word	0x431bde83

08000f60 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6e:	6093      	str	r3, [r2, #8]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40007000 	.word	0x40007000

08000f80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e308      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d075      	beq.n	800108a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f9e:	4ba3      	ldr	r3, [pc, #652]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
 8000fa6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fa8:	4ba0      	ldr	r3, [pc, #640]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	2b0c      	cmp	r3, #12
 8000fb6:	d102      	bne.n	8000fbe <HAL_RCC_OscConfig+0x3e>
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d002      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x44>
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	d10b      	bne.n	8000fdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc4:	4b99      	ldr	r3, [pc, #612]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d05b      	beq.n	8001088 <HAL_RCC_OscConfig+0x108>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d157      	bne.n	8001088 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e2e3      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe4:	d106      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x74>
 8000fe6:	4b91      	ldr	r3, [pc, #580]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a90      	ldr	r2, [pc, #576]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 8000fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	e01d      	b.n	8001030 <HAL_RCC_OscConfig+0xb0>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ffc:	d10c      	bne.n	8001018 <HAL_RCC_OscConfig+0x98>
 8000ffe:	4b8b      	ldr	r3, [pc, #556]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a8a      	ldr	r2, [pc, #552]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 8001004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	4b88      	ldr	r3, [pc, #544]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a87      	ldr	r2, [pc, #540]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 8001010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e00b      	b.n	8001030 <HAL_RCC_OscConfig+0xb0>
 8001018:	4b84      	ldr	r3, [pc, #528]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a83      	ldr	r2, [pc, #524]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 800101e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b81      	ldr	r3, [pc, #516]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a80      	ldr	r2, [pc, #512]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 800102a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d013      	beq.n	8001060 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001038:	f7ff fddc 	bl	8000bf4 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001040:	f7ff fdd8 	bl	8000bf4 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b64      	cmp	r3, #100	; 0x64
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e2a8      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001052:	4b76      	ldr	r3, [pc, #472]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0f0      	beq.n	8001040 <HAL_RCC_OscConfig+0xc0>
 800105e:	e014      	b.n	800108a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001060:	f7ff fdc8 	bl	8000bf4 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001068:	f7ff fdc4 	bl	8000bf4 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b64      	cmp	r3, #100	; 0x64
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e294      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800107a:	4b6c      	ldr	r3, [pc, #432]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f0      	bne.n	8001068 <HAL_RCC_OscConfig+0xe8>
 8001086:	e000      	b.n	800108a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d075      	beq.n	8001182 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001096:	4b65      	ldr	r3, [pc, #404]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010a0:	4b62      	ldr	r3, [pc, #392]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	2b0c      	cmp	r3, #12
 80010ae:	d102      	bne.n	80010b6 <HAL_RCC_OscConfig+0x136>
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d002      	beq.n	80010bc <HAL_RCC_OscConfig+0x13c>
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d11f      	bne.n	80010fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010bc:	4b5b      	ldr	r3, [pc, #364]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d005      	beq.n	80010d4 <HAL_RCC_OscConfig+0x154>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e267      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d4:	4b55      	ldr	r3, [pc, #340]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	061b      	lsls	r3, r3, #24
 80010e2:	4952      	ldr	r1, [pc, #328]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010e8:	4b51      	ldr	r3, [pc, #324]	; (8001230 <HAL_RCC_OscConfig+0x2b0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fd35 	bl	8000b5c <HAL_InitTick>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d043      	beq.n	8001180 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e253      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d023      	beq.n	800114c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001104:	4b49      	ldr	r3, [pc, #292]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a48      	ldr	r2, [pc, #288]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 800110a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001110:	f7ff fd70 	bl	8000bf4 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001118:	f7ff fd6c 	bl	8000bf4 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e23c      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800112a:	4b40      	ldr	r3, [pc, #256]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0f0      	beq.n	8001118 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001136:	4b3d      	ldr	r3, [pc, #244]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	061b      	lsls	r3, r3, #24
 8001144:	4939      	ldr	r1, [pc, #228]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 8001146:	4313      	orrs	r3, r2
 8001148:	604b      	str	r3, [r1, #4]
 800114a:	e01a      	b.n	8001182 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800114c:	4b37      	ldr	r3, [pc, #220]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a36      	ldr	r2, [pc, #216]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 8001152:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001158:	f7ff fd4c 	bl	8000bf4 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001160:	f7ff fd48 	bl	8000bf4 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e218      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0x1e0>
 800117e:	e000      	b.n	8001182 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001180:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	2b00      	cmp	r3, #0
 800118c:	d03c      	beq.n	8001208 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d01c      	beq.n	80011d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001196:	4b25      	ldr	r3, [pc, #148]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 8001198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800119c:	4a23      	ldr	r2, [pc, #140]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a6:	f7ff fd25 	bl	8000bf4 <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ae:	f7ff fd21 	bl	8000bf4 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e1f1      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 80011c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0ef      	beq.n	80011ae <HAL_RCC_OscConfig+0x22e>
 80011ce:	e01b      	b.n	8001208 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 80011d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011d6:	4a15      	ldr	r2, [pc, #84]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	f023 0301 	bic.w	r3, r3, #1
 80011dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e0:	f7ff fd08 	bl	8000bf4 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e8:	f7ff fd04 	bl	8000bf4 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e1d4      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1ef      	bne.n	80011e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80ab 	beq.w	800136c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <HAL_RCC_OscConfig+0x2ac>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d106      	bne.n	8001234 <HAL_RCC_OscConfig+0x2b4>
 8001226:	2301      	movs	r3, #1
 8001228:	e005      	b.n	8001236 <HAL_RCC_OscConfig+0x2b6>
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	20000004 	.word	0x20000004
 8001234:	2300      	movs	r3, #0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00d      	beq.n	8001256 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	4baf      	ldr	r3, [pc, #700]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	4aae      	ldr	r2, [pc, #696]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 8001240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001244:	6593      	str	r3, [r2, #88]	; 0x58
 8001246:	4bac      	ldr	r3, [pc, #688]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 8001248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001252:	2301      	movs	r3, #1
 8001254:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001256:	4ba9      	ldr	r3, [pc, #676]	; (80014fc <HAL_RCC_OscConfig+0x57c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125e:	2b00      	cmp	r3, #0
 8001260:	d118      	bne.n	8001294 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001262:	4ba6      	ldr	r3, [pc, #664]	; (80014fc <HAL_RCC_OscConfig+0x57c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4aa5      	ldr	r2, [pc, #660]	; (80014fc <HAL_RCC_OscConfig+0x57c>)
 8001268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800126e:	f7ff fcc1 	bl	8000bf4 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001276:	f7ff fcbd 	bl	8000bf4 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e18d      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001288:	4b9c      	ldr	r3, [pc, #624]	; (80014fc <HAL_RCC_OscConfig+0x57c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f0      	beq.n	8001276 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d108      	bne.n	80012ae <HAL_RCC_OscConfig+0x32e>
 800129c:	4b96      	ldr	r3, [pc, #600]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 800129e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a2:	4a95      	ldr	r2, [pc, #596]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012ac:	e024      	b.n	80012f8 <HAL_RCC_OscConfig+0x378>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b05      	cmp	r3, #5
 80012b4:	d110      	bne.n	80012d8 <HAL_RCC_OscConfig+0x358>
 80012b6:	4b90      	ldr	r3, [pc, #576]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80012b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012bc:	4a8e      	ldr	r2, [pc, #568]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012c6:	4b8c      	ldr	r3, [pc, #560]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80012c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012cc:	4a8a      	ldr	r2, [pc, #552]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012d6:	e00f      	b.n	80012f8 <HAL_RCC_OscConfig+0x378>
 80012d8:	4b87      	ldr	r3, [pc, #540]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80012da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012de:	4a86      	ldr	r2, [pc, #536]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80012e0:	f023 0301 	bic.w	r3, r3, #1
 80012e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012e8:	4b83      	ldr	r3, [pc, #524]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80012ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ee:	4a82      	ldr	r2, [pc, #520]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80012f0:	f023 0304 	bic.w	r3, r3, #4
 80012f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d016      	beq.n	800132e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001300:	f7ff fc78 	bl	8000bf4 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001306:	e00a      	b.n	800131e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001308:	f7ff fc74 	bl	8000bf4 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	f241 3288 	movw	r2, #5000	; 0x1388
 8001316:	4293      	cmp	r3, r2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e142      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800131e:	4b76      	ldr	r3, [pc, #472]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 8001320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0ed      	beq.n	8001308 <HAL_RCC_OscConfig+0x388>
 800132c:	e015      	b.n	800135a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132e:	f7ff fc61 	bl	8000bf4 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001334:	e00a      	b.n	800134c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001336:	f7ff fc5d 	bl	8000bf4 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	f241 3288 	movw	r2, #5000	; 0x1388
 8001344:	4293      	cmp	r3, r2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e12b      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800134c:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 800134e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1ed      	bne.n	8001336 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800135a:	7ffb      	ldrb	r3, [r7, #31]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d105      	bne.n	800136c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001360:	4b65      	ldr	r3, [pc, #404]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 8001362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001364:	4a64      	ldr	r2, [pc, #400]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 8001366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800136a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0320 	and.w	r3, r3, #32
 8001374:	2b00      	cmp	r3, #0
 8001376:	d03c      	beq.n	80013f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d01c      	beq.n	80013ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001380:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 8001382:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001386:	4a5c      	ldr	r2, [pc, #368]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001390:	f7ff fc30 	bl	8000bf4 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001398:	f7ff fc2c 	bl	8000bf4 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e0fc      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013aa:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80013ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0ef      	beq.n	8001398 <HAL_RCC_OscConfig+0x418>
 80013b8:	e01b      	b.n	80013f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013ba:	4b4f      	ldr	r3, [pc, #316]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80013bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013c0:	4a4d      	ldr	r2, [pc, #308]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80013c2:	f023 0301 	bic.w	r3, r3, #1
 80013c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ca:	f7ff fc13 	bl	8000bf4 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013d2:	f7ff fc0f 	bl	8000bf4 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e0df      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013e4:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80013e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1ef      	bne.n	80013d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 80d3 	beq.w	80015a2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013fc:	4b3e      	ldr	r3, [pc, #248]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	2b0c      	cmp	r3, #12
 8001406:	f000 808d 	beq.w	8001524 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d15a      	bne.n	80014c8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001412:	4b39      	ldr	r3, [pc, #228]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a38      	ldr	r2, [pc, #224]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 8001418:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800141c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141e:	f7ff fbe9 	bl	8000bf4 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001426:	f7ff fbe5 	bl	8000bf4 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e0b5      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001438:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f0      	bne.n	8001426 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001444:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <HAL_RCC_OscConfig+0x580>)
 800144a:	4013      	ands	r3, r2
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6a11      	ldr	r1, [r2, #32]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001454:	3a01      	subs	r2, #1
 8001456:	0112      	lsls	r2, r2, #4
 8001458:	4311      	orrs	r1, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800145e:	0212      	lsls	r2, r2, #8
 8001460:	4311      	orrs	r1, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001466:	0852      	lsrs	r2, r2, #1
 8001468:	3a01      	subs	r2, #1
 800146a:	0552      	lsls	r2, r2, #21
 800146c:	4311      	orrs	r1, r2
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001472:	0852      	lsrs	r2, r2, #1
 8001474:	3a01      	subs	r2, #1
 8001476:	0652      	lsls	r2, r2, #25
 8001478:	4311      	orrs	r1, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800147e:	06d2      	lsls	r2, r2, #27
 8001480:	430a      	orrs	r2, r1
 8001482:	491d      	ldr	r1, [pc, #116]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 8001484:	4313      	orrs	r3, r2
 8001486:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a1a      	ldr	r2, [pc, #104]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 800148e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001492:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 800149a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800149e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fba8 	bl	8000bf4 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a8:	f7ff fba4 	bl	8000bf4 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e074      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x528>
 80014c6:	e06c      	b.n	80015a2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80014ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014d2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80014da:	f023 0303 	bic.w	r3, r3, #3
 80014de:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_RCC_OscConfig+0x578>)
 80014e6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff fb80 	bl	8000bf4 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014f6:	e00e      	b.n	8001516 <HAL_RCC_OscConfig+0x596>
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40007000 	.word	0x40007000
 8001500:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001504:	f7ff fb76 	bl	8000bf4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e046      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001516:	4b25      	ldr	r3, [pc, #148]	; (80015ac <HAL_RCC_OscConfig+0x62c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x584>
 8001522:	e03e      	b.n	80015a2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e039      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001530:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <HAL_RCC_OscConfig+0x62c>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f003 0203 	and.w	r2, r3, #3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	429a      	cmp	r2, r3
 8001542:	d12c      	bne.n	800159e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	3b01      	subs	r3, #1
 8001550:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001552:	429a      	cmp	r2, r3
 8001554:	d123      	bne.n	800159e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001562:	429a      	cmp	r2, r3
 8001564:	d11b      	bne.n	800159e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001572:	429a      	cmp	r2, r3
 8001574:	d113      	bne.n	800159e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	085b      	lsrs	r3, r3, #1
 8001582:	3b01      	subs	r3, #1
 8001584:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001586:	429a      	cmp	r2, r3
 8001588:	d109      	bne.n	800159e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	3b01      	subs	r3, #1
 8001598:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800159a:	429a      	cmp	r2, r3
 800159c:	d001      	beq.n	80015a2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40021000 	.word	0x40021000

080015b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e11e      	b.n	8001806 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c8:	4b91      	ldr	r3, [pc, #580]	; (8001810 <HAL_RCC_ClockConfig+0x260>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 030f 	and.w	r3, r3, #15
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d910      	bls.n	80015f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d6:	4b8e      	ldr	r3, [pc, #568]	; (8001810 <HAL_RCC_ClockConfig+0x260>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 020f 	bic.w	r2, r3, #15
 80015de:	498c      	ldr	r1, [pc, #560]	; (8001810 <HAL_RCC_ClockConfig+0x260>)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e6:	4b8a      	ldr	r3, [pc, #552]	; (8001810 <HAL_RCC_ClockConfig+0x260>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e106      	b.n	8001806 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d073      	beq.n	80016ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b03      	cmp	r3, #3
 800160a:	d129      	bne.n	8001660 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800160c:	4b81      	ldr	r3, [pc, #516]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0f4      	b.n	8001806 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800161c:	f000 f966 	bl	80018ec <RCC_GetSysClockFreqFromPLLSource>
 8001620:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4a7c      	ldr	r2, [pc, #496]	; (8001818 <HAL_RCC_ClockConfig+0x268>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d93f      	bls.n	80016aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800162a:	4b7a      	ldr	r3, [pc, #488]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d009      	beq.n	800164a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800163e:	2b00      	cmp	r3, #0
 8001640:	d033      	beq.n	80016aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001646:	2b00      	cmp	r3, #0
 8001648:	d12f      	bne.n	80016aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800164a:	4b72      	ldr	r3, [pc, #456]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001652:	4a70      	ldr	r2, [pc, #448]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 8001654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001658:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	e024      	b.n	80016aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d107      	bne.n	8001678 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001668:	4b6a      	ldr	r3, [pc, #424]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d109      	bne.n	8001688 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0c6      	b.n	8001806 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001678:	4b66      	ldr	r3, [pc, #408]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0be      	b.n	8001806 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001688:	f000 f8ce 	bl	8001828 <HAL_RCC_GetSysClockFreq>
 800168c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4a61      	ldr	r2, [pc, #388]	; (8001818 <HAL_RCC_ClockConfig+0x268>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d909      	bls.n	80016aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001696:	4b5f      	ldr	r3, [pc, #380]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800169e:	4a5d      	ldr	r2, [pc, #372]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 80016a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016aa:	4b5a      	ldr	r3, [pc, #360]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f023 0203 	bic.w	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4957      	ldr	r1, [pc, #348]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016bc:	f7ff fa9a 	bl	8000bf4 <HAL_GetTick>
 80016c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c2:	e00a      	b.n	80016da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c4:	f7ff fa96 	bl	8000bf4 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e095      	b.n	8001806 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016da:	4b4e      	ldr	r3, [pc, #312]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 020c 	and.w	r2, r3, #12
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d1eb      	bne.n	80016c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d023      	beq.n	8001740 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001704:	4b43      	ldr	r3, [pc, #268]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4a42      	ldr	r2, [pc, #264]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 800170a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800170e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	2b00      	cmp	r3, #0
 800171a:	d007      	beq.n	800172c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800171c:	4b3d      	ldr	r3, [pc, #244]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001724:	4a3b      	ldr	r2, [pc, #236]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 8001726:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800172a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800172c:	4b39      	ldr	r3, [pc, #228]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4936      	ldr	r1, [pc, #216]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
 800173e:	e008      	b.n	8001752 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2b80      	cmp	r3, #128	; 0x80
 8001744:	d105      	bne.n	8001752 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001746:	4b33      	ldr	r3, [pc, #204]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	4a32      	ldr	r2, [pc, #200]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 800174c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001750:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001752:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <HAL_RCC_ClockConfig+0x260>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d21d      	bcs.n	800179c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001760:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <HAL_RCC_ClockConfig+0x260>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f023 020f 	bic.w	r2, r3, #15
 8001768:	4929      	ldr	r1, [pc, #164]	; (8001810 <HAL_RCC_ClockConfig+0x260>)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	4313      	orrs	r3, r2
 800176e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001770:	f7ff fa40 	bl	8000bf4 <HAL_GetTick>
 8001774:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	e00a      	b.n	800178e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7ff fa3c 	bl	8000bf4 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e03b      	b.n	8001806 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <HAL_RCC_ClockConfig+0x260>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d1ed      	bne.n	8001778 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d008      	beq.n	80017ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4917      	ldr	r1, [pc, #92]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d009      	beq.n	80017da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	490f      	ldr	r1, [pc, #60]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017da:	f000 f825 	bl	8001828 <HAL_RCC_GetSysClockFreq>
 80017de:	4602      	mov	r2, r0
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_RCC_ClockConfig+0x264>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	490c      	ldr	r1, [pc, #48]	; (800181c <HAL_RCC_ClockConfig+0x26c>)
 80017ec:	5ccb      	ldrb	r3, [r1, r3]
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	fa22 f303 	lsr.w	r3, r2, r3
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <HAL_RCC_ClockConfig+0x270>)
 80017f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_RCC_ClockConfig+0x274>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff f9ac 	bl	8000b5c <HAL_InitTick>
 8001804:	4603      	mov	r3, r0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40022000 	.word	0x40022000
 8001814:	40021000 	.word	0x40021000
 8001818:	04c4b400 	.word	0x04c4b400
 800181c:	08004008 	.word	0x08004008
 8001820:	20000000 	.word	0x20000000
 8001824:	20000004 	.word	0x20000004

08001828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800182e:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b04      	cmp	r3, #4
 8001838:	d102      	bne.n	8001840 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800183a:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	e047      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001840:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	2b08      	cmp	r3, #8
 800184a:	d102      	bne.n	8001852 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800184c:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	e03e      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001852:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b0c      	cmp	r3, #12
 800185c:	d136      	bne.n	80018cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	091b      	lsrs	r3, r3, #4
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	3301      	adds	r3, #1
 8001874:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2b03      	cmp	r3, #3
 800187a:	d10c      	bne.n	8001896 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800187c:	4a1a      	ldr	r2, [pc, #104]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	fbb2 f3f3 	udiv	r3, r2, r3
 8001884:	4a16      	ldr	r2, [pc, #88]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001886:	68d2      	ldr	r2, [r2, #12]
 8001888:	0a12      	lsrs	r2, r2, #8
 800188a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800188e:	fb02 f303 	mul.w	r3, r2, r3
 8001892:	617b      	str	r3, [r7, #20]
      break;
 8001894:	e00c      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001896:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4a10      	ldr	r2, [pc, #64]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018a0:	68d2      	ldr	r2, [r2, #12]
 80018a2:	0a12      	lsrs	r2, r2, #8
 80018a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	617b      	str	r3, [r7, #20]
      break;
 80018ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0e5b      	lsrs	r3, r3, #25
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	3301      	adds	r3, #1
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	e001      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80018d0:	693b      	ldr	r3, [r7, #16]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	371c      	adds	r7, #28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	00f42400 	.word	0x00f42400
 80018e8:	007a1200 	.word	0x007a1200

080018ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018f2:	4b1e      	ldr	r3, [pc, #120]	; (800196c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3301      	adds	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	2b03      	cmp	r3, #3
 800190e:	d10c      	bne.n	800192a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001910:	4a17      	ldr	r2, [pc, #92]	; (8001970 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	fbb2 f3f3 	udiv	r3, r2, r3
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800191a:	68d2      	ldr	r2, [r2, #12]
 800191c:	0a12      	lsrs	r2, r2, #8
 800191e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001922:	fb02 f303 	mul.w	r3, r2, r3
 8001926:	617b      	str	r3, [r7, #20]
    break;
 8001928:	e00c      	b.n	8001944 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800192a:	4a12      	ldr	r2, [pc, #72]	; (8001974 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	4a0e      	ldr	r2, [pc, #56]	; (800196c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001934:	68d2      	ldr	r2, [r2, #12]
 8001936:	0a12      	lsrs	r2, r2, #8
 8001938:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800193c:	fb02 f303 	mul.w	r3, r2, r3
 8001940:	617b      	str	r3, [r7, #20]
    break;
 8001942:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0e5b      	lsrs	r3, r3, #25
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	3301      	adds	r3, #1
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	fbb2 f3f3 	udiv	r3, r2, r3
 800195c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800195e:	687b      	ldr	r3, [r7, #4]
}
 8001960:	4618      	mov	r0, r3
 8001962:	371c      	adds	r7, #28
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	40021000 	.word	0x40021000
 8001970:	007a1200 	.word	0x007a1200
 8001974:	00f42400 	.word	0x00f42400

08001978 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001980:	2300      	movs	r3, #0
 8001982:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001984:	2300      	movs	r3, #0
 8001986:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 8098 	beq.w	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199a:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10d      	bne.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	4b40      	ldr	r3, [pc, #256]	; (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	4a3f      	ldr	r2, [pc, #252]	; (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b0:	6593      	str	r3, [r2, #88]	; 0x58
 80019b2:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019be:	2301      	movs	r3, #1
 80019c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019c2:	4b3a      	ldr	r3, [pc, #232]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a39      	ldr	r2, [pc, #228]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019ce:	f7ff f911 	bl	8000bf4 <HAL_GetTick>
 80019d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019d4:	e009      	b.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d6:	f7ff f90d 	bl	8000bf4 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d902      	bls.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	74fb      	strb	r3, [r7, #19]
        break;
 80019e8:	e005      	b.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019ea:	4b30      	ldr	r3, [pc, #192]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0ef      	beq.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80019f6:	7cfb      	ldrb	r3, [r7, #19]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d159      	bne.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80019fc:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80019fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d01e      	beq.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d019      	beq.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a24:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2a:	4a1f      	ldr	r2, [pc, #124]	; (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a34:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3a:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001a44:	4a18      	ldr	r2, [pc, #96]	; (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d016      	beq.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a56:	f7ff f8cd 	bl	8000bf4 <HAL_GetTick>
 8001a5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a5c:	e00b      	b.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5e:	f7ff f8c9 	bl	8000bf4 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d902      	bls.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	74fb      	strb	r3, [r7, #19]
            break;
 8001a74:	e006      	b.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0ec      	beq.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001a84:	7cfb      	ldrb	r3, [r7, #19]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10b      	bne.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a98:	4903      	ldr	r1, [pc, #12]	; (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001aa2:	7cfb      	ldrb	r3, [r7, #19]
 8001aa4:	74bb      	strb	r3, [r7, #18]
 8001aa6:	e005      	b.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ab0:	7cfb      	ldrb	r3, [r7, #19]
 8001ab2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ab4:	7c7b      	ldrb	r3, [r7, #17]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d105      	bne.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aba:	4baf      	ldr	r3, [pc, #700]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	4aae      	ldr	r2, [pc, #696]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00a      	beq.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ad2:	4ba9      	ldr	r3, [pc, #676]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad8:	f023 0203 	bic.w	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	49a5      	ldr	r1, [pc, #660]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00a      	beq.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001af4:	4ba0      	ldr	r3, [pc, #640]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afa:	f023 020c 	bic.w	r2, r3, #12
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	499d      	ldr	r1, [pc, #628]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00a      	beq.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b16:	4b98      	ldr	r3, [pc, #608]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4994      	ldr	r1, [pc, #592]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00a      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001b38:	4b8f      	ldr	r3, [pc, #572]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	498c      	ldr	r1, [pc, #560]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00a      	beq.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001b5a:	4b87      	ldr	r3, [pc, #540]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	4983      	ldr	r1, [pc, #524]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0320 	and.w	r3, r3, #32
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00a      	beq.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b7c:	4b7e      	ldr	r3, [pc, #504]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	497b      	ldr	r1, [pc, #492]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00a      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b9e:	4b76      	ldr	r3, [pc, #472]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	4972      	ldr	r1, [pc, #456]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00a      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001bc0:	4b6d      	ldr	r3, [pc, #436]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	496a      	ldr	r1, [pc, #424]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00a      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001be2:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	4961      	ldr	r1, [pc, #388]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00a      	beq.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001c04:	4b5c      	ldr	r3, [pc, #368]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c0a:	f023 0203 	bic.w	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	4959      	ldr	r1, [pc, #356]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00a      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c26:	4b54      	ldr	r3, [pc, #336]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	4950      	ldr	r1, [pc, #320]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d015      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c48:	4b4b      	ldr	r3, [pc, #300]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4948      	ldr	r1, [pc, #288]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c66:	d105      	bne.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c68:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4a42      	ldr	r2, [pc, #264]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d015      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c80:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8e:	493a      	ldr	r1, [pc, #232]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c9e:	d105      	bne.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ca0:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	4a34      	ldr	r2, [pc, #208]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001caa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d015      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001cb8:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cbe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc6:	492c      	ldr	r1, [pc, #176]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd6:	d105      	bne.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4a26      	ldr	r2, [pc, #152]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001cde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ce2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d015      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cf0:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfe:	491e      	ldr	r1, [pc, #120]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d0e:	d105      	bne.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4a18      	ldr	r2, [pc, #96]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d015      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	4910      	ldr	r1, [pc, #64]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d46:	d105      	bne.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d018      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	4902      	ldr	r1, [pc, #8]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d76:	e001      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8001d78:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d84:	d105      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	4a20      	ldr	r2, [pc, #128]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d90:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d015      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dac:	4917      	ldr	r1, [pc, #92]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dbc:	d105      	bne.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d015      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001dd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ddc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de4:	4909      	ldr	r1, [pc, #36]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001df4:	d105      	bne.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001dfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e00:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001e02:	7cbb      	ldrb	r3, [r7, #18]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000

08001e10 <LL_GPIO_SetPinMode>:
{
 8001e10:	b480      	push	{r7}
 8001e12:	b08b      	sub	sp, #44	; 0x2c
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	613b      	str	r3, [r7, #16]
  return result;
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001e36:	2320      	movs	r3, #32
 8001e38:	e003      	b.n	8001e42 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2103      	movs	r1, #3
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	61fb      	str	r3, [r7, #28]
  return result;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001e64:	2320      	movs	r3, #32
 8001e66:	e003      	b.n	8001e70 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	601a      	str	r2, [r3, #0]
}
 8001e7e:	bf00      	nop
 8001e80:	372c      	adds	r7, #44	; 0x2c
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <LL_GPIO_SetPinOutputType>:
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b085      	sub	sp, #20
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	605a      	str	r2, [r3, #4]
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <LL_GPIO_SetPinSpeed>:
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b08b      	sub	sp, #44	; 0x2c
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	613b      	str	r3, [r7, #16]
  return result;
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	e003      	b.n	8001eec <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	2103      	movs	r1, #3
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	61fb      	str	r3, [r7, #28]
  return result;
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001f0e:	2320      	movs	r3, #32
 8001f10:	e003      	b.n	8001f1a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	431a      	orrs	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	609a      	str	r2, [r3, #8]
}
 8001f28:	bf00      	nop
 8001f2a:	372c      	adds	r7, #44	; 0x2c
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_GPIO_SetPinPull>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	b08b      	sub	sp, #44	; 0x2c
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	613b      	str	r3, [r7, #16]
  return result;
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001f5a:	2320      	movs	r3, #32
 8001f5c:	e003      	b.n	8001f66 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	fab3 f383 	clz	r3, r3
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2103      	movs	r1, #3
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	401a      	ands	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	61fb      	str	r3, [r7, #28]
  return result;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001f88:	2320      	movs	r3, #32
 8001f8a:	e003      	b.n	8001f94 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	60da      	str	r2, [r3, #12]
}
 8001fa2:	bf00      	nop
 8001fa4:	372c      	adds	r7, #44	; 0x2c
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <LL_GPIO_SetAFPin_0_7>:
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b08b      	sub	sp, #44	; 0x2c
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a1a      	ldr	r2, [r3, #32]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	613b      	str	r3, [r7, #16]
  return result;
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001fd4:	2320      	movs	r3, #32
 8001fd6:	e003      	b.n	8001fe0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	210f      	movs	r1, #15
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	401a      	ands	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	61fb      	str	r3, [r7, #28]
  return result;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002002:	2320      	movs	r3, #32
 8002004:	e003      	b.n	800200e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	431a      	orrs	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	621a      	str	r2, [r3, #32]
}
 800201c:	bf00      	nop
 800201e:	372c      	adds	r7, #44	; 0x2c
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_GPIO_SetAFPin_8_15>:
{
 8002028:	b480      	push	{r7}
 800202a:	b08b      	sub	sp, #44	; 0x2c
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	613b      	str	r3, [r7, #16]
  return result;
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002050:	2320      	movs	r3, #32
 8002052:	e003      	b.n	800205c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	210f      	movs	r1, #15
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	401a      	ands	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	61fb      	str	r3, [r7, #28]
  return result;
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002080:	2320      	movs	r3, #32
 8002082:	e003      	b.n	800208c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	431a      	orrs	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	625a      	str	r2, [r3, #36]	; 0x24
}
 800209a:	bf00      	nop
 800209c:	372c      	adds	r7, #44	; 0x2c
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b088      	sub	sp, #32
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	60fb      	str	r3, [r7, #12]
  return result;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <LL_GPIO_Init+0x26>
    return 32U;
 80020c8:	2320      	movs	r3, #32
 80020ca:	e003      	b.n	80020d4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80020d6:	e048      	b.n	800216a <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2101      	movs	r1, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d03a      	beq.n	8002164 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d003      	beq.n	80020fe <LL_GPIO_Init+0x58>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d10e      	bne.n	800211c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	461a      	mov	r2, r3
 8002104:	69b9      	ldr	r1, [r7, #24]
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff fed7 	bl	8001eba <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	6819      	ldr	r1, [r3, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	461a      	mov	r2, r3
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff feb7 	bl	8001e8a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	461a      	mov	r2, r3
 8002122:	69b9      	ldr	r1, [r7, #24]
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff05 	bl	8001f34 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d111      	bne.n	8002156 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2bff      	cmp	r3, #255	; 0xff
 8002136:	d807      	bhi.n	8002148 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	461a      	mov	r2, r3
 800213e:	69b9      	ldr	r1, [r7, #24]
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff34 	bl	8001fae <LL_GPIO_SetAFPin_0_7>
 8002146:	e006      	b.n	8002156 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	461a      	mov	r2, r3
 800214e:	69b9      	ldr	r1, [r7, #24]
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ff69 	bl	8002028 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	461a      	mov	r2, r3
 800215c:	69b9      	ldr	r1, [r7, #24]
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff fe56 	bl	8001e10 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	3301      	adds	r3, #1
 8002168:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1af      	bne.n	80020d8 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3720      	adds	r7, #32
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002188:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <LL_RCC_HSI_IsReady+0x24>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002194:	d101      	bne.n	800219a <LL_RCC_HSI_IsReady+0x16>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <LL_RCC_HSI_IsReady+0x18>
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000

080021ac <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <LL_RCC_LSE_IsReady+0x24>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d101      	bne.n	80021c2 <LL_RCC_LSE_IsReady+0x16>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <LL_RCC_LSE_IsReady+0x18>
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000

080021d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <LL_RCC_GetSysClkSource+0x18>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 030c 	and.w	r3, r3, #12
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000

080021f0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <LL_RCC_GetAHBPrescaler+0x18>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000

0800220c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000

08002228 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <LL_RCC_GetAPB2Prescaler+0x18>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000

08002244 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <LL_RCC_GetUSARTClockSource+0x24>)
 800224e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	401a      	ands	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	4313      	orrs	r3, r2
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	40021000 	.word	0x40021000

0800226c <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <LL_RCC_GetUARTClockSource+0x24>)
 8002276:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	401a      	ands	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	4313      	orrs	r3, r2
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	40021000 	.word	0x40021000

08002294 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <LL_RCC_PLL_GetMainSource+0x18>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0303 	and.w	r3, r3, #3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000

080022b0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <LL_RCC_PLL_GetN+0x18>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	40021000 	.word	0x40021000

080022cc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <LL_RCC_PLL_GetR+0x18>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000

080022e8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <LL_RCC_PLL_GetDivider+0x18>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000

08002304 <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b03      	cmp	r3, #3
 8002314:	d132      	bne.n	800237c <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ff94 	bl	8002244 <LL_RCC_GetUSARTClockSource>
 800231c:	4603      	mov	r3, r0
 800231e:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8002322:	d016      	beq.n	8002352 <LL_RCC_GetUSARTClockFreq+0x4e>
 8002324:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8002328:	d81c      	bhi.n	8002364 <LL_RCC_GetUSARTClockFreq+0x60>
 800232a:	4a52      	ldr	r2, [pc, #328]	; (8002474 <LL_RCC_GetUSARTClockFreq+0x170>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d003      	beq.n	8002338 <LL_RCC_GetUSARTClockFreq+0x34>
 8002330:	4a51      	ldr	r2, [pc, #324]	; (8002478 <LL_RCC_GetUSARTClockFreq+0x174>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d004      	beq.n	8002340 <LL_RCC_GetUSARTClockFreq+0x3c>
 8002336:	e015      	b.n	8002364 <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002338:	f000 f934 	bl	80025a4 <RCC_GetSystemClockFreq>
 800233c:	60f8      	str	r0, [r7, #12]
        break;
 800233e:	e094      	b.n	800246a <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002340:	f7ff ff20 	bl	8002184 <LL_RCC_HSI_IsReady>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8082 	beq.w	8002450 <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 800234c:	4b4b      	ldr	r3, [pc, #300]	; (800247c <LL_RCC_GetUSARTClockFreq+0x178>)
 800234e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002350:	e07e      	b.n	8002450 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002352:	f7ff ff2b 	bl	80021ac <LL_RCC_LSE_IsReady>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d07b      	beq.n	8002454 <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 800235c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002360:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002362:	e077      	b.n	8002454 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002364:	f000 f91e 	bl	80025a4 <RCC_GetSystemClockFreq>
 8002368:	4603      	mov	r3, r0
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f940 	bl	80025f0 <RCC_GetHCLKClockFreq>
 8002370:	4603      	mov	r3, r0
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f96a 	bl	800264c <RCC_GetPCLK2ClockFreq>
 8002378:	60f8      	str	r0, [r7, #12]
        break;
 800237a:	e076      	b.n	800246a <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b0c      	cmp	r3, #12
 8002380:	d131      	bne.n	80023e6 <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff ff5e 	bl	8002244 <LL_RCC_GetUSARTClockSource>
 8002388:	4603      	mov	r3, r0
 800238a:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800238e:	d015      	beq.n	80023bc <LL_RCC_GetUSARTClockFreq+0xb8>
 8002390:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8002394:	d81b      	bhi.n	80023ce <LL_RCC_GetUSARTClockFreq+0xca>
 8002396:	4a3a      	ldr	r2, [pc, #232]	; (8002480 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d003      	beq.n	80023a4 <LL_RCC_GetUSARTClockFreq+0xa0>
 800239c:	4a39      	ldr	r2, [pc, #228]	; (8002484 <LL_RCC_GetUSARTClockFreq+0x180>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d004      	beq.n	80023ac <LL_RCC_GetUSARTClockFreq+0xa8>
 80023a2:	e014      	b.n	80023ce <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80023a4:	f000 f8fe 	bl	80025a4 <RCC_GetSystemClockFreq>
 80023a8:	60f8      	str	r0, [r7, #12]
        break;
 80023aa:	e05e      	b.n	800246a <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80023ac:	f7ff feea 	bl	8002184 <LL_RCC_HSI_IsReady>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d050      	beq.n	8002458 <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 80023b6:	4b31      	ldr	r3, [pc, #196]	; (800247c <LL_RCC_GetUSARTClockFreq+0x178>)
 80023b8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80023ba:	e04d      	b.n	8002458 <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80023bc:	f7ff fef6 	bl	80021ac <LL_RCC_LSE_IsReady>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d04a      	beq.n	800245c <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 80023c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ca:	60fb      	str	r3, [r7, #12]
        }
        break;
 80023cc:	e046      	b.n	800245c <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80023ce:	f000 f8e9 	bl	80025a4 <RCC_GetSystemClockFreq>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f90b 	bl	80025f0 <RCC_GetHCLKClockFreq>
 80023da:	4603      	mov	r3, r0
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 f91f 	bl	8002620 <RCC_GetPCLK1ClockFreq>
 80023e2:	60f8      	str	r0, [r7, #12]
        break;
 80023e4:	e041      	b.n	800246a <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b30      	cmp	r3, #48	; 0x30
 80023ea:	d139      	bne.n	8002460 <LL_RCC_GetUSARTClockFreq+0x15c>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff ff29 	bl	8002244 <LL_RCC_GetUSARTClockSource>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80023f8:	d015      	beq.n	8002426 <LL_RCC_GetUSARTClockFreq+0x122>
 80023fa:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80023fe:	d81b      	bhi.n	8002438 <LL_RCC_GetUSARTClockFreq+0x134>
 8002400:	4a21      	ldr	r2, [pc, #132]	; (8002488 <LL_RCC_GetUSARTClockFreq+0x184>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d003      	beq.n	800240e <LL_RCC_GetUSARTClockFreq+0x10a>
 8002406:	4a21      	ldr	r2, [pc, #132]	; (800248c <LL_RCC_GetUSARTClockFreq+0x188>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <LL_RCC_GetUSARTClockFreq+0x112>
 800240c:	e014      	b.n	8002438 <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800240e:	f000 f8c9 	bl	80025a4 <RCC_GetSystemClockFreq>
 8002412:	60f8      	str	r0, [r7, #12]
          break;
 8002414:	e029      	b.n	800246a <LL_RCC_GetUSARTClockFreq+0x166>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8002416:	f7ff feb5 	bl	8002184 <LL_RCC_HSI_IsReady>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d021      	beq.n	8002464 <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = HSI_VALUE;
 8002420:	4b16      	ldr	r3, [pc, #88]	; (800247c <LL_RCC_GetUSARTClockFreq+0x178>)
 8002422:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002424:	e01e      	b.n	8002464 <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8002426:	f7ff fec1 	bl	80021ac <LL_RCC_LSE_IsReady>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d01b      	beq.n	8002468 <LL_RCC_GetUSARTClockFreq+0x164>
          {
            usart_frequency = LSE_VALUE;
 8002430:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002434:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002436:	e017      	b.n	8002468 <LL_RCC_GetUSARTClockFreq+0x164>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002438:	f000 f8b4 	bl	80025a4 <RCC_GetSystemClockFreq>
 800243c:	4603      	mov	r3, r0
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f8d6 	bl	80025f0 <RCC_GetHCLKClockFreq>
 8002444:	4603      	mov	r3, r0
 8002446:	4618      	mov	r0, r3
 8002448:	f000 f8ea 	bl	8002620 <RCC_GetPCLK1ClockFreq>
 800244c:	60f8      	str	r0, [r7, #12]
          break;
 800244e:	e00c      	b.n	800246a <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8002450:	bf00      	nop
 8002452:	e00a      	b.n	800246a <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8002454:	bf00      	nop
 8002456:	e008      	b.n	800246a <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8002458:	bf00      	nop
 800245a:	e006      	b.n	800246a <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 800245c:	bf00      	nop
 800245e:	e004      	b.n	800246a <LL_RCC_GetUSARTClockFreq+0x166>
      }
    }
 8002460:	bf00      	nop
 8002462:	e002      	b.n	800246a <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 8002464:	bf00      	nop
 8002466:	e000      	b.n	800246a <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 8002468:	bf00      	nop
  }
  return usart_frequency;
 800246a:	68fb      	ldr	r3, [r7, #12]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	00030001 	.word	0x00030001
 8002478:	00030002 	.word	0x00030002
 800247c:	00f42400 	.word	0x00f42400
 8002480:	000c0004 	.word	0x000c0004
 8002484:	000c0008 	.word	0x000c0008
 8002488:	00300010 	.word	0x00300010
 800248c:	00300020 	.word	0x00300020

08002490 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2bc0      	cmp	r3, #192	; 0xc0
 80024a0:	d131      	bne.n	8002506 <LL_RCC_GetUARTClockFreq+0x76>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff fee2 	bl	800226c <LL_RCC_GetUARTClockSource>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80024ae:	d015      	beq.n	80024dc <LL_RCC_GetUARTClockFreq+0x4c>
 80024b0:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80024b4:	d81b      	bhi.n	80024ee <LL_RCC_GetUARTClockFreq+0x5e>
 80024b6:	4a36      	ldr	r2, [pc, #216]	; (8002590 <LL_RCC_GetUARTClockFreq+0x100>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d003      	beq.n	80024c4 <LL_RCC_GetUARTClockFreq+0x34>
 80024bc:	4a35      	ldr	r2, [pc, #212]	; (8002594 <LL_RCC_GetUARTClockFreq+0x104>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d004      	beq.n	80024cc <LL_RCC_GetUARTClockFreq+0x3c>
 80024c2:	e014      	b.n	80024ee <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80024c4:	f000 f86e 	bl	80025a4 <RCC_GetSystemClockFreq>
 80024c8:	60f8      	str	r0, [r7, #12]
        break;
 80024ca:	e021      	b.n	8002510 <LL_RCC_GetUARTClockFreq+0x80>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80024cc:	f7ff fe5a 	bl	8002184 <LL_RCC_HSI_IsReady>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d019      	beq.n	800250a <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = HSI_VALUE;
 80024d6:	4b30      	ldr	r3, [pc, #192]	; (8002598 <LL_RCC_GetUARTClockFreq+0x108>)
 80024d8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80024da:	e016      	b.n	800250a <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80024dc:	f7ff fe66 	bl	80021ac <LL_RCC_LSE_IsReady>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d013      	beq.n	800250e <LL_RCC_GetUARTClockFreq+0x7e>
        {
          uart_frequency = LSE_VALUE;
 80024e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024ea:	60fb      	str	r3, [r7, #12]
        }
        break;
 80024ec:	e00f      	b.n	800250e <LL_RCC_GetUARTClockFreq+0x7e>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80024ee:	f000 f859 	bl	80025a4 <RCC_GetSystemClockFreq>
 80024f2:	4603      	mov	r3, r0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 f87b 	bl	80025f0 <RCC_GetHCLKClockFreq>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 f88f 	bl	8002620 <RCC_GetPCLK1ClockFreq>
 8002502:	60f8      	str	r0, [r7, #12]
        break;
 8002504:	e004      	b.n	8002510 <LL_RCC_GetUARTClockFreq+0x80>
    }
  }
 8002506:	bf00      	nop
 8002508:	e002      	b.n	8002510 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 800250a:	bf00      	nop
 800250c:	e000      	b.n	8002510 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 800250e:	bf00      	nop

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002516:	d131      	bne.n	800257c <LL_RCC_GetUARTClockFreq+0xec>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff fea7 	bl	800226c <LL_RCC_GetUARTClockSource>
 800251e:	4603      	mov	r3, r0
 8002520:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8002524:	d015      	beq.n	8002552 <LL_RCC_GetUARTClockFreq+0xc2>
 8002526:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800252a:	d81b      	bhi.n	8002564 <LL_RCC_GetUARTClockFreq+0xd4>
 800252c:	4a1b      	ldr	r2, [pc, #108]	; (800259c <LL_RCC_GetUARTClockFreq+0x10c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d003      	beq.n	800253a <LL_RCC_GetUARTClockFreq+0xaa>
 8002532:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <LL_RCC_GetUARTClockFreq+0x110>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d004      	beq.n	8002542 <LL_RCC_GetUARTClockFreq+0xb2>
 8002538:	e014      	b.n	8002564 <LL_RCC_GetUARTClockFreq+0xd4>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800253a:	f000 f833 	bl	80025a4 <RCC_GetSystemClockFreq>
 800253e:	60f8      	str	r0, [r7, #12]
        break;
 8002540:	e021      	b.n	8002586 <LL_RCC_GetUARTClockFreq+0xf6>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002542:	f7ff fe1f 	bl	8002184 <LL_RCC_HSI_IsReady>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d019      	beq.n	8002580 <LL_RCC_GetUARTClockFreq+0xf0>
        {
          uart_frequency = HSI_VALUE;
 800254c:	4b12      	ldr	r3, [pc, #72]	; (8002598 <LL_RCC_GetUARTClockFreq+0x108>)
 800254e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002550:	e016      	b.n	8002580 <LL_RCC_GetUARTClockFreq+0xf0>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002552:	f7ff fe2b 	bl	80021ac <LL_RCC_LSE_IsReady>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d013      	beq.n	8002584 <LL_RCC_GetUARTClockFreq+0xf4>
        {
          uart_frequency = LSE_VALUE;
 800255c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002560:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002562:	e00f      	b.n	8002584 <LL_RCC_GetUARTClockFreq+0xf4>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002564:	f000 f81e 	bl	80025a4 <RCC_GetSystemClockFreq>
 8002568:	4603      	mov	r3, r0
 800256a:	4618      	mov	r0, r3
 800256c:	f000 f840 	bl	80025f0 <RCC_GetHCLKClockFreq>
 8002570:	4603      	mov	r3, r0
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f854 	bl	8002620 <RCC_GetPCLK1ClockFreq>
 8002578:	60f8      	str	r0, [r7, #12]
        break;
 800257a:	e004      	b.n	8002586 <LL_RCC_GetUARTClockFreq+0xf6>
    }
  }
 800257c:	bf00      	nop
 800257e:	e002      	b.n	8002586 <LL_RCC_GetUARTClockFreq+0xf6>
        break;
 8002580:	bf00      	nop
 8002582:	e000      	b.n	8002586 <LL_RCC_GetUARTClockFreq+0xf6>
        break;
 8002584:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8002586:	68fb      	ldr	r3, [r7, #12]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	00c00040 	.word	0x00c00040
 8002594:	00c00080 	.word	0x00c00080
 8002598:	00f42400 	.word	0x00f42400
 800259c:	03000100 	.word	0x03000100
 80025a0:	03000200 	.word	0x03000200

080025a4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80025aa:	f7ff fe13 	bl	80021d4 <LL_RCC_GetSysClkSource>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b0c      	cmp	r3, #12
 80025b2:	d00c      	beq.n	80025ce <RCC_GetSystemClockFreq+0x2a>
 80025b4:	2b0c      	cmp	r3, #12
 80025b6:	d80e      	bhi.n	80025d6 <RCC_GetSystemClockFreq+0x32>
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d002      	beq.n	80025c2 <RCC_GetSystemClockFreq+0x1e>
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d003      	beq.n	80025c8 <RCC_GetSystemClockFreq+0x24>
 80025c0:	e009      	b.n	80025d6 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <RCC_GetSystemClockFreq+0x44>)
 80025c4:	607b      	str	r3, [r7, #4]
      break;
 80025c6:	e009      	b.n	80025dc <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <RCC_GetSystemClockFreq+0x48>)
 80025ca:	607b      	str	r3, [r7, #4]
      break;
 80025cc:	e006      	b.n	80025dc <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80025ce:	f000 f853 	bl	8002678 <RCC_PLL_GetFreqDomain_SYS>
 80025d2:	6078      	str	r0, [r7, #4]
      break;
 80025d4:	e002      	b.n	80025dc <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 80025d6:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <RCC_GetSystemClockFreq+0x44>)
 80025d8:	607b      	str	r3, [r7, #4]
      break;
 80025da:	bf00      	nop
  }

  return frequency;
 80025dc:	687b      	ldr	r3, [r7, #4]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	00f42400 	.word	0x00f42400
 80025ec:	007a1200 	.word	0x007a1200

080025f0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80025f8:	f7ff fdfa 	bl	80021f0 <LL_RCC_GetAHBPrescaler>
 80025fc:	4603      	mov	r3, r0
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	4a05      	ldr	r2, [pc, #20]	; (800261c <RCC_GetHCLKClockFreq+0x2c>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	08004008 	.word	0x08004008

08002620 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002628:	f7ff fdf0 	bl	800220c <LL_RCC_GetAPB1Prescaler>
 800262c:	4603      	mov	r3, r0
 800262e:	0a1b      	lsrs	r3, r3, #8
 8002630:	4a05      	ldr	r2, [pc, #20]	; (8002648 <RCC_GetPCLK1ClockFreq+0x28>)
 8002632:	5cd3      	ldrb	r3, [r2, r3]
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	fa22 f303 	lsr.w	r3, r2, r3
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	08004018 	.word	0x08004018

0800264c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002654:	f7ff fde8 	bl	8002228 <LL_RCC_GetAPB2Prescaler>
 8002658:	4603      	mov	r3, r0
 800265a:	0adb      	lsrs	r3, r3, #11
 800265c:	4a05      	ldr	r2, [pc, #20]	; (8002674 <RCC_GetPCLK2ClockFreq+0x28>)
 800265e:	5cd3      	ldrb	r3, [r2, r3]
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	fa22 f303 	lsr.w	r3, r2, r3
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	08004018 	.word	0x08004018

08002678 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800267e:	f7ff fe09 	bl	8002294 <LL_RCC_PLL_GetMainSource>
 8002682:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d003      	beq.n	8002692 <RCC_PLL_GetFreqDomain_SYS+0x1a>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d003      	beq.n	8002698 <RCC_PLL_GetFreqDomain_SYS+0x20>
 8002690:	e005      	b.n	800269e <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002692:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002694:	607b      	str	r3, [r7, #4]
      break;
 8002696:	e005      	b.n	80026a4 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002698:	4b10      	ldr	r3, [pc, #64]	; (80026dc <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800269a:	607b      	str	r3, [r7, #4]
      break;
 800269c:	e002      	b.n	80026a4 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80026a0:	607b      	str	r3, [r7, #4]
      break;
 80026a2:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80026a4:	f7ff fe04 	bl	80022b0 <LL_RCC_PLL_GetN>
 80026a8:	4602      	mov	r2, r0
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	fb03 f402 	mul.w	r4, r3, r2
 80026b0:	f7ff fe1a 	bl	80022e8 <LL_RCC_PLL_GetDivider>
 80026b4:	4603      	mov	r3, r0
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	3301      	adds	r3, #1
 80026ba:	fbb4 f4f3 	udiv	r4, r4, r3
 80026be:	f7ff fe05 	bl	80022cc <LL_RCC_PLL_GetR>
 80026c2:	4603      	mov	r3, r0
 80026c4:	0e5b      	lsrs	r3, r3, #25
 80026c6:	3301      	adds	r3, #1
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd90      	pop	{r4, r7, pc}
 80026d6:	bf00      	nop
 80026d8:	00f42400 	.word	0x00f42400
 80026dc:	007a1200 	.word	0x007a1200

080026e0 <LL_USART_IsEnabled>:
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <LL_USART_IsEnabled+0x18>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <LL_USART_IsEnabled+0x1a>
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <LL_USART_SetPrescaler>:
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	f023 030f 	bic.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	b292      	uxth	r2, r2
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <LL_USART_SetStopBitsLength>:
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	605a      	str	r2, [r3, #4]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_USART_SetHWFlowCtrl>:
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	609a      	str	r2, [r3, #8]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <LL_USART_SetBaudRate>:
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b0b      	cmp	r3, #11
 800278e:	d83c      	bhi.n	800280a <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d039      	beq.n	800280a <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800279c:	d122      	bne.n	80027e4 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	4b1c      	ldr	r3, [pc, #112]	; (8002818 <LL_USART_SetBaudRate+0x9c>)
 80027a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b0:	005a      	lsls	r2, r3, #1
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	085b      	lsrs	r3, r3, #1
 80027b6:	441a      	add	r2, r3
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80027be:	b29b      	uxth	r3, r3
 80027c0:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	085b      	lsrs	r3, r3, #1
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	60da      	str	r2, [r3, #12]
}
 80027e2:	e012      	b.n	800280a <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <LL_USART_SetBaudRate+0x9c>)
 80027ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	085b      	lsrs	r3, r3, #1
 80027fa:	441a      	add	r2, r3
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002802:	b29b      	uxth	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	60da      	str	r2, [r3, #12]
}
 800280a:	bf00      	nop
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	08004020 	.word	0x08004020

0800281c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af02      	add	r7, sp, #8
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800282a:	2300      	movs	r3, #0
 800282c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff ff56 	bl	80026e0 <LL_USART_IsEnabled>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d165      	bne.n	8002906 <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4b34      	ldr	r3, [pc, #208]	; (8002910 <LL_USART_Init+0xf4>)
 8002840:	4013      	ands	r3, r2
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	6891      	ldr	r1, [r2, #8]
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	6912      	ldr	r2, [r2, #16]
 800284a:	4311      	orrs	r1, r2
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	6952      	ldr	r2, [r2, #20]
 8002850:	4311      	orrs	r1, r2
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	69d2      	ldr	r2, [r2, #28]
 8002856:	430a      	orrs	r2, r1
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	4619      	mov	r1, r3
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff62 	bl	800272e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	4619      	mov	r1, r3
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ff6f 	bl	8002754 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a26      	ldr	r2, [pc, #152]	; (8002914 <LL_USART_Init+0xf8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d104      	bne.n	8002888 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800287e:	2003      	movs	r0, #3
 8002880:	f7ff fd40 	bl	8002304 <LL_RCC_GetUSARTClockFreq>
 8002884:	60b8      	str	r0, [r7, #8]
 8002886:	e023      	b.n	80028d0 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a23      	ldr	r2, [pc, #140]	; (8002918 <LL_USART_Init+0xfc>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d104      	bne.n	800289a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002890:	200c      	movs	r0, #12
 8002892:	f7ff fd37 	bl	8002304 <LL_RCC_GetUSARTClockFreq>
 8002896:	60b8      	str	r0, [r7, #8]
 8002898:	e01a      	b.n	80028d0 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART3)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a1f      	ldr	r2, [pc, #124]	; (800291c <LL_USART_Init+0x100>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d104      	bne.n	80028ac <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80028a2:	2030      	movs	r0, #48	; 0x30
 80028a4:	f7ff fd2e 	bl	8002304 <LL_RCC_GetUSARTClockFreq>
 80028a8:	60b8      	str	r0, [r7, #8]
 80028aa:	e011      	b.n	80028d0 <LL_USART_Init+0xb4>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <LL_USART_Init+0x104>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d104      	bne.n	80028be <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80028b4:	20c0      	movs	r0, #192	; 0xc0
 80028b6:	f7ff fdeb 	bl	8002490 <LL_RCC_GetUARTClockFreq>
 80028ba:	60b8      	str	r0, [r7, #8]
 80028bc:	e008      	b.n	80028d0 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a18      	ldr	r2, [pc, #96]	; (8002924 <LL_USART_Init+0x108>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d104      	bne.n	80028d0 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80028c6:	f44f 7040 	mov.w	r0, #768	; 0x300
 80028ca:	f7ff fde1 	bl	8002490 <LL_RCC_GetUARTClockFreq>
 80028ce:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d011      	beq.n	80028fa <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00d      	beq.n	80028fa <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 80028de:	2300      	movs	r3, #0
 80028e0:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	69d9      	ldr	r1, [r3, #28]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	460b      	mov	r3, r1
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff41 	bl	800277c <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4619      	mov	r1, r3
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff00 	bl	8002706 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002906:	7bfb      	ldrb	r3, [r7, #15]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	efff69f3 	.word	0xefff69f3
 8002914:	40013800 	.word	0x40013800
 8002918:	40004400 	.word	0x40004400
 800291c:	40004800 	.word	0x40004800
 8002920:	40004c00 	.word	0x40004c00
 8002924:	40005000 	.word	0x40005000

08002928 <LL_GPIO_IsOutputPinSet>:
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->ODR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	4013      	ands	r3, r2
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d101      	bne.n	8002944 <LL_GPIO_IsOutputPinSet+0x1c>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <LL_GPIO_IsOutputPinSet+0x1e>
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_GPIO_SetOutputPin>:
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	619a      	str	r2, [r3, #24]
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <LL_GPIO_ResetOutputPin>:
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <LED_init>:


// Funkcija LED_init() poskrbi, da se pravilno inicializira LED_group_handle_t struktura.
// Poskrbi tudi, da se določi začetno stanje LEDic.
void LED_init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
		// Uporabite makroje "GPIOn" in "LL_GPIO_PIN_n" iz nizko-nivojske LL knjižnice.
		// Spodaj imate primer za inicializacijo LEDice LED0.


		// LEDice na portu F
		LED_group.LEDs[LED0].pin = LL_GPIO_PIN_2;
 8002990:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <LED_init+0x70>)
 8002992:	2204      	movs	r2, #4
 8002994:	605a      	str	r2, [r3, #4]
		LED_group.LEDs[LED0].port = GPIOF;
 8002996:	4b19      	ldr	r3, [pc, #100]	; (80029fc <LED_init+0x70>)
 8002998:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <LED_init+0x74>)
 800299a:	601a      	str	r2, [r3, #0]

		LED_group.LEDs[LED1].pin = LL_GPIO_PIN_3;
 800299c:	4b17      	ldr	r3, [pc, #92]	; (80029fc <LED_init+0x70>)
 800299e:	2208      	movs	r2, #8
 80029a0:	60da      	str	r2, [r3, #12]
		LED_group.LEDs[LED1].port = GPIOF;
 80029a2:	4b16      	ldr	r3, [pc, #88]	; (80029fc <LED_init+0x70>)
 80029a4:	4a16      	ldr	r2, [pc, #88]	; (8002a00 <LED_init+0x74>)
 80029a6:	609a      	str	r2, [r3, #8]

		LED_group.LEDs[LED2].pin = LL_GPIO_PIN_4;
 80029a8:	4b14      	ldr	r3, [pc, #80]	; (80029fc <LED_init+0x70>)
 80029aa:	2210      	movs	r2, #16
 80029ac:	615a      	str	r2, [r3, #20]
		LED_group.LEDs[LED2].port = GPIOF;
 80029ae:	4b13      	ldr	r3, [pc, #76]	; (80029fc <LED_init+0x70>)
 80029b0:	4a13      	ldr	r2, [pc, #76]	; (8002a00 <LED_init+0x74>)
 80029b2:	611a      	str	r2, [r3, #16]

		LED_group.LEDs[LED3].pin = LL_GPIO_PIN_5;
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <LED_init+0x70>)
 80029b6:	2220      	movs	r2, #32
 80029b8:	61da      	str	r2, [r3, #28]
		LED_group.LEDs[LED3].port = GPIOF;
 80029ba:	4b10      	ldr	r3, [pc, #64]	; (80029fc <LED_init+0x70>)
 80029bc:	4a10      	ldr	r2, [pc, #64]	; (8002a00 <LED_init+0x74>)
 80029be:	619a      	str	r2, [r3, #24]
	//-----------------------------------------------------------
		// LEDice na portu C
		LED_group.LEDs[LED4].pin = LL_GPIO_PIN_0;
 80029c0:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <LED_init+0x70>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24
		LED_group.LEDs[LED4].port = GPIOC;
 80029c6:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <LED_init+0x70>)
 80029c8:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <LED_init+0x78>)
 80029ca:	621a      	str	r2, [r3, #32]

		LED_group.LEDs[LED5].pin = LL_GPIO_PIN_1;
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <LED_init+0x70>)
 80029ce:	2202      	movs	r2, #2
 80029d0:	62da      	str	r2, [r3, #44]	; 0x2c
		LED_group.LEDs[LED5].port = GPIOC;
 80029d2:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <LED_init+0x70>)
 80029d4:	4a0b      	ldr	r2, [pc, #44]	; (8002a04 <LED_init+0x78>)
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28

		LED_group.LEDs[LED6].pin = LL_GPIO_PIN_2;
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <LED_init+0x70>)
 80029da:	2204      	movs	r2, #4
 80029dc:	635a      	str	r2, [r3, #52]	; 0x34
		LED_group.LEDs[LED6].port = GPIOC;
 80029de:	4b07      	ldr	r3, [pc, #28]	; (80029fc <LED_init+0x70>)
 80029e0:	4a08      	ldr	r2, [pc, #32]	; (8002a04 <LED_init+0x78>)
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30

		LED_group.LEDs[LED7].pin = LL_GPIO_PIN_3;
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <LED_init+0x70>)
 80029e6:	2208      	movs	r2, #8
 80029e8:	63da      	str	r2, [r3, #60]	; 0x3c
		LED_group.LEDs[LED7].port = GPIOC;
 80029ea:	4b04      	ldr	r3, [pc, #16]	; (80029fc <LED_init+0x70>)
 80029ec:	4a05      	ldr	r2, [pc, #20]	; (8002a04 <LED_init+0x78>)
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38

	// 2. Nastavite začetno stanje LEDic (t.i. privzeto stanje (angl. default state)).

		// Na začetku po inicializaciji želimo imeti vse LEDice ugasnjene.
		// Uporabi se lahko kar LEDs_write() funkcijo.
		LEDs_write(0x00);
 80029f0:	2000      	movs	r0, #0
 80029f2:	f000 f895 	bl	8002b20 <LEDs_write>

}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	2000009c 	.word	0x2000009c
 8002a00:	48001400 	.word	0x48001400
 8002a04:	48000800 	.word	0x48000800

08002a08 <LED_on>:

// Funkcija LED_on() prižge tisto LEDico v skupini, ki jo specificira
// vrednost "LEDn". Vrednost "LEDn" pa je lahko eden od elementov iz
// seznama naštevnega tipa LEDs_enum_t.
void LED_on(LEDs_enum_t LEDn)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
	// Za prižig LEDice uporabimo sledečo nizko-nivojsko LL funkcijo:
	//
	//		void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
	//
	LL_GPIO_SetOutputPin(LED_group.LEDs[LEDn].port, LED_group.LEDs[LEDn].pin );
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	4a07      	ldr	r2, [pc, #28]	; (8002a34 <LED_on+0x2c>)
 8002a16:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	4905      	ldr	r1, [pc, #20]	; (8002a34 <LED_on+0x2c>)
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	440b      	add	r3, r1
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4619      	mov	r1, r3
 8002a26:	4610      	mov	r0, r2
 8002a28:	f7ff ff93 	bl	8002952 <LL_GPIO_SetOutputPin>
	// zamenjate z npr. LED3 iz seznama naštevnega tipa; in tako boste s klicem zgornje
	// funkcijo postavili na visoko stanje prav tisti digitalni izhod, ki pripada
	// portu in pinu LEDice LED3.


}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	2000009c 	.word	0x2000009c

08002a38 <LED_off>:

// Funkcija LED_on() ugasne tisto LEDico v skupini, ki jo specificira
// vrednost "LEDn". Vrednost "LEDn" pa je lahko eden od elementov iz
// seznama naštevnega tipa LEDs_enum_t.
void LED_off(LEDs_enum_t LEDn)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin( LED_group.LEDs[LEDn].port, LED_group.LEDs[LEDn].pin );
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	4a07      	ldr	r2, [pc, #28]	; (8002a64 <LED_off+0x2c>)
 8002a46:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	4905      	ldr	r1, [pc, #20]	; (8002a64 <LED_off+0x2c>)
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4619      	mov	r1, r3
 8002a56:	4610      	mov	r0, r2
 8002a58:	f7ff ff89 	bl	800296e <LL_GPIO_ResetOutputPin>
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	2000009c 	.word	0x2000009c

08002a68 <LEDs_on>:
// S funkcijo "LEDs_on()" prižgemo le tiste LEDice v LED skupini, ki jih določa vhodni argument
// bitna maska "LED_bitmask": če je postavljen i-ti bit maske "LED_bitmask", potem prižgemo i-to
// LEDico v skupini; sicer ne spreminjamo stanja LEDice. Pri tem se upošteva enak vrstni red LEDic,
// kot je bil definiran v naštevnem tipu LEDs_enum_t.
void LEDs_on(uint8_t LED_bitmask)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]

	// Pomožna bitna maska, s katero bomo "brali" vrednosti posameznih bitov
	// vhodnega argumenta "LED_bitmask" od LSB bita proti MSB bitu.
	uint8_t bitmask = 0x01;
 8002a72:	2301      	movs	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]

	// S "for" zanko se sprehodimo preko vseh LEDic v sistemu.
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8002a76:	2300      	movs	r3, #0
 8002a78:	73bb      	strb	r3, [r7, #14]
 8002a7a:	e018      	b.n	8002aae <LEDs_on+0x46>
	{
		// S pomočjo pomožne maske "bitmask" preberemo stanje i-tega bita v vhodnem argumentu "LED_bitmask".
		if ( LED_bitmask & bitmask )
 8002a7c:	79fa      	ldrb	r2, [r7, #7]
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	4013      	ands	r3, r2
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00c      	beq.n	8002aa2 <LEDs_on+0x3a>
		{
			// In če je i-ti bit v vhodnem argumentu "LED_bitmask" postavljen, prižgemo i-to LEDico.
			LL_GPIO_SetOutputPin( LED_group.LEDs[i].port, LED_group.LEDs[i].pin );
 8002a88:	7bbb      	ldrb	r3, [r7, #14]
 8002a8a:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <LEDs_on+0x58>)
 8002a8c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002a90:	7bbb      	ldrb	r3, [r7, #14]
 8002a92:	490b      	ldr	r1, [pc, #44]	; (8002ac0 <LEDs_on+0x58>)
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	440b      	add	r3, r1
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	f7ff ff58 	bl	8002952 <LL_GPIO_SetOutputPin>
		}

		// In nato si pripravimo novo pomožno bitno masko za branje naslednjega bita v vhodnem argumentu.
		bitmask <<= 1;
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8002aa8:	7bbb      	ldrb	r3, [r7, #14]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	73bb      	strb	r3, [r7, #14]
 8002aae:	7bbb      	ldrb	r3, [r7, #14]
 8002ab0:	2b07      	cmp	r3, #7
 8002ab2:	d9e3      	bls.n	8002a7c <LEDs_on+0x14>
	}
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	2000009c 	.word	0x2000009c

08002ac4 <LEDs_off>:
// S funkcijo "LEDs_off()" ugašamo le tiste LEDice v LED skupini, ki jih določa vhodni argument
// bitna maska "LED_bitmask": če je postavljen i-ti bit maske "LED_bitmask", potem ugasnemo i-to
// LEDico v skupini; sicer ne spreminjamo stanja LEDice. Pri tem se upošteva enak vrstni red LEDic,
// kot je bil definiran v naštevnem tipu LEDs_enum_t.
void LEDs_off(uint8_t LED_bitmask)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
	uint8_t bitmask = 0x01;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	73bb      	strb	r3, [r7, #14]
 8002ad6:	e018      	b.n	8002b0a <LEDs_off+0x46>
		{
			// S pomočjo pomožne maske "bitmask" preberemo stanje i-tega bita v vhodnem argumentu "LED_bitmask".
			if ( LED_bitmask & bitmask )
 8002ad8:	79fa      	ldrb	r2, [r7, #7]
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	4013      	ands	r3, r2
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00c      	beq.n	8002afe <LEDs_off+0x3a>
			{
				// In če je i-ti bit v vhodnem argumentu "LED_bitmask" postavljen, prižgemo i-to LEDico.
				LL_GPIO_ResetOutputPin( LED_group.LEDs[i].port, LED_group.LEDs[i].pin );
 8002ae4:	7bbb      	ldrb	r3, [r7, #14]
 8002ae6:	4a0d      	ldr	r2, [pc, #52]	; (8002b1c <LEDs_off+0x58>)
 8002ae8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002aec:	7bbb      	ldrb	r3, [r7, #14]
 8002aee:	490b      	ldr	r1, [pc, #44]	; (8002b1c <LEDs_off+0x58>)
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	440b      	add	r3, r1
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f7ff ff38 	bl	800296e <LL_GPIO_ResetOutputPin>
			}

			// In nato si pripravimo novo pomožno bitno masko za branje naslednjega bita v vhodnem argumentu.
			bitmask <<= 1;
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8002b04:	7bbb      	ldrb	r3, [r7, #14]
 8002b06:	3301      	adds	r3, #1
 8002b08:	73bb      	strb	r3, [r7, #14]
 8002b0a:	7bbb      	ldrb	r3, [r7, #14]
 8002b0c:	2b07      	cmp	r3, #7
 8002b0e:	d9e3      	bls.n	8002ad8 <LEDs_off+0x14>




	// DOPOLNI. Reši se na enak način kot LEDs_on().
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	2000009c 	.word	0x2000009c

08002b20 <LEDs_write>:
// V primeru funkcije LEDs_write() pa vrednost vhodnega argumenta "value"
// neposredno določa, katere LEDice v LED skupini bodo prižgane ter katere
// ugasnjene po ideji: če postavljen i-ti bit vrednosti "value", potem naj
// bo prižgana i-ta LEDica; sicer naj bo ugasnjena.
void LEDs_write(uint8_t value)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
	uint8_t bitmask = 0x01;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]

	// S "for" zanko se sprehodimo preko vseh LEDic v sistemu.
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73bb      	strb	r3, [r7, #14]
 8002b32:	e014      	b.n	8002b5e <LEDs_write+0x3e>
	{
		// Preveri vrednost i-tega bita vhodnega argumenta "value".
		if (value & bitmask)
 8002b34:	79fa      	ldrb	r2, [r7, #7]
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d004      	beq.n	8002b4a <LEDs_write+0x2a>
		{
			// Če je i-ti bit enak 1, potem naj se prižge i-ta LEDica, pri čemer se pa
			// upošteva vrstni red LEDic, kot je bil definiran v naštevnem tipu LEDs_enum_t;

			LED_on(i);
 8002b40:	7bbb      	ldrb	r3, [r7, #14]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ff60 	bl	8002a08 <LED_on>
 8002b48:	e003      	b.n	8002b52 <LEDs_write+0x32>
		}
		else
		{
			// sicer pa naj se i-ta LEDica ugasne.

			LED_off(i);
 8002b4a:	7bbb      	ldrb	r3, [r7, #14]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff73 	bl	8002a38 <LED_off>

		}


		// In nato si pripravimo novo pomožno bitno masko za branje naslednjega bita v vhodnem argumentu.
		bitmask <<= 1;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8002b58:	7bbb      	ldrb	r3, [r7, #14]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	73bb      	strb	r3, [r7, #14]
 8002b5e:	7bbb      	ldrb	r3, [r7, #14]
 8002b60:	2b07      	cmp	r3, #7
 8002b62:	d9e7      	bls.n	8002b34 <LEDs_write+0x14>
	}
}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <LEDs_read>:


// Funkcija LEDs_read() vrne 8-bitno vrednost, kjer i-ti bit odraža stanje
// i-te LEDice v LED skupini.
uint8_t LEDs_read(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	71fb      	strb	r3, [r7, #7]
	uint8_t bitmask = 0x01;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	71bb      	strb	r3, [r7, #6]

	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	717b      	strb	r3, [r7, #5]
 8002b82:	e019      	b.n	8002bb8 <LEDs_read+0x48>
	{
		if ( LL_GPIO_IsOutputPinSet( LED_group.LEDs[i].port, LED_group.LEDs[i].pin ) )
 8002b84:	797b      	ldrb	r3, [r7, #5]
 8002b86:	4a10      	ldr	r2, [pc, #64]	; (8002bc8 <LEDs_read+0x58>)
 8002b88:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002b8c:	797b      	ldrb	r3, [r7, #5]
 8002b8e:	490e      	ldr	r1, [pc, #56]	; (8002bc8 <LEDs_read+0x58>)
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	440b      	add	r3, r1
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4619      	mov	r1, r3
 8002b98:	4610      	mov	r0, r2
 8002b9a:	f7ff fec5 	bl	8002928 <LL_GPIO_IsOutputPinSet>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <LEDs_read+0x3c>
			value |= bitmask;
 8002ba4:	79fa      	ldrb	r2, [r7, #7]
 8002ba6:	79bb      	ldrb	r3, [r7, #6]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	71fb      	strb	r3, [r7, #7]

		bitmask <<= 1;
 8002bac:	79bb      	ldrb	r3, [r7, #6]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8002bb2:	797b      	ldrb	r3, [r7, #5]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	717b      	strb	r3, [r7, #5]
 8002bb8:	797b      	ldrb	r3, [r7, #5]
 8002bba:	2b07      	cmp	r3, #7
 8002bbc:	d9e2      	bls.n	8002b84 <LEDs_read+0x14>
	}

	return value;
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	2000009c 	.word	0x2000009c

08002bcc <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d101      	bne.n	8002be4 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c02:	2b80      	cmp	r3, #128	; 0x80
 8002c04:	d101      	bne.n	8002c0a <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	b2db      	uxtb	r3, r3
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <SCI_init>:


// Funkcija SCI_init() poskrbi za inicializacijo SCI "handle" strukture SCI
// in modificira dolžino medpomnilnika printf() funkcije.
void SCI_init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0

		// USART vmesnik specificiramo s pred-definiranim makrojem iz LL knjižnice, podobno kot
		// smo to storili za specifikacijo GPIO porta v prejšnjih vajah.

			// DOPOLNI done
	SCI.USARTx = USART3;
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <SCI_init+0x20>)
 8002c56:	4a07      	ldr	r2, [pc, #28]	; (8002c74 <SCI_init+0x24>)
 8002c58:	601a      	str	r2, [r3, #0]
		// standardni izhod "stdout" s pomočjo printf() funkcije,
		// bomo nastavili na 0. Na ta način dosežemo najboljšo odzivnost
		// printf() funkcije, saj se tako ne čaka, da se medpomnilnik napolne,
		// preden se pošlje sporočilo. Sporočila bodo tako poslana takoj, ko se
		// prejme vsaj en znak.
		setvbuf(stdout, NULL, _IONBF, 0);
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <SCI_init+0x28>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6898      	ldr	r0, [r3, #8]
 8002c60:	2300      	movs	r3, #0
 8002c62:	2202      	movs	r2, #2
 8002c64:	2100      	movs	r1, #0
 8002c66:	f000 f99b 	bl	8002fa0 <setvbuf>
		// s katero specificiramo dolžino medpomnilnika za standardni izhod "stdout" (prvi argument funkcije).
		// Za 3. vhodni parameter uporabimo že pred-definirani makro _IONBF (I/O No Buffer), ki bo povzročil,
		// da se za standardni izhod "stdout" ne uporablja medpomnilnika, temveč
		// se znake takoj pošlje na standardni izhod.

}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200000dc 	.word	0x200000dc
 8002c74:	40004800 	.word	0x40004800
 8002c78:	2000000c 	.word	0x2000000c

08002c7c <SCI_send_char>:

// Funkcija SCI_send_char() pošlje en sam ZNAK preko SCI vmesnika (uporabno, kadar delamo z besedilnimi sporočili).
// Ker SCI vmesnik implementiramo z USART vmesnikom, je potrebno pravzaprav znak poslati z oddajnikom USART enote.
// Pri tem si pomagamo z LL funkcijo.
void SCI_send_char(char c)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]
	// S čakanjem v zanki zagotovimo, da lahko USART oddajnik sprejme nov znak v oddajni register.
	// Za ugotavljanje, ali je že mogoče pisati v oddajni register USART vmesnika, uporabimo ustrezno
	// nizko-nivojsko LL funkcijo za delo z USART-om.
	while( ! LL_USART_IsActiveFlag_TXE_TXFNF(SCI.USARTx) );
 8002c86:	bf00      	nop
 8002c88:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <SCI_send_char+0x34>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ffb0 	bl	8002bf2 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0f7      	beq.n	8002c88 <SCI_send_char+0xc>

	// In nato z uporabo USART vmesnika pošljemo en znak "c". Za pošiljane podatka preko USART vmesnika
	// prav tako uporabimo ustrezno nizko-nivojsko LL funkcijo.

		//	DOPOLNI
	LL_USART_TransmitData8 (SCI.USARTx, c);
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <SCI_send_char+0x34>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	79fa      	ldrb	r2, [r7, #7]
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ffc6 	bl	8002c32 <LL_USART_TransmitData8>

}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200000dc 	.word	0x200000dc

08002cb4 <SCI_send_byte>:

// Funkcija SCI_send_byte() pošlje en sam BAJT preko SCI vmesnika (uporabno, kadar pošiljamo binarne podatke).
// Ker SCI vmesnik implementiramo z USART vmesnikom, je potrebno pravzaprav bajt podatkov poslati z oddajnikom USART enote.
// Pri tem si pomagamo z LL funkcijo.
void SCI_send_byte(uint8_t data)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
	// S čakanjem v zanki zagotovimo, da lahko USART oddajnik sprejme nov bajt v oddajni register.
	// Za ugotavljanje, ali je že mogoče pisati v oddajni register USART vmesnika, uporabimo ustrezno
	// nizko-nivojsko LL funkcijo za delo z USART-om.

		//	DOPOLNI done
	while(! LL_USART_IsActiveFlag_TXE_TXFNF(SCI.USARTx) );
 8002cbe:	bf00      	nop
 8002cc0:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <SCI_send_byte+0x34>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff94 	bl	8002bf2 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f7      	beq.n	8002cc0 <SCI_send_byte+0xc>

	// In nato z uporabo USART vmesnika pošljemo en bajt podatkov "data". Za pošiljane podatka preko USART vmesnika
	// prav tako uporabimo ustrezno nizko-nivojsko LL funkcijo.

		//	DOPOLNI done
	LL_USART_TransmitData8 (SCI.USARTx, data);
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <SCI_send_byte+0x34>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	79fa      	ldrb	r2, [r7, #7]
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ffaa 	bl	8002c32 <LL_USART_TransmitData8>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200000dc 	.word	0x200000dc

08002cec <SCI_send_bytes>:

// Funkcija SCI_send_bytes() pošlje zaporedje bajtov preko SCI vmesnika.
// Lokacija podatkov zapošiljanje je podana z vhodnim argumentom "*data",
// dolžina podatkov za pošiljanje pa je podano z vhodnim argumentom "size".
void SCI_send_bytes(uint8_t *data, uint32_t size)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
	for( int i = 0; i < size; i++ )
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	e009      	b.n	8002d10 <SCI_send_bytes+0x24>
	{
		SCI_send_byte(data[i]);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ffd5 	bl	8002cb4 <SCI_send_byte>
	for( int i = 0; i < size; i++ )
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d8f1      	bhi.n	8002cfc <SCI_send_bytes+0x10>
	}
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <SCI_is_data_waiting>:

// Funkcija SCI_is_data_waiting() preveri, če je v SCI vmesniku na voljo nov prejeti podatek.
// Ker SCI vmesnik implementiramo z USART vmesnikom, je potrebno pravzaprav preveriti, ali je v sprejemniku USART-a
// na voljo nov podatek.
uint8_t SCI_is_data_waiting(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
	// V premislek: LL funkcija, ki jo boste uporabili za preverjanje prejetega podatka vrača vrednost
	// tipa "uint32_t", sistemska funkcija SCI_is_data_waiting() pa vrača vrednost tipa uint8_t.
	// Torej boste imeli opravka s pretvorbo tipov.

	return LL_USART_IsActiveFlag_RXNE_RXFNE(SCI.USARTx);
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <SCI_is_data_waiting+0x18>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff4d 	bl	8002bcc <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002d32:	4603      	mov	r3, r0
 8002d34:	b2db      	uxtb	r3, r3

}
 8002d36:	4618      	mov	r0, r3
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200000dc 	.word	0x200000dc

08002d40 <SCI_read_char>:
// ga shraniti na lokacijo, ki jo določa vhodni argument funkcije *c.
// Ker SCI vmesnik implementiramo z USART vmesnikom, je potrebno pravzaprav podatek prebrati iz
// sprejemnika USART vmesnika. Poskus branja podatka iz SCI vmesnika je
// lahko uspešen (return code = SCI_NO_ERROR) ali pa neuspešen (return code = SCI_ERROR).
SCI_rtrn_codes_t SCI_read_char(char *c)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	// Najprej preverimo, če sploh je v SCI vmesniku na voljo nov prejeti podatek.
	// Uporabimo zgoraj definirano SCI funkcijo.
	if ( SCI_is_data_waiting() )
 8002d48:	f7ff ffec 	bl	8002d24 <SCI_is_data_waiting>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <SCI_read_char+0x28>
		// in ga shranimo na specificirano mesto.
		// Preberemo ga seveda iz USART vmesnika s pomočjo LL funkcije.


			// DOPOLNI
		*c = LL_USART_ReceiveData8(SCI.USARTx);
 8002d52:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <SCI_read_char+0x34>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff ff5e 	bl	8002c18 <LL_USART_ReceiveData8>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	461a      	mov	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	701a      	strb	r2, [r3, #0]

		// In ker je bilo branje novega prejetega podatka uspešno, vrnemo
		// kodo SCI_NO_ERROR.
		return SCI_NO_ERROR;
 8002d64:	2300      	movs	r3, #0
 8002d66:	e001      	b.n	8002d6c <SCI_read_char+0x2c>
	}
	else
	{
		// Če pa ni na voljo novega prejetega podatka, pa vrnemo kodo SCI_ERROR
		// in ne spreminjamo vrednosti spremenljivke *c.
		return SCI_ERROR;
 8002d68:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	200000dc 	.word	0x200000dc

08002d78 <_write>:
// redefiniramo _write() funkcijo pravzaprav priredimo uporabo printf() funkcije
// tako, da pošilja sporočila na točno tak način, kakor to sami želimo.
// In mi želimo uporabljati funkcijo printf() tako, da bomo s pomočjo nje
// pošiljali formatirana sporočila preko SCI vmesnika.
int _write(int file, char *ptr, int len)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
	// Sedaj pa uporabimo našo SCI sistemsko funkcijo SCI_send_bytes()
	// da z njo pošljemo te podatke, na katere kaže "ptr".
	// Ker naša funkcija SCI_send_bytes() uporablja drugačen tip
	// vhodnih argumentov, je potrebno poskrbeti za eksplicitno
	// pretvorbo med tipi (angl. type-casting).
	SCI_send_bytes( (uint8_t*) ptr, (uint32_t) len );
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4619      	mov	r1, r3
 8002d88:	68b8      	ldr	r0, [r7, #8]
 8002d8a:	f7ff ffaf 	bl	8002cec <SCI_send_bytes>


	// Funkcija _write() mora vrniti število uspešno poslanih
	// znakov. Tu poenostavimo in privzamemo, da je bilo uspešno
	// poslanih vseh "len" znakov.
	return len;
 8002d8e:	687b      	ldr	r3, [r7, #4]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <SCI_demo_Hello_world_printf>:
//		3 : Hello printf() world!
//
// in tako dalje izpišite 10 vrstic.
// Sporočila naj se pošiljajo na vsako sekundo.
void SCI_demo_Hello_world_printf(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0

	// DOPOLNI
	for(int i = 0; i < 10; i++)
 8002d9e:	2300      	movs	r3, #0
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	e008      	b.n	8002db6 <SCI_demo_Hello_world_printf+0x1e>
		printf("%d : Hello printf() world!\n", i+1);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3301      	adds	r3, #1
 8002da8:	4619      	mov	r1, r3
 8002daa:	4807      	ldr	r0, [pc, #28]	; (8002dc8 <SCI_demo_Hello_world_printf+0x30>)
 8002dac:	f000 f8e0 	bl	8002f70 <iprintf>
	for(int i = 0; i < 10; i++)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3301      	adds	r3, #1
 8002db4:	607b      	str	r3, [r7, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b09      	cmp	r3, #9
 8002dba:	ddf3      	ble.n	8002da4 <SCI_demo_Hello_world_printf+0xc>

}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	08003fec 	.word	0x08003fec

08002dcc <SCI_demo_echo_with_polling>:
// naj ta znak takoj pošlje preko SCI vmesnika nazaj. Tako ste pravzaprav
// naredili nekakšen "odmev znakov", ki prihajajo preko SCI vmesnika.
// Demonstracija bo ključnega pomena, saj bomo z njo lahko pokazali
// pomembno težavo, ki jo prinese pristop poizvedovanja (angl. polling).
void SCI_demo_echo_with_polling(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
	// pomožna spremenljivka, kamor bomo shranili prejeti znak
	char c;


	// spremenljivke, s pomočjo katerih bomo simulirali "zaposlenost procesorja" ("CPU busy")
	float a_0 = 0.5;
 8002dd2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002dd6:	617b      	str	r3, [r7, #20]
	float a_n;
	float sum = 0;
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
	while(1)
	{

		// s tehniko poizvedovanja ("polling") prevrejamo, ali je preko SCI vmesnika prispel
		// nov znak
		if ( SCI_read_char( &c ) == SCI_NO_ERROR )
 8002dde:	1dfb      	adds	r3, r7, #7
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ffad 	bl	8002d40 <SCI_read_char>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d103      	bne.n	8002df4 <SCI_demo_echo_with_polling+0x28>
		{
			// in če je prispel, ga takoj pošljemo preko SCI vmesnika nazaj (tj. "echo").

				//printf("%s", c);
			SCI_send_char( c );
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff ff44 	bl	8002c7c <SCI_send_char>
		// Na začetku, ko preverjate, kako dobro deluje "echo funkcionalnost",
		// pustite N_MAX nastavljen na 50. Kasneje pa lahko preverite, kaj se
		// dogaja, ko vrednost N_MAX večate oziroma manjšate. Lahko tudi poskusite zakomentirati
		// spodnjo kodo.

		a_n = a_0;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	60fb      	str	r3, [r7, #12]
		for(uint32_t n=0; n<N_MAX; n++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	bf00      	nop
		if ( SCI_read_char( &c ) == SCI_NO_ERROR )
 8002dfe:	e7ee      	b.n	8002dde <SCI_demo_echo_with_polling+0x12>

08002e00 <BUF_init>:


// -------------- Public function implementations --------------

void BUF_init(buf_handle_t *buf_handle, uint8_t *buffer_ptr, uint32_t buf_length)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
	// Initialize the buffer handle according to given parameters.
	buf_handle->buffer = buffer_ptr;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	601a      	str	r2, [r3, #0]
	buf_handle->length = buf_length;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	605a      	str	r2, [r3, #4]


	// And flush the buffer.
	BUF_flush(buf_handle);
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f804 	bl	8002e26 <BUF_flush>
}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <BUF_flush>:


buf_rtrn_codes_t BUF_flush(buf_handle_t *buf_handle)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
	buf_handle->front = 0;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	60da      	str	r2, [r3, #12]
	buf_handle->rear = 0;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
	buf_handle->data_size = 0;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	611a      	str	r2, [r3, #16]
	buf_handle->free_size = buf_handle->length;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	615a      	str	r2, [r3, #20]

	return BUFFER_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <KBD_init>:

// Funkcija KBD_init() poskrbi, da se pravilno inicializira keyboard_handle_t strukturna spremenljivka.
// Poskrbi tudi za inicializacijo medpomnilnika tipkovnice.
//
void KBD_init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
		// To storite tako, da pravilno inicializirate "handle" strukture posameznih tipk.
		// Uporabite makroje "GPIOn" in "LL_GPIO_PIN_n" iz nizko-nivojske LL knjižnice.


		// buttons on port C
		keyboard.buttons[ BTN_ESC ].pin = LL_GPIO_PIN_14 ;
 8002e5e:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <KBD_init+0xa0>)
 8002e60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e64:	605a      	str	r2, [r3, #4]
		keyboard.buttons[ BTN_ESC ].port = GPIOC;
 8002e66:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <KBD_init+0xa0>)
 8002e68:	4a24      	ldr	r2, [pc, #144]	; (8002efc <KBD_init+0xa4>)
 8002e6a:	601a      	str	r2, [r3, #0]

		keyboard.buttons[ BTN_OK ].pin = LL_GPIO_PIN_15 ;
 8002e6c:	4b22      	ldr	r3, [pc, #136]	; (8002ef8 <KBD_init+0xa0>)
 8002e6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e72:	611a      	str	r2, [r3, #16]
		keyboard.buttons[ BTN_OK ].port = GPIOC;
 8002e74:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <KBD_init+0xa0>)
 8002e76:	4a21      	ldr	r2, [pc, #132]	; (8002efc <KBD_init+0xa4>)
 8002e78:	60da      	str	r2, [r3, #12]

			// DOPOLNI done


		// buttons on port G
		keyboard.buttons[ BTN_RIGHT ].pin = LL_GPIO_PIN_8 ;
 8002e7a:	4b1f      	ldr	r3, [pc, #124]	; (8002ef8 <KBD_init+0xa0>)
 8002e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e80:	61da      	str	r2, [r3, #28]
		keyboard.buttons[ BTN_RIGHT ].port = GPIOG;
 8002e82:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <KBD_init+0xa0>)
 8002e84:	4a1e      	ldr	r2, [pc, #120]	; (8002f00 <KBD_init+0xa8>)
 8002e86:	619a      	str	r2, [r3, #24]

		keyboard.buttons[ BTN_LEFT ].pin = LL_GPIO_PIN_6 ;
 8002e88:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <KBD_init+0xa0>)
 8002e8a:	2240      	movs	r2, #64	; 0x40
 8002e8c:	629a      	str	r2, [r3, #40]	; 0x28
		keyboard.buttons[ BTN_LEFT ].port = GPIOG;
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <KBD_init+0xa0>)
 8002e90:	4a1b      	ldr	r2, [pc, #108]	; (8002f00 <KBD_init+0xa8>)
 8002e92:	625a      	str	r2, [r3, #36]	; 0x24

		keyboard.buttons[ BTN_DOWN ].pin = LL_GPIO_PIN_1 ;
 8002e94:	4b18      	ldr	r3, [pc, #96]	; (8002ef8 <KBD_init+0xa0>)
 8002e96:	2202      	movs	r2, #2
 8002e98:	635a      	str	r2, [r3, #52]	; 0x34
		keyboard.buttons[ BTN_DOWN ].port = GPIOG;
 8002e9a:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <KBD_init+0xa0>)
 8002e9c:	4a18      	ldr	r2, [pc, #96]	; (8002f00 <KBD_init+0xa8>)
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30

		keyboard.buttons[ BTN_UP ].pin = LL_GPIO_PIN_0 ;
 8002ea0:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <KBD_init+0xa0>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
		keyboard.buttons[ BTN_UP ].port = GPIOG;
 8002ea6:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <KBD_init+0xa0>)
 8002ea8:	4a15      	ldr	r2, [pc, #84]	; (8002f00 <KBD_init+0xa8>)
 8002eaa:	63da      	str	r2, [r3, #60]	; 0x3c

	// 2. Inicializirajte začetne vrednosti "handle" strukture za posamezne tipke v tipkovnici na sistemskem nivoju


		// Sprehodimo se preko vseh "handle" struktur za delo s posameznimi tipkami.
		for(int i=0; i < NUM_OF_BTN; i++)
 8002eac:	2300      	movs	r3, #0
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	e016      	b.n	8002ee0 <KBD_init+0x88>
			// Ne pozabite, da v "handle" strukturah za posamezne tipke hranimo tudi vrednost prejšnjega
			// in trenutnega stanja tipk! In te vrednosti je potrebno na začetku nastaviti.
			// Smiselno jih je nastaviti na tako vrednost, kot da so tipke na začetku v sproščenem,
			// nestisnjenem stanju. In tu si lahko pomagate s pomožnim naštevnim tipom button_sig_value_t.

			keyboard.buttons[i].state_old = BTN_SIG_VALUE_RELEASED;
 8002eb2:	4911      	ldr	r1, [pc, #68]	; (8002ef8 <KBD_init+0xa0>)
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
			keyboard.buttons[i].state_new = BTN_SIG_VALUE_RELEASED;
 8002ec6:	490c      	ldr	r1, [pc, #48]	; (8002ef8 <KBD_init+0xa0>)
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3309      	adds	r3, #9
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
		for(int i=0; i < NUM_OF_BTN; i++)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3301      	adds	r3, #1
 8002ede:	607b      	str	r3, [r7, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b05      	cmp	r3, #5
 8002ee4:	dde5      	ble.n	8002eb2 <KBD_init+0x5a>

	// 3. Inicializiramo še medpomnilnik tipkovnice.

		// Uporabimo funkcijo BUF_init(), ki določi, katera tabela se bo uporabljala kot
		// ciklični medpomnilnik ter kako dolg bo ta medpomnilnik.
		BUF_init( &kbd_buf_handle, kbd_buffer, KBD_BUF_LEN);
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	4906      	ldr	r1, [pc, #24]	; (8002f04 <KBD_init+0xac>)
 8002eea:	4807      	ldr	r0, [pc, #28]	; (8002f08 <KBD_init+0xb0>)
 8002eec:	f7ff ff88 	bl	8002e00 <BUF_init>

}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	200000e0 	.word	0x200000e0
 8002efc:	48000800 	.word	0x48000800
 8002f00:	48001800 	.word	0x48001800
 8002f04:	20000140 	.word	0x20000140
 8002f08:	20000128 	.word	0x20000128

08002f0c <__errno>:
 8002f0c:	4b01      	ldr	r3, [pc, #4]	; (8002f14 <__errno+0x8>)
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	2000000c 	.word	0x2000000c

08002f18 <__libc_init_array>:
 8002f18:	b570      	push	{r4, r5, r6, lr}
 8002f1a:	4d0d      	ldr	r5, [pc, #52]	; (8002f50 <__libc_init_array+0x38>)
 8002f1c:	4c0d      	ldr	r4, [pc, #52]	; (8002f54 <__libc_init_array+0x3c>)
 8002f1e:	1b64      	subs	r4, r4, r5
 8002f20:	10a4      	asrs	r4, r4, #2
 8002f22:	2600      	movs	r6, #0
 8002f24:	42a6      	cmp	r6, r4
 8002f26:	d109      	bne.n	8002f3c <__libc_init_array+0x24>
 8002f28:	4d0b      	ldr	r5, [pc, #44]	; (8002f58 <__libc_init_array+0x40>)
 8002f2a:	4c0c      	ldr	r4, [pc, #48]	; (8002f5c <__libc_init_array+0x44>)
 8002f2c:	f001 f844 	bl	8003fb8 <_init>
 8002f30:	1b64      	subs	r4, r4, r5
 8002f32:	10a4      	asrs	r4, r4, #2
 8002f34:	2600      	movs	r6, #0
 8002f36:	42a6      	cmp	r6, r4
 8002f38:	d105      	bne.n	8002f46 <__libc_init_array+0x2e>
 8002f3a:	bd70      	pop	{r4, r5, r6, pc}
 8002f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f40:	4798      	blx	r3
 8002f42:	3601      	adds	r6, #1
 8002f44:	e7ee      	b.n	8002f24 <__libc_init_array+0xc>
 8002f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f4a:	4798      	blx	r3
 8002f4c:	3601      	adds	r6, #1
 8002f4e:	e7f2      	b.n	8002f36 <__libc_init_array+0x1e>
 8002f50:	080040e8 	.word	0x080040e8
 8002f54:	080040e8 	.word	0x080040e8
 8002f58:	080040e8 	.word	0x080040e8
 8002f5c:	080040ec 	.word	0x080040ec

08002f60 <memset>:
 8002f60:	4402      	add	r2, r0
 8002f62:	4603      	mov	r3, r0
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d100      	bne.n	8002f6a <memset+0xa>
 8002f68:	4770      	bx	lr
 8002f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f6e:	e7f9      	b.n	8002f64 <memset+0x4>

08002f70 <iprintf>:
 8002f70:	b40f      	push	{r0, r1, r2, r3}
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <iprintf+0x2c>)
 8002f74:	b513      	push	{r0, r1, r4, lr}
 8002f76:	681c      	ldr	r4, [r3, #0]
 8002f78:	b124      	cbz	r4, 8002f84 <iprintf+0x14>
 8002f7a:	69a3      	ldr	r3, [r4, #24]
 8002f7c:	b913      	cbnz	r3, 8002f84 <iprintf+0x14>
 8002f7e:	4620      	mov	r0, r4
 8002f80:	f000 f9ee 	bl	8003360 <__sinit>
 8002f84:	ab05      	add	r3, sp, #20
 8002f86:	9a04      	ldr	r2, [sp, #16]
 8002f88:	68a1      	ldr	r1, [r4, #8]
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f000 fbc7 	bl	8003720 <_vfiprintf_r>
 8002f92:	b002      	add	sp, #8
 8002f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f98:	b004      	add	sp, #16
 8002f9a:	4770      	bx	lr
 8002f9c:	2000000c 	.word	0x2000000c

08002fa0 <setvbuf>:
 8002fa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002fa4:	461d      	mov	r5, r3
 8002fa6:	4b5d      	ldr	r3, [pc, #372]	; (800311c <setvbuf+0x17c>)
 8002fa8:	681f      	ldr	r7, [r3, #0]
 8002faa:	4604      	mov	r4, r0
 8002fac:	460e      	mov	r6, r1
 8002fae:	4690      	mov	r8, r2
 8002fb0:	b127      	cbz	r7, 8002fbc <setvbuf+0x1c>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	b913      	cbnz	r3, 8002fbc <setvbuf+0x1c>
 8002fb6:	4638      	mov	r0, r7
 8002fb8:	f000 f9d2 	bl	8003360 <__sinit>
 8002fbc:	4b58      	ldr	r3, [pc, #352]	; (8003120 <setvbuf+0x180>)
 8002fbe:	429c      	cmp	r4, r3
 8002fc0:	d167      	bne.n	8003092 <setvbuf+0xf2>
 8002fc2:	687c      	ldr	r4, [r7, #4]
 8002fc4:	f1b8 0f02 	cmp.w	r8, #2
 8002fc8:	d006      	beq.n	8002fd8 <setvbuf+0x38>
 8002fca:	f1b8 0f01 	cmp.w	r8, #1
 8002fce:	f200 809f 	bhi.w	8003110 <setvbuf+0x170>
 8002fd2:	2d00      	cmp	r5, #0
 8002fd4:	f2c0 809c 	blt.w	8003110 <setvbuf+0x170>
 8002fd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fda:	07db      	lsls	r3, r3, #31
 8002fdc:	d405      	bmi.n	8002fea <setvbuf+0x4a>
 8002fde:	89a3      	ldrh	r3, [r4, #12]
 8002fe0:	0598      	lsls	r0, r3, #22
 8002fe2:	d402      	bmi.n	8002fea <setvbuf+0x4a>
 8002fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fe6:	f000 fa59 	bl	800349c <__retarget_lock_acquire_recursive>
 8002fea:	4621      	mov	r1, r4
 8002fec:	4638      	mov	r0, r7
 8002fee:	f000 f923 	bl	8003238 <_fflush_r>
 8002ff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ff4:	b141      	cbz	r1, 8003008 <setvbuf+0x68>
 8002ff6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ffa:	4299      	cmp	r1, r3
 8002ffc:	d002      	beq.n	8003004 <setvbuf+0x64>
 8002ffe:	4638      	mov	r0, r7
 8003000:	f000 faba 	bl	8003578 <_free_r>
 8003004:	2300      	movs	r3, #0
 8003006:	6363      	str	r3, [r4, #52]	; 0x34
 8003008:	2300      	movs	r3, #0
 800300a:	61a3      	str	r3, [r4, #24]
 800300c:	6063      	str	r3, [r4, #4]
 800300e:	89a3      	ldrh	r3, [r4, #12]
 8003010:	0619      	lsls	r1, r3, #24
 8003012:	d503      	bpl.n	800301c <setvbuf+0x7c>
 8003014:	6921      	ldr	r1, [r4, #16]
 8003016:	4638      	mov	r0, r7
 8003018:	f000 faae 	bl	8003578 <_free_r>
 800301c:	89a3      	ldrh	r3, [r4, #12]
 800301e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003022:	f023 0303 	bic.w	r3, r3, #3
 8003026:	f1b8 0f02 	cmp.w	r8, #2
 800302a:	81a3      	strh	r3, [r4, #12]
 800302c:	d06c      	beq.n	8003108 <setvbuf+0x168>
 800302e:	ab01      	add	r3, sp, #4
 8003030:	466a      	mov	r2, sp
 8003032:	4621      	mov	r1, r4
 8003034:	4638      	mov	r0, r7
 8003036:	f000 fa33 	bl	80034a0 <__swhatbuf_r>
 800303a:	89a3      	ldrh	r3, [r4, #12]
 800303c:	4318      	orrs	r0, r3
 800303e:	81a0      	strh	r0, [r4, #12]
 8003040:	2d00      	cmp	r5, #0
 8003042:	d130      	bne.n	80030a6 <setvbuf+0x106>
 8003044:	9d00      	ldr	r5, [sp, #0]
 8003046:	4628      	mov	r0, r5
 8003048:	f000 fa8e 	bl	8003568 <malloc>
 800304c:	4606      	mov	r6, r0
 800304e:	2800      	cmp	r0, #0
 8003050:	d155      	bne.n	80030fe <setvbuf+0x15e>
 8003052:	f8dd 9000 	ldr.w	r9, [sp]
 8003056:	45a9      	cmp	r9, r5
 8003058:	d14a      	bne.n	80030f0 <setvbuf+0x150>
 800305a:	f04f 35ff 	mov.w	r5, #4294967295
 800305e:	2200      	movs	r2, #0
 8003060:	60a2      	str	r2, [r4, #8]
 8003062:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003066:	6022      	str	r2, [r4, #0]
 8003068:	6122      	str	r2, [r4, #16]
 800306a:	2201      	movs	r2, #1
 800306c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003070:	6162      	str	r2, [r4, #20]
 8003072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003074:	f043 0302 	orr.w	r3, r3, #2
 8003078:	07d2      	lsls	r2, r2, #31
 800307a:	81a3      	strh	r3, [r4, #12]
 800307c:	d405      	bmi.n	800308a <setvbuf+0xea>
 800307e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003082:	d102      	bne.n	800308a <setvbuf+0xea>
 8003084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003086:	f000 fa0a 	bl	800349e <__retarget_lock_release_recursive>
 800308a:	4628      	mov	r0, r5
 800308c:	b003      	add	sp, #12
 800308e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003092:	4b24      	ldr	r3, [pc, #144]	; (8003124 <setvbuf+0x184>)
 8003094:	429c      	cmp	r4, r3
 8003096:	d101      	bne.n	800309c <setvbuf+0xfc>
 8003098:	68bc      	ldr	r4, [r7, #8]
 800309a:	e793      	b.n	8002fc4 <setvbuf+0x24>
 800309c:	4b22      	ldr	r3, [pc, #136]	; (8003128 <setvbuf+0x188>)
 800309e:	429c      	cmp	r4, r3
 80030a0:	bf08      	it	eq
 80030a2:	68fc      	ldreq	r4, [r7, #12]
 80030a4:	e78e      	b.n	8002fc4 <setvbuf+0x24>
 80030a6:	2e00      	cmp	r6, #0
 80030a8:	d0cd      	beq.n	8003046 <setvbuf+0xa6>
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	b913      	cbnz	r3, 80030b4 <setvbuf+0x114>
 80030ae:	4638      	mov	r0, r7
 80030b0:	f000 f956 	bl	8003360 <__sinit>
 80030b4:	f1b8 0f01 	cmp.w	r8, #1
 80030b8:	bf08      	it	eq
 80030ba:	89a3      	ldrheq	r3, [r4, #12]
 80030bc:	6026      	str	r6, [r4, #0]
 80030be:	bf04      	itt	eq
 80030c0:	f043 0301 	orreq.w	r3, r3, #1
 80030c4:	81a3      	strheq	r3, [r4, #12]
 80030c6:	89a2      	ldrh	r2, [r4, #12]
 80030c8:	f012 0308 	ands.w	r3, r2, #8
 80030cc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80030d0:	d01c      	beq.n	800310c <setvbuf+0x16c>
 80030d2:	07d3      	lsls	r3, r2, #31
 80030d4:	bf41      	itttt	mi
 80030d6:	2300      	movmi	r3, #0
 80030d8:	426d      	negmi	r5, r5
 80030da:	60a3      	strmi	r3, [r4, #8]
 80030dc:	61a5      	strmi	r5, [r4, #24]
 80030de:	bf58      	it	pl
 80030e0:	60a5      	strpl	r5, [r4, #8]
 80030e2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80030e4:	f015 0501 	ands.w	r5, r5, #1
 80030e8:	d115      	bne.n	8003116 <setvbuf+0x176>
 80030ea:	f412 7f00 	tst.w	r2, #512	; 0x200
 80030ee:	e7c8      	b.n	8003082 <setvbuf+0xe2>
 80030f0:	4648      	mov	r0, r9
 80030f2:	f000 fa39 	bl	8003568 <malloc>
 80030f6:	4606      	mov	r6, r0
 80030f8:	2800      	cmp	r0, #0
 80030fa:	d0ae      	beq.n	800305a <setvbuf+0xba>
 80030fc:	464d      	mov	r5, r9
 80030fe:	89a3      	ldrh	r3, [r4, #12]
 8003100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003104:	81a3      	strh	r3, [r4, #12]
 8003106:	e7d0      	b.n	80030aa <setvbuf+0x10a>
 8003108:	2500      	movs	r5, #0
 800310a:	e7a8      	b.n	800305e <setvbuf+0xbe>
 800310c:	60a3      	str	r3, [r4, #8]
 800310e:	e7e8      	b.n	80030e2 <setvbuf+0x142>
 8003110:	f04f 35ff 	mov.w	r5, #4294967295
 8003114:	e7b9      	b.n	800308a <setvbuf+0xea>
 8003116:	2500      	movs	r5, #0
 8003118:	e7b7      	b.n	800308a <setvbuf+0xea>
 800311a:	bf00      	nop
 800311c:	2000000c 	.word	0x2000000c
 8003120:	08004074 	.word	0x08004074
 8003124:	08004094 	.word	0x08004094
 8003128:	08004054 	.word	0x08004054

0800312c <__sflush_r>:
 800312c:	898a      	ldrh	r2, [r1, #12]
 800312e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003132:	4605      	mov	r5, r0
 8003134:	0710      	lsls	r0, r2, #28
 8003136:	460c      	mov	r4, r1
 8003138:	d458      	bmi.n	80031ec <__sflush_r+0xc0>
 800313a:	684b      	ldr	r3, [r1, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	dc05      	bgt.n	800314c <__sflush_r+0x20>
 8003140:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	dc02      	bgt.n	800314c <__sflush_r+0x20>
 8003146:	2000      	movs	r0, #0
 8003148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800314c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800314e:	2e00      	cmp	r6, #0
 8003150:	d0f9      	beq.n	8003146 <__sflush_r+0x1a>
 8003152:	2300      	movs	r3, #0
 8003154:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003158:	682f      	ldr	r7, [r5, #0]
 800315a:	602b      	str	r3, [r5, #0]
 800315c:	d032      	beq.n	80031c4 <__sflush_r+0x98>
 800315e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003160:	89a3      	ldrh	r3, [r4, #12]
 8003162:	075a      	lsls	r2, r3, #29
 8003164:	d505      	bpl.n	8003172 <__sflush_r+0x46>
 8003166:	6863      	ldr	r3, [r4, #4]
 8003168:	1ac0      	subs	r0, r0, r3
 800316a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800316c:	b10b      	cbz	r3, 8003172 <__sflush_r+0x46>
 800316e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003170:	1ac0      	subs	r0, r0, r3
 8003172:	2300      	movs	r3, #0
 8003174:	4602      	mov	r2, r0
 8003176:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003178:	6a21      	ldr	r1, [r4, #32]
 800317a:	4628      	mov	r0, r5
 800317c:	47b0      	blx	r6
 800317e:	1c43      	adds	r3, r0, #1
 8003180:	89a3      	ldrh	r3, [r4, #12]
 8003182:	d106      	bne.n	8003192 <__sflush_r+0x66>
 8003184:	6829      	ldr	r1, [r5, #0]
 8003186:	291d      	cmp	r1, #29
 8003188:	d82c      	bhi.n	80031e4 <__sflush_r+0xb8>
 800318a:	4a2a      	ldr	r2, [pc, #168]	; (8003234 <__sflush_r+0x108>)
 800318c:	40ca      	lsrs	r2, r1
 800318e:	07d6      	lsls	r6, r2, #31
 8003190:	d528      	bpl.n	80031e4 <__sflush_r+0xb8>
 8003192:	2200      	movs	r2, #0
 8003194:	6062      	str	r2, [r4, #4]
 8003196:	04d9      	lsls	r1, r3, #19
 8003198:	6922      	ldr	r2, [r4, #16]
 800319a:	6022      	str	r2, [r4, #0]
 800319c:	d504      	bpl.n	80031a8 <__sflush_r+0x7c>
 800319e:	1c42      	adds	r2, r0, #1
 80031a0:	d101      	bne.n	80031a6 <__sflush_r+0x7a>
 80031a2:	682b      	ldr	r3, [r5, #0]
 80031a4:	b903      	cbnz	r3, 80031a8 <__sflush_r+0x7c>
 80031a6:	6560      	str	r0, [r4, #84]	; 0x54
 80031a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031aa:	602f      	str	r7, [r5, #0]
 80031ac:	2900      	cmp	r1, #0
 80031ae:	d0ca      	beq.n	8003146 <__sflush_r+0x1a>
 80031b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031b4:	4299      	cmp	r1, r3
 80031b6:	d002      	beq.n	80031be <__sflush_r+0x92>
 80031b8:	4628      	mov	r0, r5
 80031ba:	f000 f9dd 	bl	8003578 <_free_r>
 80031be:	2000      	movs	r0, #0
 80031c0:	6360      	str	r0, [r4, #52]	; 0x34
 80031c2:	e7c1      	b.n	8003148 <__sflush_r+0x1c>
 80031c4:	6a21      	ldr	r1, [r4, #32]
 80031c6:	2301      	movs	r3, #1
 80031c8:	4628      	mov	r0, r5
 80031ca:	47b0      	blx	r6
 80031cc:	1c41      	adds	r1, r0, #1
 80031ce:	d1c7      	bne.n	8003160 <__sflush_r+0x34>
 80031d0:	682b      	ldr	r3, [r5, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0c4      	beq.n	8003160 <__sflush_r+0x34>
 80031d6:	2b1d      	cmp	r3, #29
 80031d8:	d001      	beq.n	80031de <__sflush_r+0xb2>
 80031da:	2b16      	cmp	r3, #22
 80031dc:	d101      	bne.n	80031e2 <__sflush_r+0xb6>
 80031de:	602f      	str	r7, [r5, #0]
 80031e0:	e7b1      	b.n	8003146 <__sflush_r+0x1a>
 80031e2:	89a3      	ldrh	r3, [r4, #12]
 80031e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031e8:	81a3      	strh	r3, [r4, #12]
 80031ea:	e7ad      	b.n	8003148 <__sflush_r+0x1c>
 80031ec:	690f      	ldr	r7, [r1, #16]
 80031ee:	2f00      	cmp	r7, #0
 80031f0:	d0a9      	beq.n	8003146 <__sflush_r+0x1a>
 80031f2:	0793      	lsls	r3, r2, #30
 80031f4:	680e      	ldr	r6, [r1, #0]
 80031f6:	bf08      	it	eq
 80031f8:	694b      	ldreq	r3, [r1, #20]
 80031fa:	600f      	str	r7, [r1, #0]
 80031fc:	bf18      	it	ne
 80031fe:	2300      	movne	r3, #0
 8003200:	eba6 0807 	sub.w	r8, r6, r7
 8003204:	608b      	str	r3, [r1, #8]
 8003206:	f1b8 0f00 	cmp.w	r8, #0
 800320a:	dd9c      	ble.n	8003146 <__sflush_r+0x1a>
 800320c:	6a21      	ldr	r1, [r4, #32]
 800320e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003210:	4643      	mov	r3, r8
 8003212:	463a      	mov	r2, r7
 8003214:	4628      	mov	r0, r5
 8003216:	47b0      	blx	r6
 8003218:	2800      	cmp	r0, #0
 800321a:	dc06      	bgt.n	800322a <__sflush_r+0xfe>
 800321c:	89a3      	ldrh	r3, [r4, #12]
 800321e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003222:	81a3      	strh	r3, [r4, #12]
 8003224:	f04f 30ff 	mov.w	r0, #4294967295
 8003228:	e78e      	b.n	8003148 <__sflush_r+0x1c>
 800322a:	4407      	add	r7, r0
 800322c:	eba8 0800 	sub.w	r8, r8, r0
 8003230:	e7e9      	b.n	8003206 <__sflush_r+0xda>
 8003232:	bf00      	nop
 8003234:	20400001 	.word	0x20400001

08003238 <_fflush_r>:
 8003238:	b538      	push	{r3, r4, r5, lr}
 800323a:	690b      	ldr	r3, [r1, #16]
 800323c:	4605      	mov	r5, r0
 800323e:	460c      	mov	r4, r1
 8003240:	b913      	cbnz	r3, 8003248 <_fflush_r+0x10>
 8003242:	2500      	movs	r5, #0
 8003244:	4628      	mov	r0, r5
 8003246:	bd38      	pop	{r3, r4, r5, pc}
 8003248:	b118      	cbz	r0, 8003252 <_fflush_r+0x1a>
 800324a:	6983      	ldr	r3, [r0, #24]
 800324c:	b90b      	cbnz	r3, 8003252 <_fflush_r+0x1a>
 800324e:	f000 f887 	bl	8003360 <__sinit>
 8003252:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <_fflush_r+0x6c>)
 8003254:	429c      	cmp	r4, r3
 8003256:	d11b      	bne.n	8003290 <_fflush_r+0x58>
 8003258:	686c      	ldr	r4, [r5, #4]
 800325a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0ef      	beq.n	8003242 <_fflush_r+0xa>
 8003262:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003264:	07d0      	lsls	r0, r2, #31
 8003266:	d404      	bmi.n	8003272 <_fflush_r+0x3a>
 8003268:	0599      	lsls	r1, r3, #22
 800326a:	d402      	bmi.n	8003272 <_fflush_r+0x3a>
 800326c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800326e:	f000 f915 	bl	800349c <__retarget_lock_acquire_recursive>
 8003272:	4628      	mov	r0, r5
 8003274:	4621      	mov	r1, r4
 8003276:	f7ff ff59 	bl	800312c <__sflush_r>
 800327a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800327c:	07da      	lsls	r2, r3, #31
 800327e:	4605      	mov	r5, r0
 8003280:	d4e0      	bmi.n	8003244 <_fflush_r+0xc>
 8003282:	89a3      	ldrh	r3, [r4, #12]
 8003284:	059b      	lsls	r3, r3, #22
 8003286:	d4dd      	bmi.n	8003244 <_fflush_r+0xc>
 8003288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800328a:	f000 f908 	bl	800349e <__retarget_lock_release_recursive>
 800328e:	e7d9      	b.n	8003244 <_fflush_r+0xc>
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <_fflush_r+0x70>)
 8003292:	429c      	cmp	r4, r3
 8003294:	d101      	bne.n	800329a <_fflush_r+0x62>
 8003296:	68ac      	ldr	r4, [r5, #8]
 8003298:	e7df      	b.n	800325a <_fflush_r+0x22>
 800329a:	4b04      	ldr	r3, [pc, #16]	; (80032ac <_fflush_r+0x74>)
 800329c:	429c      	cmp	r4, r3
 800329e:	bf08      	it	eq
 80032a0:	68ec      	ldreq	r4, [r5, #12]
 80032a2:	e7da      	b.n	800325a <_fflush_r+0x22>
 80032a4:	08004074 	.word	0x08004074
 80032a8:	08004094 	.word	0x08004094
 80032ac:	08004054 	.word	0x08004054

080032b0 <std>:
 80032b0:	2300      	movs	r3, #0
 80032b2:	b510      	push	{r4, lr}
 80032b4:	4604      	mov	r4, r0
 80032b6:	e9c0 3300 	strd	r3, r3, [r0]
 80032ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032be:	6083      	str	r3, [r0, #8]
 80032c0:	8181      	strh	r1, [r0, #12]
 80032c2:	6643      	str	r3, [r0, #100]	; 0x64
 80032c4:	81c2      	strh	r2, [r0, #14]
 80032c6:	6183      	str	r3, [r0, #24]
 80032c8:	4619      	mov	r1, r3
 80032ca:	2208      	movs	r2, #8
 80032cc:	305c      	adds	r0, #92	; 0x5c
 80032ce:	f7ff fe47 	bl	8002f60 <memset>
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <std+0x38>)
 80032d4:	6263      	str	r3, [r4, #36]	; 0x24
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <std+0x3c>)
 80032d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80032da:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <std+0x40>)
 80032dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <std+0x44>)
 80032e0:	6224      	str	r4, [r4, #32]
 80032e2:	6323      	str	r3, [r4, #48]	; 0x30
 80032e4:	bd10      	pop	{r4, pc}
 80032e6:	bf00      	nop
 80032e8:	08003cc9 	.word	0x08003cc9
 80032ec:	08003ceb 	.word	0x08003ceb
 80032f0:	08003d23 	.word	0x08003d23
 80032f4:	08003d47 	.word	0x08003d47

080032f8 <_cleanup_r>:
 80032f8:	4901      	ldr	r1, [pc, #4]	; (8003300 <_cleanup_r+0x8>)
 80032fa:	f000 b8af 	b.w	800345c <_fwalk_reent>
 80032fe:	bf00      	nop
 8003300:	08003239 	.word	0x08003239

08003304 <__sfmoreglue>:
 8003304:	b570      	push	{r4, r5, r6, lr}
 8003306:	1e4a      	subs	r2, r1, #1
 8003308:	2568      	movs	r5, #104	; 0x68
 800330a:	4355      	muls	r5, r2
 800330c:	460e      	mov	r6, r1
 800330e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003312:	f000 f981 	bl	8003618 <_malloc_r>
 8003316:	4604      	mov	r4, r0
 8003318:	b140      	cbz	r0, 800332c <__sfmoreglue+0x28>
 800331a:	2100      	movs	r1, #0
 800331c:	e9c0 1600 	strd	r1, r6, [r0]
 8003320:	300c      	adds	r0, #12
 8003322:	60a0      	str	r0, [r4, #8]
 8003324:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003328:	f7ff fe1a 	bl	8002f60 <memset>
 800332c:	4620      	mov	r0, r4
 800332e:	bd70      	pop	{r4, r5, r6, pc}

08003330 <__sfp_lock_acquire>:
 8003330:	4801      	ldr	r0, [pc, #4]	; (8003338 <__sfp_lock_acquire+0x8>)
 8003332:	f000 b8b3 	b.w	800349c <__retarget_lock_acquire_recursive>
 8003336:	bf00      	nop
 8003338:	20000168 	.word	0x20000168

0800333c <__sfp_lock_release>:
 800333c:	4801      	ldr	r0, [pc, #4]	; (8003344 <__sfp_lock_release+0x8>)
 800333e:	f000 b8ae 	b.w	800349e <__retarget_lock_release_recursive>
 8003342:	bf00      	nop
 8003344:	20000168 	.word	0x20000168

08003348 <__sinit_lock_acquire>:
 8003348:	4801      	ldr	r0, [pc, #4]	; (8003350 <__sinit_lock_acquire+0x8>)
 800334a:	f000 b8a7 	b.w	800349c <__retarget_lock_acquire_recursive>
 800334e:	bf00      	nop
 8003350:	20000163 	.word	0x20000163

08003354 <__sinit_lock_release>:
 8003354:	4801      	ldr	r0, [pc, #4]	; (800335c <__sinit_lock_release+0x8>)
 8003356:	f000 b8a2 	b.w	800349e <__retarget_lock_release_recursive>
 800335a:	bf00      	nop
 800335c:	20000163 	.word	0x20000163

08003360 <__sinit>:
 8003360:	b510      	push	{r4, lr}
 8003362:	4604      	mov	r4, r0
 8003364:	f7ff fff0 	bl	8003348 <__sinit_lock_acquire>
 8003368:	69a3      	ldr	r3, [r4, #24]
 800336a:	b11b      	cbz	r3, 8003374 <__sinit+0x14>
 800336c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003370:	f7ff bff0 	b.w	8003354 <__sinit_lock_release>
 8003374:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003378:	6523      	str	r3, [r4, #80]	; 0x50
 800337a:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <__sinit+0x68>)
 800337c:	4a13      	ldr	r2, [pc, #76]	; (80033cc <__sinit+0x6c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	62a2      	str	r2, [r4, #40]	; 0x28
 8003382:	42a3      	cmp	r3, r4
 8003384:	bf04      	itt	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	61a3      	streq	r3, [r4, #24]
 800338a:	4620      	mov	r0, r4
 800338c:	f000 f820 	bl	80033d0 <__sfp>
 8003390:	6060      	str	r0, [r4, #4]
 8003392:	4620      	mov	r0, r4
 8003394:	f000 f81c 	bl	80033d0 <__sfp>
 8003398:	60a0      	str	r0, [r4, #8]
 800339a:	4620      	mov	r0, r4
 800339c:	f000 f818 	bl	80033d0 <__sfp>
 80033a0:	2200      	movs	r2, #0
 80033a2:	60e0      	str	r0, [r4, #12]
 80033a4:	2104      	movs	r1, #4
 80033a6:	6860      	ldr	r0, [r4, #4]
 80033a8:	f7ff ff82 	bl	80032b0 <std>
 80033ac:	68a0      	ldr	r0, [r4, #8]
 80033ae:	2201      	movs	r2, #1
 80033b0:	2109      	movs	r1, #9
 80033b2:	f7ff ff7d 	bl	80032b0 <std>
 80033b6:	68e0      	ldr	r0, [r4, #12]
 80033b8:	2202      	movs	r2, #2
 80033ba:	2112      	movs	r1, #18
 80033bc:	f7ff ff78 	bl	80032b0 <std>
 80033c0:	2301      	movs	r3, #1
 80033c2:	61a3      	str	r3, [r4, #24]
 80033c4:	e7d2      	b.n	800336c <__sinit+0xc>
 80033c6:	bf00      	nop
 80033c8:	08004050 	.word	0x08004050
 80033cc:	080032f9 	.word	0x080032f9

080033d0 <__sfp>:
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d2:	4607      	mov	r7, r0
 80033d4:	f7ff ffac 	bl	8003330 <__sfp_lock_acquire>
 80033d8:	4b1e      	ldr	r3, [pc, #120]	; (8003454 <__sfp+0x84>)
 80033da:	681e      	ldr	r6, [r3, #0]
 80033dc:	69b3      	ldr	r3, [r6, #24]
 80033de:	b913      	cbnz	r3, 80033e6 <__sfp+0x16>
 80033e0:	4630      	mov	r0, r6
 80033e2:	f7ff ffbd 	bl	8003360 <__sinit>
 80033e6:	3648      	adds	r6, #72	; 0x48
 80033e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	d503      	bpl.n	80033f8 <__sfp+0x28>
 80033f0:	6833      	ldr	r3, [r6, #0]
 80033f2:	b30b      	cbz	r3, 8003438 <__sfp+0x68>
 80033f4:	6836      	ldr	r6, [r6, #0]
 80033f6:	e7f7      	b.n	80033e8 <__sfp+0x18>
 80033f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80033fc:	b9d5      	cbnz	r5, 8003434 <__sfp+0x64>
 80033fe:	4b16      	ldr	r3, [pc, #88]	; (8003458 <__sfp+0x88>)
 8003400:	60e3      	str	r3, [r4, #12]
 8003402:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003406:	6665      	str	r5, [r4, #100]	; 0x64
 8003408:	f000 f847 	bl	800349a <__retarget_lock_init_recursive>
 800340c:	f7ff ff96 	bl	800333c <__sfp_lock_release>
 8003410:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003414:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003418:	6025      	str	r5, [r4, #0]
 800341a:	61a5      	str	r5, [r4, #24]
 800341c:	2208      	movs	r2, #8
 800341e:	4629      	mov	r1, r5
 8003420:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003424:	f7ff fd9c 	bl	8002f60 <memset>
 8003428:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800342c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003430:	4620      	mov	r0, r4
 8003432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003434:	3468      	adds	r4, #104	; 0x68
 8003436:	e7d9      	b.n	80033ec <__sfp+0x1c>
 8003438:	2104      	movs	r1, #4
 800343a:	4638      	mov	r0, r7
 800343c:	f7ff ff62 	bl	8003304 <__sfmoreglue>
 8003440:	4604      	mov	r4, r0
 8003442:	6030      	str	r0, [r6, #0]
 8003444:	2800      	cmp	r0, #0
 8003446:	d1d5      	bne.n	80033f4 <__sfp+0x24>
 8003448:	f7ff ff78 	bl	800333c <__sfp_lock_release>
 800344c:	230c      	movs	r3, #12
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	e7ee      	b.n	8003430 <__sfp+0x60>
 8003452:	bf00      	nop
 8003454:	08004050 	.word	0x08004050
 8003458:	ffff0001 	.word	0xffff0001

0800345c <_fwalk_reent>:
 800345c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003460:	4606      	mov	r6, r0
 8003462:	4688      	mov	r8, r1
 8003464:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003468:	2700      	movs	r7, #0
 800346a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800346e:	f1b9 0901 	subs.w	r9, r9, #1
 8003472:	d505      	bpl.n	8003480 <_fwalk_reent+0x24>
 8003474:	6824      	ldr	r4, [r4, #0]
 8003476:	2c00      	cmp	r4, #0
 8003478:	d1f7      	bne.n	800346a <_fwalk_reent+0xe>
 800347a:	4638      	mov	r0, r7
 800347c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003480:	89ab      	ldrh	r3, [r5, #12]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d907      	bls.n	8003496 <_fwalk_reent+0x3a>
 8003486:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800348a:	3301      	adds	r3, #1
 800348c:	d003      	beq.n	8003496 <_fwalk_reent+0x3a>
 800348e:	4629      	mov	r1, r5
 8003490:	4630      	mov	r0, r6
 8003492:	47c0      	blx	r8
 8003494:	4307      	orrs	r7, r0
 8003496:	3568      	adds	r5, #104	; 0x68
 8003498:	e7e9      	b.n	800346e <_fwalk_reent+0x12>

0800349a <__retarget_lock_init_recursive>:
 800349a:	4770      	bx	lr

0800349c <__retarget_lock_acquire_recursive>:
 800349c:	4770      	bx	lr

0800349e <__retarget_lock_release_recursive>:
 800349e:	4770      	bx	lr

080034a0 <__swhatbuf_r>:
 80034a0:	b570      	push	{r4, r5, r6, lr}
 80034a2:	460e      	mov	r6, r1
 80034a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034a8:	2900      	cmp	r1, #0
 80034aa:	b096      	sub	sp, #88	; 0x58
 80034ac:	4614      	mov	r4, r2
 80034ae:	461d      	mov	r5, r3
 80034b0:	da07      	bge.n	80034c2 <__swhatbuf_r+0x22>
 80034b2:	2300      	movs	r3, #0
 80034b4:	602b      	str	r3, [r5, #0]
 80034b6:	89b3      	ldrh	r3, [r6, #12]
 80034b8:	061a      	lsls	r2, r3, #24
 80034ba:	d410      	bmi.n	80034de <__swhatbuf_r+0x3e>
 80034bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c0:	e00e      	b.n	80034e0 <__swhatbuf_r+0x40>
 80034c2:	466a      	mov	r2, sp
 80034c4:	f000 fd26 	bl	8003f14 <_fstat_r>
 80034c8:	2800      	cmp	r0, #0
 80034ca:	dbf2      	blt.n	80034b2 <__swhatbuf_r+0x12>
 80034cc:	9a01      	ldr	r2, [sp, #4]
 80034ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80034d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80034d6:	425a      	negs	r2, r3
 80034d8:	415a      	adcs	r2, r3
 80034da:	602a      	str	r2, [r5, #0]
 80034dc:	e7ee      	b.n	80034bc <__swhatbuf_r+0x1c>
 80034de:	2340      	movs	r3, #64	; 0x40
 80034e0:	2000      	movs	r0, #0
 80034e2:	6023      	str	r3, [r4, #0]
 80034e4:	b016      	add	sp, #88	; 0x58
 80034e6:	bd70      	pop	{r4, r5, r6, pc}

080034e8 <__smakebuf_r>:
 80034e8:	898b      	ldrh	r3, [r1, #12]
 80034ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034ec:	079d      	lsls	r5, r3, #30
 80034ee:	4606      	mov	r6, r0
 80034f0:	460c      	mov	r4, r1
 80034f2:	d507      	bpl.n	8003504 <__smakebuf_r+0x1c>
 80034f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80034f8:	6023      	str	r3, [r4, #0]
 80034fa:	6123      	str	r3, [r4, #16]
 80034fc:	2301      	movs	r3, #1
 80034fe:	6163      	str	r3, [r4, #20]
 8003500:	b002      	add	sp, #8
 8003502:	bd70      	pop	{r4, r5, r6, pc}
 8003504:	ab01      	add	r3, sp, #4
 8003506:	466a      	mov	r2, sp
 8003508:	f7ff ffca 	bl	80034a0 <__swhatbuf_r>
 800350c:	9900      	ldr	r1, [sp, #0]
 800350e:	4605      	mov	r5, r0
 8003510:	4630      	mov	r0, r6
 8003512:	f000 f881 	bl	8003618 <_malloc_r>
 8003516:	b948      	cbnz	r0, 800352c <__smakebuf_r+0x44>
 8003518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800351c:	059a      	lsls	r2, r3, #22
 800351e:	d4ef      	bmi.n	8003500 <__smakebuf_r+0x18>
 8003520:	f023 0303 	bic.w	r3, r3, #3
 8003524:	f043 0302 	orr.w	r3, r3, #2
 8003528:	81a3      	strh	r3, [r4, #12]
 800352a:	e7e3      	b.n	80034f4 <__smakebuf_r+0xc>
 800352c:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <__smakebuf_r+0x7c>)
 800352e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003530:	89a3      	ldrh	r3, [r4, #12]
 8003532:	6020      	str	r0, [r4, #0]
 8003534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003538:	81a3      	strh	r3, [r4, #12]
 800353a:	9b00      	ldr	r3, [sp, #0]
 800353c:	6163      	str	r3, [r4, #20]
 800353e:	9b01      	ldr	r3, [sp, #4]
 8003540:	6120      	str	r0, [r4, #16]
 8003542:	b15b      	cbz	r3, 800355c <__smakebuf_r+0x74>
 8003544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003548:	4630      	mov	r0, r6
 800354a:	f000 fcf5 	bl	8003f38 <_isatty_r>
 800354e:	b128      	cbz	r0, 800355c <__smakebuf_r+0x74>
 8003550:	89a3      	ldrh	r3, [r4, #12]
 8003552:	f023 0303 	bic.w	r3, r3, #3
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	81a3      	strh	r3, [r4, #12]
 800355c:	89a0      	ldrh	r0, [r4, #12]
 800355e:	4305      	orrs	r5, r0
 8003560:	81a5      	strh	r5, [r4, #12]
 8003562:	e7cd      	b.n	8003500 <__smakebuf_r+0x18>
 8003564:	080032f9 	.word	0x080032f9

08003568 <malloc>:
 8003568:	4b02      	ldr	r3, [pc, #8]	; (8003574 <malloc+0xc>)
 800356a:	4601      	mov	r1, r0
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	f000 b853 	b.w	8003618 <_malloc_r>
 8003572:	bf00      	nop
 8003574:	2000000c 	.word	0x2000000c

08003578 <_free_r>:
 8003578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800357a:	2900      	cmp	r1, #0
 800357c:	d048      	beq.n	8003610 <_free_r+0x98>
 800357e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003582:	9001      	str	r0, [sp, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	f1a1 0404 	sub.w	r4, r1, #4
 800358a:	bfb8      	it	lt
 800358c:	18e4      	addlt	r4, r4, r3
 800358e:	f000 fcf5 	bl	8003f7c <__malloc_lock>
 8003592:	4a20      	ldr	r2, [pc, #128]	; (8003614 <_free_r+0x9c>)
 8003594:	9801      	ldr	r0, [sp, #4]
 8003596:	6813      	ldr	r3, [r2, #0]
 8003598:	4615      	mov	r5, r2
 800359a:	b933      	cbnz	r3, 80035aa <_free_r+0x32>
 800359c:	6063      	str	r3, [r4, #4]
 800359e:	6014      	str	r4, [r2, #0]
 80035a0:	b003      	add	sp, #12
 80035a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035a6:	f000 bcef 	b.w	8003f88 <__malloc_unlock>
 80035aa:	42a3      	cmp	r3, r4
 80035ac:	d90b      	bls.n	80035c6 <_free_r+0x4e>
 80035ae:	6821      	ldr	r1, [r4, #0]
 80035b0:	1862      	adds	r2, r4, r1
 80035b2:	4293      	cmp	r3, r2
 80035b4:	bf04      	itt	eq
 80035b6:	681a      	ldreq	r2, [r3, #0]
 80035b8:	685b      	ldreq	r3, [r3, #4]
 80035ba:	6063      	str	r3, [r4, #4]
 80035bc:	bf04      	itt	eq
 80035be:	1852      	addeq	r2, r2, r1
 80035c0:	6022      	streq	r2, [r4, #0]
 80035c2:	602c      	str	r4, [r5, #0]
 80035c4:	e7ec      	b.n	80035a0 <_free_r+0x28>
 80035c6:	461a      	mov	r2, r3
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	b10b      	cbz	r3, 80035d0 <_free_r+0x58>
 80035cc:	42a3      	cmp	r3, r4
 80035ce:	d9fa      	bls.n	80035c6 <_free_r+0x4e>
 80035d0:	6811      	ldr	r1, [r2, #0]
 80035d2:	1855      	adds	r5, r2, r1
 80035d4:	42a5      	cmp	r5, r4
 80035d6:	d10b      	bne.n	80035f0 <_free_r+0x78>
 80035d8:	6824      	ldr	r4, [r4, #0]
 80035da:	4421      	add	r1, r4
 80035dc:	1854      	adds	r4, r2, r1
 80035de:	42a3      	cmp	r3, r4
 80035e0:	6011      	str	r1, [r2, #0]
 80035e2:	d1dd      	bne.n	80035a0 <_free_r+0x28>
 80035e4:	681c      	ldr	r4, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	6053      	str	r3, [r2, #4]
 80035ea:	4421      	add	r1, r4
 80035ec:	6011      	str	r1, [r2, #0]
 80035ee:	e7d7      	b.n	80035a0 <_free_r+0x28>
 80035f0:	d902      	bls.n	80035f8 <_free_r+0x80>
 80035f2:	230c      	movs	r3, #12
 80035f4:	6003      	str	r3, [r0, #0]
 80035f6:	e7d3      	b.n	80035a0 <_free_r+0x28>
 80035f8:	6825      	ldr	r5, [r4, #0]
 80035fa:	1961      	adds	r1, r4, r5
 80035fc:	428b      	cmp	r3, r1
 80035fe:	bf04      	itt	eq
 8003600:	6819      	ldreq	r1, [r3, #0]
 8003602:	685b      	ldreq	r3, [r3, #4]
 8003604:	6063      	str	r3, [r4, #4]
 8003606:	bf04      	itt	eq
 8003608:	1949      	addeq	r1, r1, r5
 800360a:	6021      	streq	r1, [r4, #0]
 800360c:	6054      	str	r4, [r2, #4]
 800360e:	e7c7      	b.n	80035a0 <_free_r+0x28>
 8003610:	b003      	add	sp, #12
 8003612:	bd30      	pop	{r4, r5, pc}
 8003614:	20000090 	.word	0x20000090

08003618 <_malloc_r>:
 8003618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361a:	1ccd      	adds	r5, r1, #3
 800361c:	f025 0503 	bic.w	r5, r5, #3
 8003620:	3508      	adds	r5, #8
 8003622:	2d0c      	cmp	r5, #12
 8003624:	bf38      	it	cc
 8003626:	250c      	movcc	r5, #12
 8003628:	2d00      	cmp	r5, #0
 800362a:	4606      	mov	r6, r0
 800362c:	db01      	blt.n	8003632 <_malloc_r+0x1a>
 800362e:	42a9      	cmp	r1, r5
 8003630:	d903      	bls.n	800363a <_malloc_r+0x22>
 8003632:	230c      	movs	r3, #12
 8003634:	6033      	str	r3, [r6, #0]
 8003636:	2000      	movs	r0, #0
 8003638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800363a:	f000 fc9f 	bl	8003f7c <__malloc_lock>
 800363e:	4921      	ldr	r1, [pc, #132]	; (80036c4 <_malloc_r+0xac>)
 8003640:	680a      	ldr	r2, [r1, #0]
 8003642:	4614      	mov	r4, r2
 8003644:	b99c      	cbnz	r4, 800366e <_malloc_r+0x56>
 8003646:	4f20      	ldr	r7, [pc, #128]	; (80036c8 <_malloc_r+0xb0>)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	b923      	cbnz	r3, 8003656 <_malloc_r+0x3e>
 800364c:	4621      	mov	r1, r4
 800364e:	4630      	mov	r0, r6
 8003650:	f000 fb2a 	bl	8003ca8 <_sbrk_r>
 8003654:	6038      	str	r0, [r7, #0]
 8003656:	4629      	mov	r1, r5
 8003658:	4630      	mov	r0, r6
 800365a:	f000 fb25 	bl	8003ca8 <_sbrk_r>
 800365e:	1c43      	adds	r3, r0, #1
 8003660:	d123      	bne.n	80036aa <_malloc_r+0x92>
 8003662:	230c      	movs	r3, #12
 8003664:	6033      	str	r3, [r6, #0]
 8003666:	4630      	mov	r0, r6
 8003668:	f000 fc8e 	bl	8003f88 <__malloc_unlock>
 800366c:	e7e3      	b.n	8003636 <_malloc_r+0x1e>
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	1b5b      	subs	r3, r3, r5
 8003672:	d417      	bmi.n	80036a4 <_malloc_r+0x8c>
 8003674:	2b0b      	cmp	r3, #11
 8003676:	d903      	bls.n	8003680 <_malloc_r+0x68>
 8003678:	6023      	str	r3, [r4, #0]
 800367a:	441c      	add	r4, r3
 800367c:	6025      	str	r5, [r4, #0]
 800367e:	e004      	b.n	800368a <_malloc_r+0x72>
 8003680:	6863      	ldr	r3, [r4, #4]
 8003682:	42a2      	cmp	r2, r4
 8003684:	bf0c      	ite	eq
 8003686:	600b      	streq	r3, [r1, #0]
 8003688:	6053      	strne	r3, [r2, #4]
 800368a:	4630      	mov	r0, r6
 800368c:	f000 fc7c 	bl	8003f88 <__malloc_unlock>
 8003690:	f104 000b 	add.w	r0, r4, #11
 8003694:	1d23      	adds	r3, r4, #4
 8003696:	f020 0007 	bic.w	r0, r0, #7
 800369a:	1ac2      	subs	r2, r0, r3
 800369c:	d0cc      	beq.n	8003638 <_malloc_r+0x20>
 800369e:	1a1b      	subs	r3, r3, r0
 80036a0:	50a3      	str	r3, [r4, r2]
 80036a2:	e7c9      	b.n	8003638 <_malloc_r+0x20>
 80036a4:	4622      	mov	r2, r4
 80036a6:	6864      	ldr	r4, [r4, #4]
 80036a8:	e7cc      	b.n	8003644 <_malloc_r+0x2c>
 80036aa:	1cc4      	adds	r4, r0, #3
 80036ac:	f024 0403 	bic.w	r4, r4, #3
 80036b0:	42a0      	cmp	r0, r4
 80036b2:	d0e3      	beq.n	800367c <_malloc_r+0x64>
 80036b4:	1a21      	subs	r1, r4, r0
 80036b6:	4630      	mov	r0, r6
 80036b8:	f000 faf6 	bl	8003ca8 <_sbrk_r>
 80036bc:	3001      	adds	r0, #1
 80036be:	d1dd      	bne.n	800367c <_malloc_r+0x64>
 80036c0:	e7cf      	b.n	8003662 <_malloc_r+0x4a>
 80036c2:	bf00      	nop
 80036c4:	20000090 	.word	0x20000090
 80036c8:	20000094 	.word	0x20000094

080036cc <__sfputc_r>:
 80036cc:	6893      	ldr	r3, [r2, #8]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	b410      	push	{r4}
 80036d4:	6093      	str	r3, [r2, #8]
 80036d6:	da08      	bge.n	80036ea <__sfputc_r+0x1e>
 80036d8:	6994      	ldr	r4, [r2, #24]
 80036da:	42a3      	cmp	r3, r4
 80036dc:	db01      	blt.n	80036e2 <__sfputc_r+0x16>
 80036de:	290a      	cmp	r1, #10
 80036e0:	d103      	bne.n	80036ea <__sfputc_r+0x1e>
 80036e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036e6:	f000 bb33 	b.w	8003d50 <__swbuf_r>
 80036ea:	6813      	ldr	r3, [r2, #0]
 80036ec:	1c58      	adds	r0, r3, #1
 80036ee:	6010      	str	r0, [r2, #0]
 80036f0:	7019      	strb	r1, [r3, #0]
 80036f2:	4608      	mov	r0, r1
 80036f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <__sfputs_r>:
 80036fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fc:	4606      	mov	r6, r0
 80036fe:	460f      	mov	r7, r1
 8003700:	4614      	mov	r4, r2
 8003702:	18d5      	adds	r5, r2, r3
 8003704:	42ac      	cmp	r4, r5
 8003706:	d101      	bne.n	800370c <__sfputs_r+0x12>
 8003708:	2000      	movs	r0, #0
 800370a:	e007      	b.n	800371c <__sfputs_r+0x22>
 800370c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003710:	463a      	mov	r2, r7
 8003712:	4630      	mov	r0, r6
 8003714:	f7ff ffda 	bl	80036cc <__sfputc_r>
 8003718:	1c43      	adds	r3, r0, #1
 800371a:	d1f3      	bne.n	8003704 <__sfputs_r+0xa>
 800371c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003720 <_vfiprintf_r>:
 8003720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003724:	460d      	mov	r5, r1
 8003726:	b09d      	sub	sp, #116	; 0x74
 8003728:	4614      	mov	r4, r2
 800372a:	4698      	mov	r8, r3
 800372c:	4606      	mov	r6, r0
 800372e:	b118      	cbz	r0, 8003738 <_vfiprintf_r+0x18>
 8003730:	6983      	ldr	r3, [r0, #24]
 8003732:	b90b      	cbnz	r3, 8003738 <_vfiprintf_r+0x18>
 8003734:	f7ff fe14 	bl	8003360 <__sinit>
 8003738:	4b89      	ldr	r3, [pc, #548]	; (8003960 <_vfiprintf_r+0x240>)
 800373a:	429d      	cmp	r5, r3
 800373c:	d11b      	bne.n	8003776 <_vfiprintf_r+0x56>
 800373e:	6875      	ldr	r5, [r6, #4]
 8003740:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003742:	07d9      	lsls	r1, r3, #31
 8003744:	d405      	bmi.n	8003752 <_vfiprintf_r+0x32>
 8003746:	89ab      	ldrh	r3, [r5, #12]
 8003748:	059a      	lsls	r2, r3, #22
 800374a:	d402      	bmi.n	8003752 <_vfiprintf_r+0x32>
 800374c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800374e:	f7ff fea5 	bl	800349c <__retarget_lock_acquire_recursive>
 8003752:	89ab      	ldrh	r3, [r5, #12]
 8003754:	071b      	lsls	r3, r3, #28
 8003756:	d501      	bpl.n	800375c <_vfiprintf_r+0x3c>
 8003758:	692b      	ldr	r3, [r5, #16]
 800375a:	b9eb      	cbnz	r3, 8003798 <_vfiprintf_r+0x78>
 800375c:	4629      	mov	r1, r5
 800375e:	4630      	mov	r0, r6
 8003760:	f000 fb5a 	bl	8003e18 <__swsetup_r>
 8003764:	b1c0      	cbz	r0, 8003798 <_vfiprintf_r+0x78>
 8003766:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003768:	07dc      	lsls	r4, r3, #31
 800376a:	d50e      	bpl.n	800378a <_vfiprintf_r+0x6a>
 800376c:	f04f 30ff 	mov.w	r0, #4294967295
 8003770:	b01d      	add	sp, #116	; 0x74
 8003772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003776:	4b7b      	ldr	r3, [pc, #492]	; (8003964 <_vfiprintf_r+0x244>)
 8003778:	429d      	cmp	r5, r3
 800377a:	d101      	bne.n	8003780 <_vfiprintf_r+0x60>
 800377c:	68b5      	ldr	r5, [r6, #8]
 800377e:	e7df      	b.n	8003740 <_vfiprintf_r+0x20>
 8003780:	4b79      	ldr	r3, [pc, #484]	; (8003968 <_vfiprintf_r+0x248>)
 8003782:	429d      	cmp	r5, r3
 8003784:	bf08      	it	eq
 8003786:	68f5      	ldreq	r5, [r6, #12]
 8003788:	e7da      	b.n	8003740 <_vfiprintf_r+0x20>
 800378a:	89ab      	ldrh	r3, [r5, #12]
 800378c:	0598      	lsls	r0, r3, #22
 800378e:	d4ed      	bmi.n	800376c <_vfiprintf_r+0x4c>
 8003790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003792:	f7ff fe84 	bl	800349e <__retarget_lock_release_recursive>
 8003796:	e7e9      	b.n	800376c <_vfiprintf_r+0x4c>
 8003798:	2300      	movs	r3, #0
 800379a:	9309      	str	r3, [sp, #36]	; 0x24
 800379c:	2320      	movs	r3, #32
 800379e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80037a6:	2330      	movs	r3, #48	; 0x30
 80037a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800396c <_vfiprintf_r+0x24c>
 80037ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037b0:	f04f 0901 	mov.w	r9, #1
 80037b4:	4623      	mov	r3, r4
 80037b6:	469a      	mov	sl, r3
 80037b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037bc:	b10a      	cbz	r2, 80037c2 <_vfiprintf_r+0xa2>
 80037be:	2a25      	cmp	r2, #37	; 0x25
 80037c0:	d1f9      	bne.n	80037b6 <_vfiprintf_r+0x96>
 80037c2:	ebba 0b04 	subs.w	fp, sl, r4
 80037c6:	d00b      	beq.n	80037e0 <_vfiprintf_r+0xc0>
 80037c8:	465b      	mov	r3, fp
 80037ca:	4622      	mov	r2, r4
 80037cc:	4629      	mov	r1, r5
 80037ce:	4630      	mov	r0, r6
 80037d0:	f7ff ff93 	bl	80036fa <__sfputs_r>
 80037d4:	3001      	adds	r0, #1
 80037d6:	f000 80aa 	beq.w	800392e <_vfiprintf_r+0x20e>
 80037da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037dc:	445a      	add	r2, fp
 80037de:	9209      	str	r2, [sp, #36]	; 0x24
 80037e0:	f89a 3000 	ldrb.w	r3, [sl]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80a2 	beq.w	800392e <_vfiprintf_r+0x20e>
 80037ea:	2300      	movs	r3, #0
 80037ec:	f04f 32ff 	mov.w	r2, #4294967295
 80037f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037f4:	f10a 0a01 	add.w	sl, sl, #1
 80037f8:	9304      	str	r3, [sp, #16]
 80037fa:	9307      	str	r3, [sp, #28]
 80037fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003800:	931a      	str	r3, [sp, #104]	; 0x68
 8003802:	4654      	mov	r4, sl
 8003804:	2205      	movs	r2, #5
 8003806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800380a:	4858      	ldr	r0, [pc, #352]	; (800396c <_vfiprintf_r+0x24c>)
 800380c:	f7fc fd08 	bl	8000220 <memchr>
 8003810:	9a04      	ldr	r2, [sp, #16]
 8003812:	b9d8      	cbnz	r0, 800384c <_vfiprintf_r+0x12c>
 8003814:	06d1      	lsls	r1, r2, #27
 8003816:	bf44      	itt	mi
 8003818:	2320      	movmi	r3, #32
 800381a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800381e:	0713      	lsls	r3, r2, #28
 8003820:	bf44      	itt	mi
 8003822:	232b      	movmi	r3, #43	; 0x2b
 8003824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003828:	f89a 3000 	ldrb.w	r3, [sl]
 800382c:	2b2a      	cmp	r3, #42	; 0x2a
 800382e:	d015      	beq.n	800385c <_vfiprintf_r+0x13c>
 8003830:	9a07      	ldr	r2, [sp, #28]
 8003832:	4654      	mov	r4, sl
 8003834:	2000      	movs	r0, #0
 8003836:	f04f 0c0a 	mov.w	ip, #10
 800383a:	4621      	mov	r1, r4
 800383c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003840:	3b30      	subs	r3, #48	; 0x30
 8003842:	2b09      	cmp	r3, #9
 8003844:	d94e      	bls.n	80038e4 <_vfiprintf_r+0x1c4>
 8003846:	b1b0      	cbz	r0, 8003876 <_vfiprintf_r+0x156>
 8003848:	9207      	str	r2, [sp, #28]
 800384a:	e014      	b.n	8003876 <_vfiprintf_r+0x156>
 800384c:	eba0 0308 	sub.w	r3, r0, r8
 8003850:	fa09 f303 	lsl.w	r3, r9, r3
 8003854:	4313      	orrs	r3, r2
 8003856:	9304      	str	r3, [sp, #16]
 8003858:	46a2      	mov	sl, r4
 800385a:	e7d2      	b.n	8003802 <_vfiprintf_r+0xe2>
 800385c:	9b03      	ldr	r3, [sp, #12]
 800385e:	1d19      	adds	r1, r3, #4
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	9103      	str	r1, [sp, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	bfbb      	ittet	lt
 8003868:	425b      	neglt	r3, r3
 800386a:	f042 0202 	orrlt.w	r2, r2, #2
 800386e:	9307      	strge	r3, [sp, #28]
 8003870:	9307      	strlt	r3, [sp, #28]
 8003872:	bfb8      	it	lt
 8003874:	9204      	strlt	r2, [sp, #16]
 8003876:	7823      	ldrb	r3, [r4, #0]
 8003878:	2b2e      	cmp	r3, #46	; 0x2e
 800387a:	d10c      	bne.n	8003896 <_vfiprintf_r+0x176>
 800387c:	7863      	ldrb	r3, [r4, #1]
 800387e:	2b2a      	cmp	r3, #42	; 0x2a
 8003880:	d135      	bne.n	80038ee <_vfiprintf_r+0x1ce>
 8003882:	9b03      	ldr	r3, [sp, #12]
 8003884:	1d1a      	adds	r2, r3, #4
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	9203      	str	r2, [sp, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	bfb8      	it	lt
 800388e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003892:	3402      	adds	r4, #2
 8003894:	9305      	str	r3, [sp, #20]
 8003896:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800397c <_vfiprintf_r+0x25c>
 800389a:	7821      	ldrb	r1, [r4, #0]
 800389c:	2203      	movs	r2, #3
 800389e:	4650      	mov	r0, sl
 80038a0:	f7fc fcbe 	bl	8000220 <memchr>
 80038a4:	b140      	cbz	r0, 80038b8 <_vfiprintf_r+0x198>
 80038a6:	2340      	movs	r3, #64	; 0x40
 80038a8:	eba0 000a 	sub.w	r0, r0, sl
 80038ac:	fa03 f000 	lsl.w	r0, r3, r0
 80038b0:	9b04      	ldr	r3, [sp, #16]
 80038b2:	4303      	orrs	r3, r0
 80038b4:	3401      	adds	r4, #1
 80038b6:	9304      	str	r3, [sp, #16]
 80038b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038bc:	482c      	ldr	r0, [pc, #176]	; (8003970 <_vfiprintf_r+0x250>)
 80038be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038c2:	2206      	movs	r2, #6
 80038c4:	f7fc fcac 	bl	8000220 <memchr>
 80038c8:	2800      	cmp	r0, #0
 80038ca:	d03f      	beq.n	800394c <_vfiprintf_r+0x22c>
 80038cc:	4b29      	ldr	r3, [pc, #164]	; (8003974 <_vfiprintf_r+0x254>)
 80038ce:	bb1b      	cbnz	r3, 8003918 <_vfiprintf_r+0x1f8>
 80038d0:	9b03      	ldr	r3, [sp, #12]
 80038d2:	3307      	adds	r3, #7
 80038d4:	f023 0307 	bic.w	r3, r3, #7
 80038d8:	3308      	adds	r3, #8
 80038da:	9303      	str	r3, [sp, #12]
 80038dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038de:	443b      	add	r3, r7
 80038e0:	9309      	str	r3, [sp, #36]	; 0x24
 80038e2:	e767      	b.n	80037b4 <_vfiprintf_r+0x94>
 80038e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80038e8:	460c      	mov	r4, r1
 80038ea:	2001      	movs	r0, #1
 80038ec:	e7a5      	b.n	800383a <_vfiprintf_r+0x11a>
 80038ee:	2300      	movs	r3, #0
 80038f0:	3401      	adds	r4, #1
 80038f2:	9305      	str	r3, [sp, #20]
 80038f4:	4619      	mov	r1, r3
 80038f6:	f04f 0c0a 	mov.w	ip, #10
 80038fa:	4620      	mov	r0, r4
 80038fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003900:	3a30      	subs	r2, #48	; 0x30
 8003902:	2a09      	cmp	r2, #9
 8003904:	d903      	bls.n	800390e <_vfiprintf_r+0x1ee>
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0c5      	beq.n	8003896 <_vfiprintf_r+0x176>
 800390a:	9105      	str	r1, [sp, #20]
 800390c:	e7c3      	b.n	8003896 <_vfiprintf_r+0x176>
 800390e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003912:	4604      	mov	r4, r0
 8003914:	2301      	movs	r3, #1
 8003916:	e7f0      	b.n	80038fa <_vfiprintf_r+0x1da>
 8003918:	ab03      	add	r3, sp, #12
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	462a      	mov	r2, r5
 800391e:	4b16      	ldr	r3, [pc, #88]	; (8003978 <_vfiprintf_r+0x258>)
 8003920:	a904      	add	r1, sp, #16
 8003922:	4630      	mov	r0, r6
 8003924:	f3af 8000 	nop.w
 8003928:	4607      	mov	r7, r0
 800392a:	1c78      	adds	r0, r7, #1
 800392c:	d1d6      	bne.n	80038dc <_vfiprintf_r+0x1bc>
 800392e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003930:	07d9      	lsls	r1, r3, #31
 8003932:	d405      	bmi.n	8003940 <_vfiprintf_r+0x220>
 8003934:	89ab      	ldrh	r3, [r5, #12]
 8003936:	059a      	lsls	r2, r3, #22
 8003938:	d402      	bmi.n	8003940 <_vfiprintf_r+0x220>
 800393a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800393c:	f7ff fdaf 	bl	800349e <__retarget_lock_release_recursive>
 8003940:	89ab      	ldrh	r3, [r5, #12]
 8003942:	065b      	lsls	r3, r3, #25
 8003944:	f53f af12 	bmi.w	800376c <_vfiprintf_r+0x4c>
 8003948:	9809      	ldr	r0, [sp, #36]	; 0x24
 800394a:	e711      	b.n	8003770 <_vfiprintf_r+0x50>
 800394c:	ab03      	add	r3, sp, #12
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	462a      	mov	r2, r5
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <_vfiprintf_r+0x258>)
 8003954:	a904      	add	r1, sp, #16
 8003956:	4630      	mov	r0, r6
 8003958:	f000 f880 	bl	8003a5c <_printf_i>
 800395c:	e7e4      	b.n	8003928 <_vfiprintf_r+0x208>
 800395e:	bf00      	nop
 8003960:	08004074 	.word	0x08004074
 8003964:	08004094 	.word	0x08004094
 8003968:	08004054 	.word	0x08004054
 800396c:	080040b4 	.word	0x080040b4
 8003970:	080040be 	.word	0x080040be
 8003974:	00000000 	.word	0x00000000
 8003978:	080036fb 	.word	0x080036fb
 800397c:	080040ba 	.word	0x080040ba

08003980 <_printf_common>:
 8003980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003984:	4616      	mov	r6, r2
 8003986:	4699      	mov	r9, r3
 8003988:	688a      	ldr	r2, [r1, #8]
 800398a:	690b      	ldr	r3, [r1, #16]
 800398c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003990:	4293      	cmp	r3, r2
 8003992:	bfb8      	it	lt
 8003994:	4613      	movlt	r3, r2
 8003996:	6033      	str	r3, [r6, #0]
 8003998:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800399c:	4607      	mov	r7, r0
 800399e:	460c      	mov	r4, r1
 80039a0:	b10a      	cbz	r2, 80039a6 <_printf_common+0x26>
 80039a2:	3301      	adds	r3, #1
 80039a4:	6033      	str	r3, [r6, #0]
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	0699      	lsls	r1, r3, #26
 80039aa:	bf42      	ittt	mi
 80039ac:	6833      	ldrmi	r3, [r6, #0]
 80039ae:	3302      	addmi	r3, #2
 80039b0:	6033      	strmi	r3, [r6, #0]
 80039b2:	6825      	ldr	r5, [r4, #0]
 80039b4:	f015 0506 	ands.w	r5, r5, #6
 80039b8:	d106      	bne.n	80039c8 <_printf_common+0x48>
 80039ba:	f104 0a19 	add.w	sl, r4, #25
 80039be:	68e3      	ldr	r3, [r4, #12]
 80039c0:	6832      	ldr	r2, [r6, #0]
 80039c2:	1a9b      	subs	r3, r3, r2
 80039c4:	42ab      	cmp	r3, r5
 80039c6:	dc26      	bgt.n	8003a16 <_printf_common+0x96>
 80039c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039cc:	1e13      	subs	r3, r2, #0
 80039ce:	6822      	ldr	r2, [r4, #0]
 80039d0:	bf18      	it	ne
 80039d2:	2301      	movne	r3, #1
 80039d4:	0692      	lsls	r2, r2, #26
 80039d6:	d42b      	bmi.n	8003a30 <_printf_common+0xb0>
 80039d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039dc:	4649      	mov	r1, r9
 80039de:	4638      	mov	r0, r7
 80039e0:	47c0      	blx	r8
 80039e2:	3001      	adds	r0, #1
 80039e4:	d01e      	beq.n	8003a24 <_printf_common+0xa4>
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	68e5      	ldr	r5, [r4, #12]
 80039ea:	6832      	ldr	r2, [r6, #0]
 80039ec:	f003 0306 	and.w	r3, r3, #6
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	bf08      	it	eq
 80039f4:	1aad      	subeq	r5, r5, r2
 80039f6:	68a3      	ldr	r3, [r4, #8]
 80039f8:	6922      	ldr	r2, [r4, #16]
 80039fa:	bf0c      	ite	eq
 80039fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a00:	2500      	movne	r5, #0
 8003a02:	4293      	cmp	r3, r2
 8003a04:	bfc4      	itt	gt
 8003a06:	1a9b      	subgt	r3, r3, r2
 8003a08:	18ed      	addgt	r5, r5, r3
 8003a0a:	2600      	movs	r6, #0
 8003a0c:	341a      	adds	r4, #26
 8003a0e:	42b5      	cmp	r5, r6
 8003a10:	d11a      	bne.n	8003a48 <_printf_common+0xc8>
 8003a12:	2000      	movs	r0, #0
 8003a14:	e008      	b.n	8003a28 <_printf_common+0xa8>
 8003a16:	2301      	movs	r3, #1
 8003a18:	4652      	mov	r2, sl
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	4638      	mov	r0, r7
 8003a1e:	47c0      	blx	r8
 8003a20:	3001      	adds	r0, #1
 8003a22:	d103      	bne.n	8003a2c <_printf_common+0xac>
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a2c:	3501      	adds	r5, #1
 8003a2e:	e7c6      	b.n	80039be <_printf_common+0x3e>
 8003a30:	18e1      	adds	r1, r4, r3
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	2030      	movs	r0, #48	; 0x30
 8003a36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a3a:	4422      	add	r2, r4
 8003a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a44:	3302      	adds	r3, #2
 8003a46:	e7c7      	b.n	80039d8 <_printf_common+0x58>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	4622      	mov	r2, r4
 8003a4c:	4649      	mov	r1, r9
 8003a4e:	4638      	mov	r0, r7
 8003a50:	47c0      	blx	r8
 8003a52:	3001      	adds	r0, #1
 8003a54:	d0e6      	beq.n	8003a24 <_printf_common+0xa4>
 8003a56:	3601      	adds	r6, #1
 8003a58:	e7d9      	b.n	8003a0e <_printf_common+0x8e>
	...

08003a5c <_printf_i>:
 8003a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a60:	460c      	mov	r4, r1
 8003a62:	4691      	mov	r9, r2
 8003a64:	7e27      	ldrb	r7, [r4, #24]
 8003a66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a68:	2f78      	cmp	r7, #120	; 0x78
 8003a6a:	4680      	mov	r8, r0
 8003a6c:	469a      	mov	sl, r3
 8003a6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a72:	d807      	bhi.n	8003a84 <_printf_i+0x28>
 8003a74:	2f62      	cmp	r7, #98	; 0x62
 8003a76:	d80a      	bhi.n	8003a8e <_printf_i+0x32>
 8003a78:	2f00      	cmp	r7, #0
 8003a7a:	f000 80d8 	beq.w	8003c2e <_printf_i+0x1d2>
 8003a7e:	2f58      	cmp	r7, #88	; 0x58
 8003a80:	f000 80a3 	beq.w	8003bca <_printf_i+0x16e>
 8003a84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a8c:	e03a      	b.n	8003b04 <_printf_i+0xa8>
 8003a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a92:	2b15      	cmp	r3, #21
 8003a94:	d8f6      	bhi.n	8003a84 <_printf_i+0x28>
 8003a96:	a001      	add	r0, pc, #4	; (adr r0, 8003a9c <_printf_i+0x40>)
 8003a98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a9c:	08003af5 	.word	0x08003af5
 8003aa0:	08003b09 	.word	0x08003b09
 8003aa4:	08003a85 	.word	0x08003a85
 8003aa8:	08003a85 	.word	0x08003a85
 8003aac:	08003a85 	.word	0x08003a85
 8003ab0:	08003a85 	.word	0x08003a85
 8003ab4:	08003b09 	.word	0x08003b09
 8003ab8:	08003a85 	.word	0x08003a85
 8003abc:	08003a85 	.word	0x08003a85
 8003ac0:	08003a85 	.word	0x08003a85
 8003ac4:	08003a85 	.word	0x08003a85
 8003ac8:	08003c15 	.word	0x08003c15
 8003acc:	08003b39 	.word	0x08003b39
 8003ad0:	08003bf7 	.word	0x08003bf7
 8003ad4:	08003a85 	.word	0x08003a85
 8003ad8:	08003a85 	.word	0x08003a85
 8003adc:	08003c37 	.word	0x08003c37
 8003ae0:	08003a85 	.word	0x08003a85
 8003ae4:	08003b39 	.word	0x08003b39
 8003ae8:	08003a85 	.word	0x08003a85
 8003aec:	08003a85 	.word	0x08003a85
 8003af0:	08003bff 	.word	0x08003bff
 8003af4:	680b      	ldr	r3, [r1, #0]
 8003af6:	1d1a      	adds	r2, r3, #4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	600a      	str	r2, [r1, #0]
 8003afc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0a3      	b.n	8003c50 <_printf_i+0x1f4>
 8003b08:	6825      	ldr	r5, [r4, #0]
 8003b0a:	6808      	ldr	r0, [r1, #0]
 8003b0c:	062e      	lsls	r6, r5, #24
 8003b0e:	f100 0304 	add.w	r3, r0, #4
 8003b12:	d50a      	bpl.n	8003b2a <_printf_i+0xce>
 8003b14:	6805      	ldr	r5, [r0, #0]
 8003b16:	600b      	str	r3, [r1, #0]
 8003b18:	2d00      	cmp	r5, #0
 8003b1a:	da03      	bge.n	8003b24 <_printf_i+0xc8>
 8003b1c:	232d      	movs	r3, #45	; 0x2d
 8003b1e:	426d      	negs	r5, r5
 8003b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b24:	485e      	ldr	r0, [pc, #376]	; (8003ca0 <_printf_i+0x244>)
 8003b26:	230a      	movs	r3, #10
 8003b28:	e019      	b.n	8003b5e <_printf_i+0x102>
 8003b2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b2e:	6805      	ldr	r5, [r0, #0]
 8003b30:	600b      	str	r3, [r1, #0]
 8003b32:	bf18      	it	ne
 8003b34:	b22d      	sxthne	r5, r5
 8003b36:	e7ef      	b.n	8003b18 <_printf_i+0xbc>
 8003b38:	680b      	ldr	r3, [r1, #0]
 8003b3a:	6825      	ldr	r5, [r4, #0]
 8003b3c:	1d18      	adds	r0, r3, #4
 8003b3e:	6008      	str	r0, [r1, #0]
 8003b40:	0628      	lsls	r0, r5, #24
 8003b42:	d501      	bpl.n	8003b48 <_printf_i+0xec>
 8003b44:	681d      	ldr	r5, [r3, #0]
 8003b46:	e002      	b.n	8003b4e <_printf_i+0xf2>
 8003b48:	0669      	lsls	r1, r5, #25
 8003b4a:	d5fb      	bpl.n	8003b44 <_printf_i+0xe8>
 8003b4c:	881d      	ldrh	r5, [r3, #0]
 8003b4e:	4854      	ldr	r0, [pc, #336]	; (8003ca0 <_printf_i+0x244>)
 8003b50:	2f6f      	cmp	r7, #111	; 0x6f
 8003b52:	bf0c      	ite	eq
 8003b54:	2308      	moveq	r3, #8
 8003b56:	230a      	movne	r3, #10
 8003b58:	2100      	movs	r1, #0
 8003b5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b5e:	6866      	ldr	r6, [r4, #4]
 8003b60:	60a6      	str	r6, [r4, #8]
 8003b62:	2e00      	cmp	r6, #0
 8003b64:	bfa2      	ittt	ge
 8003b66:	6821      	ldrge	r1, [r4, #0]
 8003b68:	f021 0104 	bicge.w	r1, r1, #4
 8003b6c:	6021      	strge	r1, [r4, #0]
 8003b6e:	b90d      	cbnz	r5, 8003b74 <_printf_i+0x118>
 8003b70:	2e00      	cmp	r6, #0
 8003b72:	d04d      	beq.n	8003c10 <_printf_i+0x1b4>
 8003b74:	4616      	mov	r6, r2
 8003b76:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b7a:	fb03 5711 	mls	r7, r3, r1, r5
 8003b7e:	5dc7      	ldrb	r7, [r0, r7]
 8003b80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b84:	462f      	mov	r7, r5
 8003b86:	42bb      	cmp	r3, r7
 8003b88:	460d      	mov	r5, r1
 8003b8a:	d9f4      	bls.n	8003b76 <_printf_i+0x11a>
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d10b      	bne.n	8003ba8 <_printf_i+0x14c>
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	07df      	lsls	r7, r3, #31
 8003b94:	d508      	bpl.n	8003ba8 <_printf_i+0x14c>
 8003b96:	6923      	ldr	r3, [r4, #16]
 8003b98:	6861      	ldr	r1, [r4, #4]
 8003b9a:	4299      	cmp	r1, r3
 8003b9c:	bfde      	ittt	le
 8003b9e:	2330      	movle	r3, #48	; 0x30
 8003ba0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ba4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ba8:	1b92      	subs	r2, r2, r6
 8003baa:	6122      	str	r2, [r4, #16]
 8003bac:	f8cd a000 	str.w	sl, [sp]
 8003bb0:	464b      	mov	r3, r9
 8003bb2:	aa03      	add	r2, sp, #12
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	4640      	mov	r0, r8
 8003bb8:	f7ff fee2 	bl	8003980 <_printf_common>
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	d14c      	bne.n	8003c5a <_printf_i+0x1fe>
 8003bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc4:	b004      	add	sp, #16
 8003bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bca:	4835      	ldr	r0, [pc, #212]	; (8003ca0 <_printf_i+0x244>)
 8003bcc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003bd0:	6823      	ldr	r3, [r4, #0]
 8003bd2:	680e      	ldr	r6, [r1, #0]
 8003bd4:	061f      	lsls	r7, r3, #24
 8003bd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8003bda:	600e      	str	r6, [r1, #0]
 8003bdc:	d514      	bpl.n	8003c08 <_printf_i+0x1ac>
 8003bde:	07d9      	lsls	r1, r3, #31
 8003be0:	bf44      	itt	mi
 8003be2:	f043 0320 	orrmi.w	r3, r3, #32
 8003be6:	6023      	strmi	r3, [r4, #0]
 8003be8:	b91d      	cbnz	r5, 8003bf2 <_printf_i+0x196>
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	f023 0320 	bic.w	r3, r3, #32
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	2310      	movs	r3, #16
 8003bf4:	e7b0      	b.n	8003b58 <_printf_i+0xfc>
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	f043 0320 	orr.w	r3, r3, #32
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	2378      	movs	r3, #120	; 0x78
 8003c00:	4828      	ldr	r0, [pc, #160]	; (8003ca4 <_printf_i+0x248>)
 8003c02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c06:	e7e3      	b.n	8003bd0 <_printf_i+0x174>
 8003c08:	065e      	lsls	r6, r3, #25
 8003c0a:	bf48      	it	mi
 8003c0c:	b2ad      	uxthmi	r5, r5
 8003c0e:	e7e6      	b.n	8003bde <_printf_i+0x182>
 8003c10:	4616      	mov	r6, r2
 8003c12:	e7bb      	b.n	8003b8c <_printf_i+0x130>
 8003c14:	680b      	ldr	r3, [r1, #0]
 8003c16:	6826      	ldr	r6, [r4, #0]
 8003c18:	6960      	ldr	r0, [r4, #20]
 8003c1a:	1d1d      	adds	r5, r3, #4
 8003c1c:	600d      	str	r5, [r1, #0]
 8003c1e:	0635      	lsls	r5, r6, #24
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	d501      	bpl.n	8003c28 <_printf_i+0x1cc>
 8003c24:	6018      	str	r0, [r3, #0]
 8003c26:	e002      	b.n	8003c2e <_printf_i+0x1d2>
 8003c28:	0671      	lsls	r1, r6, #25
 8003c2a:	d5fb      	bpl.n	8003c24 <_printf_i+0x1c8>
 8003c2c:	8018      	strh	r0, [r3, #0]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	6123      	str	r3, [r4, #16]
 8003c32:	4616      	mov	r6, r2
 8003c34:	e7ba      	b.n	8003bac <_printf_i+0x150>
 8003c36:	680b      	ldr	r3, [r1, #0]
 8003c38:	1d1a      	adds	r2, r3, #4
 8003c3a:	600a      	str	r2, [r1, #0]
 8003c3c:	681e      	ldr	r6, [r3, #0]
 8003c3e:	6862      	ldr	r2, [r4, #4]
 8003c40:	2100      	movs	r1, #0
 8003c42:	4630      	mov	r0, r6
 8003c44:	f7fc faec 	bl	8000220 <memchr>
 8003c48:	b108      	cbz	r0, 8003c4e <_printf_i+0x1f2>
 8003c4a:	1b80      	subs	r0, r0, r6
 8003c4c:	6060      	str	r0, [r4, #4]
 8003c4e:	6863      	ldr	r3, [r4, #4]
 8003c50:	6123      	str	r3, [r4, #16]
 8003c52:	2300      	movs	r3, #0
 8003c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c58:	e7a8      	b.n	8003bac <_printf_i+0x150>
 8003c5a:	6923      	ldr	r3, [r4, #16]
 8003c5c:	4632      	mov	r2, r6
 8003c5e:	4649      	mov	r1, r9
 8003c60:	4640      	mov	r0, r8
 8003c62:	47d0      	blx	sl
 8003c64:	3001      	adds	r0, #1
 8003c66:	d0ab      	beq.n	8003bc0 <_printf_i+0x164>
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	079b      	lsls	r3, r3, #30
 8003c6c:	d413      	bmi.n	8003c96 <_printf_i+0x23a>
 8003c6e:	68e0      	ldr	r0, [r4, #12]
 8003c70:	9b03      	ldr	r3, [sp, #12]
 8003c72:	4298      	cmp	r0, r3
 8003c74:	bfb8      	it	lt
 8003c76:	4618      	movlt	r0, r3
 8003c78:	e7a4      	b.n	8003bc4 <_printf_i+0x168>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	4632      	mov	r2, r6
 8003c7e:	4649      	mov	r1, r9
 8003c80:	4640      	mov	r0, r8
 8003c82:	47d0      	blx	sl
 8003c84:	3001      	adds	r0, #1
 8003c86:	d09b      	beq.n	8003bc0 <_printf_i+0x164>
 8003c88:	3501      	adds	r5, #1
 8003c8a:	68e3      	ldr	r3, [r4, #12]
 8003c8c:	9903      	ldr	r1, [sp, #12]
 8003c8e:	1a5b      	subs	r3, r3, r1
 8003c90:	42ab      	cmp	r3, r5
 8003c92:	dcf2      	bgt.n	8003c7a <_printf_i+0x21e>
 8003c94:	e7eb      	b.n	8003c6e <_printf_i+0x212>
 8003c96:	2500      	movs	r5, #0
 8003c98:	f104 0619 	add.w	r6, r4, #25
 8003c9c:	e7f5      	b.n	8003c8a <_printf_i+0x22e>
 8003c9e:	bf00      	nop
 8003ca0:	080040c5 	.word	0x080040c5
 8003ca4:	080040d6 	.word	0x080040d6

08003ca8 <_sbrk_r>:
 8003ca8:	b538      	push	{r3, r4, r5, lr}
 8003caa:	4d06      	ldr	r5, [pc, #24]	; (8003cc4 <_sbrk_r+0x1c>)
 8003cac:	2300      	movs	r3, #0
 8003cae:	4604      	mov	r4, r0
 8003cb0:	4608      	mov	r0, r1
 8003cb2:	602b      	str	r3, [r5, #0]
 8003cb4:	f7fc fec8 	bl	8000a48 <_sbrk>
 8003cb8:	1c43      	adds	r3, r0, #1
 8003cba:	d102      	bne.n	8003cc2 <_sbrk_r+0x1a>
 8003cbc:	682b      	ldr	r3, [r5, #0]
 8003cbe:	b103      	cbz	r3, 8003cc2 <_sbrk_r+0x1a>
 8003cc0:	6023      	str	r3, [r4, #0]
 8003cc2:	bd38      	pop	{r3, r4, r5, pc}
 8003cc4:	2000016c 	.word	0x2000016c

08003cc8 <__sread>:
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	460c      	mov	r4, r1
 8003ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd0:	f000 f960 	bl	8003f94 <_read_r>
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	bfab      	itete	ge
 8003cd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cda:	89a3      	ldrhlt	r3, [r4, #12]
 8003cdc:	181b      	addge	r3, r3, r0
 8003cde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ce2:	bfac      	ite	ge
 8003ce4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ce6:	81a3      	strhlt	r3, [r4, #12]
 8003ce8:	bd10      	pop	{r4, pc}

08003cea <__swrite>:
 8003cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cee:	461f      	mov	r7, r3
 8003cf0:	898b      	ldrh	r3, [r1, #12]
 8003cf2:	05db      	lsls	r3, r3, #23
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	4616      	mov	r6, r2
 8003cfa:	d505      	bpl.n	8003d08 <__swrite+0x1e>
 8003cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d00:	2302      	movs	r3, #2
 8003d02:	2200      	movs	r2, #0
 8003d04:	f000 f928 	bl	8003f58 <_lseek_r>
 8003d08:	89a3      	ldrh	r3, [r4, #12]
 8003d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d12:	81a3      	strh	r3, [r4, #12]
 8003d14:	4632      	mov	r2, r6
 8003d16:	463b      	mov	r3, r7
 8003d18:	4628      	mov	r0, r5
 8003d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d1e:	f000 b869 	b.w	8003df4 <_write_r>

08003d22 <__sseek>:
 8003d22:	b510      	push	{r4, lr}
 8003d24:	460c      	mov	r4, r1
 8003d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d2a:	f000 f915 	bl	8003f58 <_lseek_r>
 8003d2e:	1c43      	adds	r3, r0, #1
 8003d30:	89a3      	ldrh	r3, [r4, #12]
 8003d32:	bf15      	itete	ne
 8003d34:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d3e:	81a3      	strheq	r3, [r4, #12]
 8003d40:	bf18      	it	ne
 8003d42:	81a3      	strhne	r3, [r4, #12]
 8003d44:	bd10      	pop	{r4, pc}

08003d46 <__sclose>:
 8003d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d4a:	f000 b8d3 	b.w	8003ef4 <_close_r>
	...

08003d50 <__swbuf_r>:
 8003d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d52:	460e      	mov	r6, r1
 8003d54:	4614      	mov	r4, r2
 8003d56:	4605      	mov	r5, r0
 8003d58:	b118      	cbz	r0, 8003d62 <__swbuf_r+0x12>
 8003d5a:	6983      	ldr	r3, [r0, #24]
 8003d5c:	b90b      	cbnz	r3, 8003d62 <__swbuf_r+0x12>
 8003d5e:	f7ff faff 	bl	8003360 <__sinit>
 8003d62:	4b21      	ldr	r3, [pc, #132]	; (8003de8 <__swbuf_r+0x98>)
 8003d64:	429c      	cmp	r4, r3
 8003d66:	d12b      	bne.n	8003dc0 <__swbuf_r+0x70>
 8003d68:	686c      	ldr	r4, [r5, #4]
 8003d6a:	69a3      	ldr	r3, [r4, #24]
 8003d6c:	60a3      	str	r3, [r4, #8]
 8003d6e:	89a3      	ldrh	r3, [r4, #12]
 8003d70:	071a      	lsls	r2, r3, #28
 8003d72:	d52f      	bpl.n	8003dd4 <__swbuf_r+0x84>
 8003d74:	6923      	ldr	r3, [r4, #16]
 8003d76:	b36b      	cbz	r3, 8003dd4 <__swbuf_r+0x84>
 8003d78:	6923      	ldr	r3, [r4, #16]
 8003d7a:	6820      	ldr	r0, [r4, #0]
 8003d7c:	1ac0      	subs	r0, r0, r3
 8003d7e:	6963      	ldr	r3, [r4, #20]
 8003d80:	b2f6      	uxtb	r6, r6
 8003d82:	4283      	cmp	r3, r0
 8003d84:	4637      	mov	r7, r6
 8003d86:	dc04      	bgt.n	8003d92 <__swbuf_r+0x42>
 8003d88:	4621      	mov	r1, r4
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	f7ff fa54 	bl	8003238 <_fflush_r>
 8003d90:	bb30      	cbnz	r0, 8003de0 <__swbuf_r+0x90>
 8003d92:	68a3      	ldr	r3, [r4, #8]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	60a3      	str	r3, [r4, #8]
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	6022      	str	r2, [r4, #0]
 8003d9e:	701e      	strb	r6, [r3, #0]
 8003da0:	6963      	ldr	r3, [r4, #20]
 8003da2:	3001      	adds	r0, #1
 8003da4:	4283      	cmp	r3, r0
 8003da6:	d004      	beq.n	8003db2 <__swbuf_r+0x62>
 8003da8:	89a3      	ldrh	r3, [r4, #12]
 8003daa:	07db      	lsls	r3, r3, #31
 8003dac:	d506      	bpl.n	8003dbc <__swbuf_r+0x6c>
 8003dae:	2e0a      	cmp	r6, #10
 8003db0:	d104      	bne.n	8003dbc <__swbuf_r+0x6c>
 8003db2:	4621      	mov	r1, r4
 8003db4:	4628      	mov	r0, r5
 8003db6:	f7ff fa3f 	bl	8003238 <_fflush_r>
 8003dba:	b988      	cbnz	r0, 8003de0 <__swbuf_r+0x90>
 8003dbc:	4638      	mov	r0, r7
 8003dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <__swbuf_r+0x9c>)
 8003dc2:	429c      	cmp	r4, r3
 8003dc4:	d101      	bne.n	8003dca <__swbuf_r+0x7a>
 8003dc6:	68ac      	ldr	r4, [r5, #8]
 8003dc8:	e7cf      	b.n	8003d6a <__swbuf_r+0x1a>
 8003dca:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <__swbuf_r+0xa0>)
 8003dcc:	429c      	cmp	r4, r3
 8003dce:	bf08      	it	eq
 8003dd0:	68ec      	ldreq	r4, [r5, #12]
 8003dd2:	e7ca      	b.n	8003d6a <__swbuf_r+0x1a>
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	f000 f81e 	bl	8003e18 <__swsetup_r>
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	d0cb      	beq.n	8003d78 <__swbuf_r+0x28>
 8003de0:	f04f 37ff 	mov.w	r7, #4294967295
 8003de4:	e7ea      	b.n	8003dbc <__swbuf_r+0x6c>
 8003de6:	bf00      	nop
 8003de8:	08004074 	.word	0x08004074
 8003dec:	08004094 	.word	0x08004094
 8003df0:	08004054 	.word	0x08004054

08003df4 <_write_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	4d07      	ldr	r5, [pc, #28]	; (8003e14 <_write_r+0x20>)
 8003df8:	4604      	mov	r4, r0
 8003dfa:	4608      	mov	r0, r1
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	2200      	movs	r2, #0
 8003e00:	602a      	str	r2, [r5, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	f7fe ffb8 	bl	8002d78 <_write>
 8003e08:	1c43      	adds	r3, r0, #1
 8003e0a:	d102      	bne.n	8003e12 <_write_r+0x1e>
 8003e0c:	682b      	ldr	r3, [r5, #0]
 8003e0e:	b103      	cbz	r3, 8003e12 <_write_r+0x1e>
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	bd38      	pop	{r3, r4, r5, pc}
 8003e14:	2000016c 	.word	0x2000016c

08003e18 <__swsetup_r>:
 8003e18:	4b32      	ldr	r3, [pc, #200]	; (8003ee4 <__swsetup_r+0xcc>)
 8003e1a:	b570      	push	{r4, r5, r6, lr}
 8003e1c:	681d      	ldr	r5, [r3, #0]
 8003e1e:	4606      	mov	r6, r0
 8003e20:	460c      	mov	r4, r1
 8003e22:	b125      	cbz	r5, 8003e2e <__swsetup_r+0x16>
 8003e24:	69ab      	ldr	r3, [r5, #24]
 8003e26:	b913      	cbnz	r3, 8003e2e <__swsetup_r+0x16>
 8003e28:	4628      	mov	r0, r5
 8003e2a:	f7ff fa99 	bl	8003360 <__sinit>
 8003e2e:	4b2e      	ldr	r3, [pc, #184]	; (8003ee8 <__swsetup_r+0xd0>)
 8003e30:	429c      	cmp	r4, r3
 8003e32:	d10f      	bne.n	8003e54 <__swsetup_r+0x3c>
 8003e34:	686c      	ldr	r4, [r5, #4]
 8003e36:	89a3      	ldrh	r3, [r4, #12]
 8003e38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e3c:	0719      	lsls	r1, r3, #28
 8003e3e:	d42c      	bmi.n	8003e9a <__swsetup_r+0x82>
 8003e40:	06dd      	lsls	r5, r3, #27
 8003e42:	d411      	bmi.n	8003e68 <__swsetup_r+0x50>
 8003e44:	2309      	movs	r3, #9
 8003e46:	6033      	str	r3, [r6, #0]
 8003e48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e4c:	81a3      	strh	r3, [r4, #12]
 8003e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e52:	e03e      	b.n	8003ed2 <__swsetup_r+0xba>
 8003e54:	4b25      	ldr	r3, [pc, #148]	; (8003eec <__swsetup_r+0xd4>)
 8003e56:	429c      	cmp	r4, r3
 8003e58:	d101      	bne.n	8003e5e <__swsetup_r+0x46>
 8003e5a:	68ac      	ldr	r4, [r5, #8]
 8003e5c:	e7eb      	b.n	8003e36 <__swsetup_r+0x1e>
 8003e5e:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <__swsetup_r+0xd8>)
 8003e60:	429c      	cmp	r4, r3
 8003e62:	bf08      	it	eq
 8003e64:	68ec      	ldreq	r4, [r5, #12]
 8003e66:	e7e6      	b.n	8003e36 <__swsetup_r+0x1e>
 8003e68:	0758      	lsls	r0, r3, #29
 8003e6a:	d512      	bpl.n	8003e92 <__swsetup_r+0x7a>
 8003e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e6e:	b141      	cbz	r1, 8003e82 <__swsetup_r+0x6a>
 8003e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e74:	4299      	cmp	r1, r3
 8003e76:	d002      	beq.n	8003e7e <__swsetup_r+0x66>
 8003e78:	4630      	mov	r0, r6
 8003e7a:	f7ff fb7d 	bl	8003578 <_free_r>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6363      	str	r3, [r4, #52]	; 0x34
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e88:	81a3      	strh	r3, [r4, #12]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	6063      	str	r3, [r4, #4]
 8003e8e:	6923      	ldr	r3, [r4, #16]
 8003e90:	6023      	str	r3, [r4, #0]
 8003e92:	89a3      	ldrh	r3, [r4, #12]
 8003e94:	f043 0308 	orr.w	r3, r3, #8
 8003e98:	81a3      	strh	r3, [r4, #12]
 8003e9a:	6923      	ldr	r3, [r4, #16]
 8003e9c:	b94b      	cbnz	r3, 8003eb2 <__swsetup_r+0x9a>
 8003e9e:	89a3      	ldrh	r3, [r4, #12]
 8003ea0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea8:	d003      	beq.n	8003eb2 <__swsetup_r+0x9a>
 8003eaa:	4621      	mov	r1, r4
 8003eac:	4630      	mov	r0, r6
 8003eae:	f7ff fb1b 	bl	80034e8 <__smakebuf_r>
 8003eb2:	89a0      	ldrh	r0, [r4, #12]
 8003eb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003eb8:	f010 0301 	ands.w	r3, r0, #1
 8003ebc:	d00a      	beq.n	8003ed4 <__swsetup_r+0xbc>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60a3      	str	r3, [r4, #8]
 8003ec2:	6963      	ldr	r3, [r4, #20]
 8003ec4:	425b      	negs	r3, r3
 8003ec6:	61a3      	str	r3, [r4, #24]
 8003ec8:	6923      	ldr	r3, [r4, #16]
 8003eca:	b943      	cbnz	r3, 8003ede <__swsetup_r+0xc6>
 8003ecc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ed0:	d1ba      	bne.n	8003e48 <__swsetup_r+0x30>
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
 8003ed4:	0781      	lsls	r1, r0, #30
 8003ed6:	bf58      	it	pl
 8003ed8:	6963      	ldrpl	r3, [r4, #20]
 8003eda:	60a3      	str	r3, [r4, #8]
 8003edc:	e7f4      	b.n	8003ec8 <__swsetup_r+0xb0>
 8003ede:	2000      	movs	r0, #0
 8003ee0:	e7f7      	b.n	8003ed2 <__swsetup_r+0xba>
 8003ee2:	bf00      	nop
 8003ee4:	2000000c 	.word	0x2000000c
 8003ee8:	08004074 	.word	0x08004074
 8003eec:	08004094 	.word	0x08004094
 8003ef0:	08004054 	.word	0x08004054

08003ef4 <_close_r>:
 8003ef4:	b538      	push	{r3, r4, r5, lr}
 8003ef6:	4d06      	ldr	r5, [pc, #24]	; (8003f10 <_close_r+0x1c>)
 8003ef8:	2300      	movs	r3, #0
 8003efa:	4604      	mov	r4, r0
 8003efc:	4608      	mov	r0, r1
 8003efe:	602b      	str	r3, [r5, #0]
 8003f00:	f7fc fd6d 	bl	80009de <_close>
 8003f04:	1c43      	adds	r3, r0, #1
 8003f06:	d102      	bne.n	8003f0e <_close_r+0x1a>
 8003f08:	682b      	ldr	r3, [r5, #0]
 8003f0a:	b103      	cbz	r3, 8003f0e <_close_r+0x1a>
 8003f0c:	6023      	str	r3, [r4, #0]
 8003f0e:	bd38      	pop	{r3, r4, r5, pc}
 8003f10:	2000016c 	.word	0x2000016c

08003f14 <_fstat_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	4d07      	ldr	r5, [pc, #28]	; (8003f34 <_fstat_r+0x20>)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	4608      	mov	r0, r1
 8003f1e:	4611      	mov	r1, r2
 8003f20:	602b      	str	r3, [r5, #0]
 8003f22:	f7fc fd68 	bl	80009f6 <_fstat>
 8003f26:	1c43      	adds	r3, r0, #1
 8003f28:	d102      	bne.n	8003f30 <_fstat_r+0x1c>
 8003f2a:	682b      	ldr	r3, [r5, #0]
 8003f2c:	b103      	cbz	r3, 8003f30 <_fstat_r+0x1c>
 8003f2e:	6023      	str	r3, [r4, #0]
 8003f30:	bd38      	pop	{r3, r4, r5, pc}
 8003f32:	bf00      	nop
 8003f34:	2000016c 	.word	0x2000016c

08003f38 <_isatty_r>:
 8003f38:	b538      	push	{r3, r4, r5, lr}
 8003f3a:	4d06      	ldr	r5, [pc, #24]	; (8003f54 <_isatty_r+0x1c>)
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	4604      	mov	r4, r0
 8003f40:	4608      	mov	r0, r1
 8003f42:	602b      	str	r3, [r5, #0]
 8003f44:	f7fc fd67 	bl	8000a16 <_isatty>
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	d102      	bne.n	8003f52 <_isatty_r+0x1a>
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	b103      	cbz	r3, 8003f52 <_isatty_r+0x1a>
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
 8003f54:	2000016c 	.word	0x2000016c

08003f58 <_lseek_r>:
 8003f58:	b538      	push	{r3, r4, r5, lr}
 8003f5a:	4d07      	ldr	r5, [pc, #28]	; (8003f78 <_lseek_r+0x20>)
 8003f5c:	4604      	mov	r4, r0
 8003f5e:	4608      	mov	r0, r1
 8003f60:	4611      	mov	r1, r2
 8003f62:	2200      	movs	r2, #0
 8003f64:	602a      	str	r2, [r5, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f7fc fd60 	bl	8000a2c <_lseek>
 8003f6c:	1c43      	adds	r3, r0, #1
 8003f6e:	d102      	bne.n	8003f76 <_lseek_r+0x1e>
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	b103      	cbz	r3, 8003f76 <_lseek_r+0x1e>
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	bd38      	pop	{r3, r4, r5, pc}
 8003f78:	2000016c 	.word	0x2000016c

08003f7c <__malloc_lock>:
 8003f7c:	4801      	ldr	r0, [pc, #4]	; (8003f84 <__malloc_lock+0x8>)
 8003f7e:	f7ff ba8d 	b.w	800349c <__retarget_lock_acquire_recursive>
 8003f82:	bf00      	nop
 8003f84:	20000164 	.word	0x20000164

08003f88 <__malloc_unlock>:
 8003f88:	4801      	ldr	r0, [pc, #4]	; (8003f90 <__malloc_unlock+0x8>)
 8003f8a:	f7ff ba88 	b.w	800349e <__retarget_lock_release_recursive>
 8003f8e:	bf00      	nop
 8003f90:	20000164 	.word	0x20000164

08003f94 <_read_r>:
 8003f94:	b538      	push	{r3, r4, r5, lr}
 8003f96:	4d07      	ldr	r5, [pc, #28]	; (8003fb4 <_read_r+0x20>)
 8003f98:	4604      	mov	r4, r0
 8003f9a:	4608      	mov	r0, r1
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	602a      	str	r2, [r5, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	f7fc fcfe 	bl	80009a4 <_read>
 8003fa8:	1c43      	adds	r3, r0, #1
 8003faa:	d102      	bne.n	8003fb2 <_read_r+0x1e>
 8003fac:	682b      	ldr	r3, [r5, #0]
 8003fae:	b103      	cbz	r3, 8003fb2 <_read_r+0x1e>
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	bd38      	pop	{r3, r4, r5, pc}
 8003fb4:	2000016c 	.word	0x2000016c

08003fb8 <_init>:
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fba:	bf00      	nop
 8003fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fbe:	bc08      	pop	{r3}
 8003fc0:	469e      	mov	lr, r3
 8003fc2:	4770      	bx	lr

08003fc4 <_fini>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	bf00      	nop
 8003fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fca:	bc08      	pop	{r3}
 8003fcc:	469e      	mov	lr, r3
 8003fce:	4770      	bx	lr
