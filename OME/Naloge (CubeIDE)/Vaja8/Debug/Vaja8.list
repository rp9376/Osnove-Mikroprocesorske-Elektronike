
Vaja8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039a8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003b80  08003b80  00013b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c2c  08003c2c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003c2c  08003c2c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c2c  08003c2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c2c  08003c2c  00013c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c30  08003c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  20000070  08003ca4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  08003ca4  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce4d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a3  00000000  00000000  0002ceed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  0002f690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  000302b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286d7  00000000  00000000  00030db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcb5  00000000  00000000  0005948f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4605  00000000  00000000  00065144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00159749  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003568  00000000  00000000  0015979c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003b68 	.word	0x08003b68

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08003b68 	.word	0x08003b68

08000218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <__NVIC_GetPriorityGrouping+0x18>)
 800021e:	68db      	ldr	r3, [r3, #12]
 8000220:	0a1b      	lsrs	r3, r3, #8
 8000222:	f003 0307 	and.w	r3, r3, #7
}
 8000226:	4618      	mov	r0, r3
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	2b00      	cmp	r3, #0
 8000244:	db0b      	blt.n	800025e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	f003 021f 	and.w	r2, r3, #31
 800024c:	4907      	ldr	r1, [pc, #28]	; (800026c <__NVIC_EnableIRQ+0x38>)
 800024e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000252:	095b      	lsrs	r3, r3, #5
 8000254:	2001      	movs	r0, #1
 8000256:	fa00 f202 	lsl.w	r2, r0, r2
 800025a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800025e:	bf00      	nop
 8000260:	370c      	adds	r7, #12
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	e000e100 	.word	0xe000e100

08000270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	6039      	str	r1, [r7, #0]
 800027a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000280:	2b00      	cmp	r3, #0
 8000282:	db0a      	blt.n	800029a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	b2da      	uxtb	r2, r3
 8000288:	490c      	ldr	r1, [pc, #48]	; (80002bc <__NVIC_SetPriority+0x4c>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	0112      	lsls	r2, r2, #4
 8000290:	b2d2      	uxtb	r2, r2
 8000292:	440b      	add	r3, r1
 8000294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000298:	e00a      	b.n	80002b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	b2da      	uxtb	r2, r3
 800029e:	4908      	ldr	r1, [pc, #32]	; (80002c0 <__NVIC_SetPriority+0x50>)
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	f003 030f 	and.w	r3, r3, #15
 80002a6:	3b04      	subs	r3, #4
 80002a8:	0112      	lsls	r2, r2, #4
 80002aa:	b2d2      	uxtb	r2, r2
 80002ac:	440b      	add	r3, r1
 80002ae:	761a      	strb	r2, [r3, #24]
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	e000e100 	.word	0xe000e100
 80002c0:	e000ed00 	.word	0xe000ed00

080002c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b089      	sub	sp, #36	; 0x24
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	f003 0307 	and.w	r3, r3, #7
 80002d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d8:	69fb      	ldr	r3, [r7, #28]
 80002da:	f1c3 0307 	rsb	r3, r3, #7
 80002de:	2b04      	cmp	r3, #4
 80002e0:	bf28      	it	cs
 80002e2:	2304      	movcs	r3, #4
 80002e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002e6:	69fb      	ldr	r3, [r7, #28]
 80002e8:	3304      	adds	r3, #4
 80002ea:	2b06      	cmp	r3, #6
 80002ec:	d902      	bls.n	80002f4 <NVIC_EncodePriority+0x30>
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	3b03      	subs	r3, #3
 80002f2:	e000      	b.n	80002f6 <NVIC_EncodePriority+0x32>
 80002f4:	2300      	movs	r3, #0
 80002f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f8:	f04f 32ff 	mov.w	r2, #4294967295
 80002fc:	69bb      	ldr	r3, [r7, #24]
 80002fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000302:	43da      	mvns	r2, r3
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	401a      	ands	r2, r3
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800030c:	f04f 31ff 	mov.w	r1, #4294967295
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	fa01 f303 	lsl.w	r3, r1, r3
 8000316:	43d9      	mvns	r1, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800031c:	4313      	orrs	r3, r2
         );
}
 800031e:	4618      	mov	r0, r3
 8000320:	3724      	adds	r7, #36	; 0x24
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr

0800032a <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032a:	b480      	push	{r7}
 800032c:	b083      	sub	sp, #12
 800032e:	af00      	add	r7, sp, #0
 8000330:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f043 0201 	orr.w	r2, r3, #1
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	601a      	str	r2, [r3, #0]
}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr

0800034a <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 800034a:	b480      	push	{r7}
 800034c:	b083      	sub	sp, #12
 800034e:	af00      	add	r7, sp, #0
 8000350:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr

0800036a <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800036a:	b480      	push	{r7}
 800036c:	b089      	sub	sp, #36	; 0x24
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
 8000372:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3308      	adds	r3, #8
 8000378:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	e853 3f00 	ldrex	r3, [r3]
 8000380:	60bb      	str	r3, [r7, #8]
   return(result);
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	075b      	lsls	r3, r3, #29
 800038c:	4313      	orrs	r3, r2
 800038e:	61fb      	str	r3, [r7, #28]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	3308      	adds	r3, #8
 8000394:	69fa      	ldr	r2, [r7, #28]
 8000396:	61ba      	str	r2, [r7, #24]
 8000398:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800039a:	6979      	ldr	r1, [r7, #20]
 800039c:	69ba      	ldr	r2, [r7, #24]
 800039e:	e841 2300 	strex	r3, r2, [r1]
 80003a2:	613b      	str	r3, [r7, #16]
   return(result);
 80003a4:	693b      	ldr	r3, [r7, #16]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d1e4      	bne.n	8000374 <LL_USART_SetTXFIFOThreshold+0xa>
}
 80003aa:	bf00      	nop
 80003ac:	bf00      	nop
 80003ae:	3724      	adds	r7, #36	; 0x24
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b089      	sub	sp, #36	; 0x24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	3308      	adds	r3, #8
 80003c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	e853 3f00 	ldrex	r3, [r3]
 80003ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	065b      	lsls	r3, r3, #25
 80003da:	4313      	orrs	r3, r2
 80003dc:	61fb      	str	r3, [r7, #28]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	3308      	adds	r3, #8
 80003e2:	69fa      	ldr	r2, [r7, #28]
 80003e4:	61ba      	str	r2, [r7, #24]
 80003e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80003e8:	6979      	ldr	r1, [r7, #20]
 80003ea:	69ba      	ldr	r2, [r7, #24]
 80003ec:	e841 2300 	strex	r3, r2, [r1]
 80003f0:	613b      	str	r3, [r7, #16]
   return(result);
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d1e4      	bne.n	80003c2 <LL_USART_SetRXFIFOThreshold+0xa>
}
 80003f8:	bf00      	nop
 80003fa:	bf00      	nop
 80003fc:	3724      	adds	r7, #36	; 0x24
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <LL_USART_DisableOverrunDetect>:
  * @rmtoll CR3          OVRDIS        LL_USART_DisableOverrunDetect
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
{
 8000406:	b480      	push	{r7}
 8000408:	b083      	sub	sp, #12
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	609a      	str	r2, [r3, #8]
}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr

08000426 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000426:	b480      	push	{r7}
 8000428:	b083      	sub	sp, #12
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	609a      	str	r2, [r3, #8]
}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr

08000452 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 8000452:	b480      	push	{r7}
 8000454:	b083      	sub	sp, #12
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000466:	d101      	bne.n	800046c <LL_USART_IsActiveFlag_TEACK+0x1a>
 8000468:	2301      	movs	r3, #1
 800046a:	e000      	b.n	800046e <LL_USART_IsActiveFlag_TEACK+0x1c>
 800046c:	2300      	movs	r3, #0
}
 800046e:	4618      	mov	r0, r3
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800047a:	b480      	push	{r7}
 800047c:	b083      	sub	sp, #12
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800048a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800048e:	d101      	bne.n	8000494 <LL_USART_IsActiveFlag_REACK+0x1a>
 8000490:	2301      	movs	r3, #1
 8000492:	e000      	b.n	8000496 <LL_USART_IsActiveFlag_REACK+0x1c>
 8000494:	2300      	movs	r3, #0
}
 8000496:	4618      	mov	r0, r3
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
 80004aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	683a      	ldr	r2, [r7, #0]
 80004b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
	...

080004c0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004cc:	4907      	ldr	r1, [pc, #28]	; (80004ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4313      	orrs	r3, r2
 80004d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4013      	ands	r3, r2
 80004dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004de:	68fb      	ldr	r3, [r7, #12]
}
 80004e0:	bf00      	nop
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40021000 	.word	0x40021000

080004f0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <LL_APB1_GRP1_EnableClock+0x2c>)
 80004fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80004fc:	4907      	ldr	r1, [pc, #28]	; (800051c <LL_APB1_GRP1_EnableClock+0x2c>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4313      	orrs	r3, r2
 8000502:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000506:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4013      	ands	r3, r2
 800050c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050e:	68fb      	ldr	r3, [r7, #12]
}
 8000510:	bf00      	nop
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	40021000 	.word	0x40021000

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 fb9b 	bl	8000c5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f82e 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 f920 	bl	8000770 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000530:	f000 f876 	bl	8000620 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  LED_init();
 8000534:	f002 fac4 	bl	8002ac0 <LED_init>
  //LED_demo();

  LEDs_on(0b10101010);
 8000538:	20aa      	movs	r0, #170	; 0xaa
 800053a:	f002 fb2f 	bl	8002b9c <LEDs_on>
  HAL_Delay(200);
 800053e:	20c8      	movs	r0, #200	; 0xc8
 8000540:	f000 fbfe 	bl	8000d40 <HAL_Delay>
  LEDs_off(LEDs_read());
 8000544:	f002 fbae 	bl	8002ca4 <LEDs_read>
 8000548:	4603      	mov	r3, r0
 800054a:	4618      	mov	r0, r3
 800054c:	f002 fb54 	bl	8002bf8 <LEDs_off>
  LEDs_on(0b01010101);
 8000550:	2055      	movs	r0, #85	; 0x55
 8000552:	f002 fb23 	bl	8002b9c <LEDs_on>
  HAL_Delay(200);
 8000556:	20c8      	movs	r0, #200	; 0xc8
 8000558:	f000 fbf2 	bl	8000d40 <HAL_Delay>
  LEDs_off(LEDs_read());
 800055c:	f002 fba2 	bl	8002ca4 <LEDs_read>
 8000560:	4603      	mov	r3, r0
 8000562:	4618      	mov	r0, r3
 8000564:	f002 fb48 	bl	8002bf8 <LEDs_off>
  LEDs_on(0b10101010);
 8000568:	20aa      	movs	r0, #170	; 0xaa
 800056a:	f002 fb17 	bl	8002b9c <LEDs_on>
  HAL_Delay(200);
 800056e:	20c8      	movs	r0, #200	; 0xc8
 8000570:	f000 fbe6 	bl	8000d40 <HAL_Delay>
  LEDs_write(0);
 8000574:	2000      	movs	r0, #0
 8000576:	f002 fb6d 	bl	8002c54 <LEDs_write>

  KBD_init();
 800057a:	f002 fe5b 	bl	8003234 <KBD_init>

  SCI_init();
 800057e:	f002 fc51 	bl	8002e24 <SCI_init>
  SCI_demo_echo_with_polling();
  //*/

 // SCI_demo_receive_with_interrupts();
 //SCI_demo_transmit_with_interrupts();
  SCI_demo_echo_with_interrupts();
 8000582:	f002 fd3b 	bl	8002ffc <SCI_demo_echo_with_interrupts>



  while (1)
 8000586:	e7fe      	b.n	8000586 <main+0x66>

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0318 	add.w	r3, r7, #24
 8000592:	2238      	movs	r2, #56	; 0x38
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fed0 	bl	800333c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 fcce 	bl	8000f4c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ba:	2340      	movs	r3, #64	; 0x40
 80005bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005c6:	2304      	movs	r3, #4
 80005c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ca:	2355      	movs	r3, #85	; 0x55
 80005cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0318 	add.w	r3, r7, #24
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fd68 	bl	80010b4 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ea:	f000 f9bf 	bl	800096c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2303      	movs	r3, #3
 80005f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2104      	movs	r1, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f001 f86c 	bl	80016e4 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000612:	f000 f9ab 	bl	800096c <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b0a4      	sub	sp, #144	; 0x90
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000626:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800062a:	2220      	movs	r2, #32
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fe84 	bl	800333c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
 8000644:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2254      	movs	r2, #84	; 0x54
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fe75 	bl	800333c <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000652:	2304      	movs	r3, #4
 8000654:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fa25 	bl	8001aac <HAL_RCCEx_PeriphCLKConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_USART3_UART_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 f980 	bl	800096c <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800066c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000670:	f7ff ff3e 	bl	80004f0 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000674:	2002      	movs	r0, #2
 8000676:	f7ff ff23 	bl	80004c0 <LL_AHB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB8-BOOT0   ------> USART3_RX
  PB9   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800067a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067e:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000680:	2302      	movs	r3, #2
 8000682:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800068c:	2300      	movs	r3, #0
 800068e:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000690:	2307      	movs	r3, #7
 8000692:	66fb      	str	r3, [r7, #108]	; 0x6c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000694:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000698:	4619      	mov	r1, r3
 800069a:	4833      	ldr	r0, [pc, #204]	; (8000768 <MX_USART3_UART_Init+0x148>)
 800069c:	f001 fd9d 	bl	80021da <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80006a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006a4:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80006a6:	2302      	movs	r3, #2
 80006a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006b2:	2300      	movs	r3, #0
 80006b4:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80006b6:	2307      	movs	r3, #7
 80006b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006be:	4619      	mov	r1, r3
 80006c0:	4829      	ldr	r0, [pc, #164]	; (8000768 <MX_USART3_UART_Init+0x148>)
 80006c2:	f001 fd8a 	bl	80021da <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80006c6:	f7ff fda7 	bl	8000218 <__NVIC_GetPriorityGrouping>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fdf7 	bl	80002c4 <NVIC_EncodePriority>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4619      	mov	r1, r3
 80006da:	2027      	movs	r0, #39	; 0x27
 80006dc:	f7ff fdc8 	bl	8000270 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80006e0:	2027      	movs	r0, #39	; 0x27
 80006e2:	f7ff fda7 	bl	8000234 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	673b      	str	r3, [r7, #112]	; 0x70
  USART_InitStruct.BaudRate = 115200;
 80006ea:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80006ee:	677b      	str	r3, [r7, #116]	; 0x74
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80006f0:	2300      	movs	r3, #0
 80006f2:	67bb      	str	r3, [r7, #120]	; 0x78
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80006fe:	230c      	movs	r3, #12
 8000700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000704:	2300      	movs	r3, #0
 8000706:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800070a:	2300      	movs	r3, #0
 800070c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  LL_USART_Init(USART3, &USART_InitStruct);
 8000710:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000714:	4619      	mov	r1, r3
 8000716:	4815      	ldr	r0, [pc, #84]	; (800076c <MX_USART3_UART_Init+0x14c>)
 8000718:	f002 f91a 	bl	8002950 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 800071c:	2100      	movs	r1, #0
 800071e:	4813      	ldr	r0, [pc, #76]	; (800076c <MX_USART3_UART_Init+0x14c>)
 8000720:	f7ff fe23 	bl	800036a <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 8000724:	2100      	movs	r1, #0
 8000726:	4811      	ldr	r0, [pc, #68]	; (800076c <MX_USART3_UART_Init+0x14c>)
 8000728:	f7ff fe46 	bl	80003b8 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART3);
 800072c:	480f      	ldr	r0, [pc, #60]	; (800076c <MX_USART3_UART_Init+0x14c>)
 800072e:	f7ff fe0c 	bl	800034a <LL_USART_DisableFIFO>
  LL_USART_DisableOverrunDetect(USART3);
 8000732:	480e      	ldr	r0, [pc, #56]	; (800076c <MX_USART3_UART_Init+0x14c>)
 8000734:	f7ff fe67 	bl	8000406 <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(USART3);
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <MX_USART3_UART_Init+0x14c>)
 800073a:	f7ff fe74 	bl	8000426 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART3 */

  /* USER CODE END WKUPType USART3 */

  LL_USART_Enable(USART3);
 800073e:	480b      	ldr	r0, [pc, #44]	; (800076c <MX_USART3_UART_Init+0x14c>)
 8000740:	f7ff fdf3 	bl	800032a <LL_USART_Enable>

  /* Polling USART3 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART3))) || (!(LL_USART_IsActiveFlag_REACK(USART3))))
 8000744:	bf00      	nop
 8000746:	4809      	ldr	r0, [pc, #36]	; (800076c <MX_USART3_UART_Init+0x14c>)
 8000748:	f7ff fe83 	bl	8000452 <LL_USART_IsActiveFlag_TEACK>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0f9      	beq.n	8000746 <MX_USART3_UART_Init+0x126>
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <MX_USART3_UART_Init+0x14c>)
 8000754:	f7ff fe91 	bl	800047a <LL_USART_IsActiveFlag_REACK>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d0f3      	beq.n	8000746 <MX_USART3_UART_Init+0x126>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bf00      	nop
 8000762:	3790      	adds	r7, #144	; 0x90
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	48000400 	.word	0x48000400
 800076c:	40004800 	.word	0x40004800

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
 8000784:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000786:	2004      	movs	r0, #4
 8000788:	f7ff fe9a 	bl	80004c0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 800078c:	2020      	movs	r0, #32
 800078e:	f7ff fe97 	bl	80004c0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOG);
 8000792:	2040      	movs	r0, #64	; 0x40
 8000794:	f7ff fe94 	bl	80004c0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000798:	2002      	movs	r0, #2
 800079a:	f7ff fe91 	bl	80004c0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_3);
 800079e:	2108      	movs	r1, #8
 80007a0:	486f      	ldr	r0, [pc, #444]	; (8000960 <MX_GPIO_Init+0x1f0>)
 80007a2:	f7ff fe7e 	bl	80004a2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_4);
 80007a6:	2110      	movs	r1, #16
 80007a8:	486d      	ldr	r0, [pc, #436]	; (8000960 <MX_GPIO_Init+0x1f0>)
 80007aa:	f7ff fe7a 	bl	80004a2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_5);
 80007ae:	2120      	movs	r1, #32
 80007b0:	486b      	ldr	r0, [pc, #428]	; (8000960 <MX_GPIO_Init+0x1f0>)
 80007b2:	f7ff fe76 	bl	80004a2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0);
 80007b6:	2101      	movs	r1, #1
 80007b8:	486a      	ldr	r0, [pc, #424]	; (8000964 <MX_GPIO_Init+0x1f4>)
 80007ba:	f7ff fe72 	bl	80004a2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_1);
 80007be:	2102      	movs	r1, #2
 80007c0:	4868      	ldr	r0, [pc, #416]	; (8000964 <MX_GPIO_Init+0x1f4>)
 80007c2:	f7ff fe6e 	bl	80004a2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_2);
 80007c6:	2104      	movs	r1, #4
 80007c8:	4866      	ldr	r0, [pc, #408]	; (8000964 <MX_GPIO_Init+0x1f4>)
 80007ca:	f7ff fe6a 	bl	80004a2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_3);
 80007ce:	2108      	movs	r1, #8
 80007d0:	4864      	ldr	r0, [pc, #400]	; (8000964 <MX_GPIO_Init+0x1f4>)
 80007d2:	f7ff fe66 	bl	80004a2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_2);
 80007d6:	2104      	movs	r1, #4
 80007d8:	4861      	ldr	r0, [pc, #388]	; (8000960 <MX_GPIO_Init+0x1f0>)
 80007da:	f7ff fe62 	bl	80004a2 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 80007de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ec:	463b      	mov	r3, r7
 80007ee:	4619      	mov	r1, r3
 80007f0:	485c      	ldr	r0, [pc, #368]	; (8000964 <MX_GPIO_Init+0x1f4>)
 80007f2:	f001 fcf2 	bl	80021da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80007f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007fa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000800:	2301      	movs	r3, #1
 8000802:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000804:	463b      	mov	r3, r7
 8000806:	4619      	mov	r1, r3
 8000808:	4856      	ldr	r0, [pc, #344]	; (8000964 <MX_GPIO_Init+0x1f4>)
 800080a:	f001 fce6 	bl	80021da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800080e:	2308      	movs	r3, #8
 8000810:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000812:	2301      	movs	r3, #1
 8000814:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000822:	463b      	mov	r3, r7
 8000824:	4619      	mov	r1, r3
 8000826:	484e      	ldr	r0, [pc, #312]	; (8000960 <MX_GPIO_Init+0x1f0>)
 8000828:	f001 fcd7 	bl	80021da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800082c:	2310      	movs	r3, #16
 800082e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000830:	2301      	movs	r3, #1
 8000832:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000840:	463b      	mov	r3, r7
 8000842:	4619      	mov	r1, r3
 8000844:	4846      	ldr	r0, [pc, #280]	; (8000960 <MX_GPIO_Init+0x1f0>)
 8000846:	f001 fcc8 	bl	80021da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800084a:	2320      	movs	r3, #32
 800084c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800084e:	2301      	movs	r3, #1
 8000850:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800085e:	463b      	mov	r3, r7
 8000860:	4619      	mov	r1, r3
 8000862:	483f      	ldr	r0, [pc, #252]	; (8000960 <MX_GPIO_Init+0x1f0>)
 8000864:	f001 fcb9 	bl	80021da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000868:	2301      	movs	r3, #1
 800086a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800086c:	2301      	movs	r3, #1
 800086e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087c:	463b      	mov	r3, r7
 800087e:	4619      	mov	r1, r3
 8000880:	4838      	ldr	r0, [pc, #224]	; (8000964 <MX_GPIO_Init+0x1f4>)
 8000882:	f001 fcaa 	bl	80021da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000886:	2302      	movs	r3, #2
 8000888:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800088a:	2301      	movs	r3, #1
 800088c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089a:	463b      	mov	r3, r7
 800089c:	4619      	mov	r1, r3
 800089e:	4831      	ldr	r0, [pc, #196]	; (8000964 <MX_GPIO_Init+0x1f4>)
 80008a0:	f001 fc9b 	bl	80021da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80008a4:	2304      	movs	r3, #4
 80008a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008a8:	2301      	movs	r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b8:	463b      	mov	r3, r7
 80008ba:	4619      	mov	r1, r3
 80008bc:	4829      	ldr	r0, [pc, #164]	; (8000964 <MX_GPIO_Init+0x1f4>)
 80008be:	f001 fc8c 	bl	80021da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80008c2:	2308      	movs	r3, #8
 80008c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008c6:	2301      	movs	r3, #1
 80008c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d6:	463b      	mov	r3, r7
 80008d8:	4619      	mov	r1, r3
 80008da:	4822      	ldr	r0, [pc, #136]	; (8000964 <MX_GPIO_Init+0x1f4>)
 80008dc:	f001 fc7d 	bl	80021da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80008e0:	2304      	movs	r3, #4
 80008e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008e4:	2301      	movs	r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008f4:	463b      	mov	r3, r7
 80008f6:	4619      	mov	r1, r3
 80008f8:	4819      	ldr	r0, [pc, #100]	; (8000960 <MX_GPIO_Init+0x1f0>)
 80008fa:	f001 fc6e 	bl	80021da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80008fe:	2301      	movs	r3, #1
 8000900:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000906:	2301      	movs	r3, #1
 8000908:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800090a:	463b      	mov	r3, r7
 800090c:	4619      	mov	r1, r3
 800090e:	4816      	ldr	r0, [pc, #88]	; (8000968 <MX_GPIO_Init+0x1f8>)
 8000910:	f001 fc63 	bl	80021da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000914:	2302      	movs	r3, #2
 8000916:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800091c:	2301      	movs	r3, #1
 800091e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000920:	463b      	mov	r3, r7
 8000922:	4619      	mov	r1, r3
 8000924:	4810      	ldr	r0, [pc, #64]	; (8000968 <MX_GPIO_Init+0x1f8>)
 8000926:	f001 fc58 	bl	80021da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800092a:	2340      	movs	r3, #64	; 0x40
 800092c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000932:	2301      	movs	r3, #1
 8000934:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000936:	463b      	mov	r3, r7
 8000938:	4619      	mov	r1, r3
 800093a:	480b      	ldr	r0, [pc, #44]	; (8000968 <MX_GPIO_Init+0x1f8>)
 800093c:	f001 fc4d 	bl	80021da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000940:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000944:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800094a:	2301      	movs	r3, #1
 800094c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_GPIO_Init+0x1f8>)
 8000954:	f001 fc41 	bl	80021da <LL_GPIO_Init>

}
 8000958:	bf00      	nop
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	48001400 	.word	0x48001400
 8000964:	48000800 	.word	0x48000800
 8000968:	48001800 	.word	0x48001800

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <HAL_MspInit+0x44>)
 8000980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <HAL_MspInit+0x44>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6613      	str	r3, [r2, #96]	; 0x60
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_MspInit+0x44>)
 800098c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_MspInit+0x44>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <HAL_MspInit+0x44>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a0:	6593      	str	r3, [r2, #88]	; 0x58
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_MspInit+0x44>)
 80009a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009ae:	f000 fb71 	bl	8001094 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000

080009c0 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	69db      	ldr	r3, [r3, #28]
 80009cc:	f003 0320 	and.w	r3, r3, #32
 80009d0:	2b20      	cmp	r3, #32
 80009d2:	d101      	bne.n	80009d8 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 80009d4:	2301      	movs	r3, #1
 80009d6:	e000      	b.n	80009da <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f6:	2b80      	cmp	r3, #128	; 0x80
 80009f8:	d101      	bne.n	80009fe <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <LL_USART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f003 0320 	and.w	r3, r3, #32
 8000a1c:	2b20      	cmp	r3, #32
 8000a1e:	d101      	bne.n	8000a24 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8000a20:	2301      	movs	r3, #1
 8000a22:	e000      	b.n	8000a26 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <LL_USART_IsEnabledIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_IsEnabledIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a42:	2b80      	cmp	r3, #128	; 0x80
 8000a44:	d101      	bne.n	8000a4a <LL_USART_IsEnabledIT_TXE_TXFNF+0x18>
 8000a46:	2301      	movs	r3, #1
 8000a48:	e000      	b.n	8000a4c <LL_USART_IsEnabledIT_TXE_TXFNF+0x1a>
 8000a4a:	2300      	movs	r3, #0
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa4:	f000 f92e 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <USART3_IRQHandler>:
// Znotraj te splošne prekinitvene rutine je potrebno ugotoviti, kateri od specifičnih prekinitvenih
// dogodkov je sprožil prekinitev. Za nas bosta ključna prekinitvena dogodka sprejetje novega podatka (RXNE)
// ter sprostitev oddajnega podatkovnega registra (TXE).

void USART3_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0

	// ------ Odzivanje na novo-sprejeti podatek (zastavica RXNE = Receive data register not empty) -------


		// Najprej preverimo, če je ta specifična prekinitev sploh omogočena. Uporabimo LL funkcijo.
		if( LL_USART_IsEnabledIT_RXNE_RXFNE(USART3) )		// sploh omogočena prekinitev ob RXNE?
 8000ab0:	480e      	ldr	r0, [pc, #56]	; (8000aec <USART3_IRQHandler+0x40>)
 8000ab2:	f7ff ffab 	bl	8000a0c <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d007      	beq.n	8000acc <USART3_IRQHandler+0x20>
		{
			// Če je prekinitev omogočena, potem preverimo še, če je postavljena ustrezna zastavica.
			if( LL_USART_IsActiveFlag_RXNE_RXFNE (USART3) )	// postavljena zastavica RXNE?
 8000abc:	480b      	ldr	r0, [pc, #44]	; (8000aec <USART3_IRQHandler+0x40>)
 8000abe:	f7ff ff7f 	bl	80009c0 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <USART3_IRQHandler+0x20>
			{
				// Če je ta specifična prekinitev omogočena in če je postavljena zastavica tega specifičnega
				// prekinitvenega dogodka, potem se odzovemo s klicem ustrezne "callback" rutine.

					// DOPOLNI done
				SCI_receive_char_Callback();
 8000ac8:	f002 fa5e 	bl	8002f88 <SCI_receive_char_Callback>


	// ------ Odzivanje na sprostitev oddajnega podatkovnega registra TDR (zastavica TXE = Transmitter Empty) -------

		// Najprej preverimo, če je ta specifična prekinitev sploh omogočena. Uporabimo LL funkcijo.
		if( LL_USART_IsEnabledIT_TXE_TXFNF (USART3) )		// sploh omogočena prekinitev ob TXE?
 8000acc:	4807      	ldr	r0, [pc, #28]	; (8000aec <USART3_IRQHandler+0x40>)
 8000ace:	f7ff ffb0 	bl	8000a32 <LL_USART_IsEnabledIT_TXE_TXFNF>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d007      	beq.n	8000ae8 <USART3_IRQHandler+0x3c>
		{
			// Če je prekinitev omogočena, potem preverimo še, če je postavljena ustrezna zastavica.
			if( LL_USART_IsActiveFlag_TXE_TXFNF(USART3) )		// postavljena zastavica TXE?
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <USART3_IRQHandler+0x40>)
 8000ada:	f7ff ff84 	bl	80009e6 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <USART3_IRQHandler+0x3c>
			{
				// Če je ta specifična prekinitev omogočena in če je postavljena zastavica tega specifičnega
				// prekinitvenega dogodka, potem se odzovemo s klicem ustrezne "callback" rutine.

					// DOPOLNI done
				SCI_transmit_char_Callback();
 8000ae4:	f002 fa62 	bl	8002fac <SCI_transmit_char_Callback>

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40004800 	.word	0x40004800

08000af0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	e00a      	b.n	8000b18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b02:	f3af 8000 	nop.w
 8000b06:	4601      	mov	r1, r0
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	60ba      	str	r2, [r7, #8]
 8000b0e:	b2ca      	uxtb	r2, r1
 8000b10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbf0      	blt.n	8000b02 <_read+0x12>
	}

return len;
 8000b20:	687b      	ldr	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
	return -1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b52:	605a      	str	r2, [r3, #4]
	return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b085      	sub	sp, #20
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
	return 0;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b84:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <_sbrk+0x5c>)
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <_sbrk+0x60>)
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <_sbrk+0x64>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <_sbrk+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d207      	bcs.n	8000bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bac:	f002 fb9c 	bl	80032e8 <__errno>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	e009      	b.n	8000bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <_sbrk+0x64>)
 8000bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20020000 	.word	0x20020000
 8000bdc:	00000400 	.word	0x00000400
 8000be0:	2000008c 	.word	0x2000008c
 8000be4:	200005a0 	.word	0x200005a0

08000be8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <SystemInit+0x20>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <SystemInit+0x20>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480d      	ldr	r0, [pc, #52]	; (8000c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c12:	490e      	ldr	r1, [pc, #56]	; (8000c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c14:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <LoopForever+0xe>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c28:	4c0b      	ldr	r4, [pc, #44]	; (8000c58 <LoopForever+0x16>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c36:	f7ff ffd7 	bl	8000be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f002 fb5b 	bl	80032f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c3e:	f7ff fc6f 	bl	8000520 <main>

08000c42 <LoopForever>:

LoopForever:
    b LoopForever
 8000c42:	e7fe      	b.n	8000c42 <LoopForever>
  ldr   r0, =_estack
 8000c44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c50:	08003c34 	.word	0x08003c34
  ldr r2, =_sbss
 8000c54:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c58:	200005a0 	.word	0x200005a0

08000c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC1_2_IRQHandler>

08000c5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f000 f93d 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c6e:	200f      	movs	r0, #15
 8000c70:	f000 f80e 	bl	8000c90 <HAL_InitTick>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	71fb      	strb	r3, [r7, #7]
 8000c7e:	e001      	b.n	8000c84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c80:	f7ff fe7a 	bl	8000978 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c84:	79fb      	ldrb	r3, [r7, #7]

}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <HAL_InitTick+0x68>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d022      	beq.n	8000cea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_InitTick+0x6c>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_InitTick+0x68>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f93a 	bl	8000f32 <HAL_SYSTICK_Config>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d10f      	bne.n	8000ce4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b0f      	cmp	r3, #15
 8000cc8:	d809      	bhi.n	8000cde <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd2:	f000 f914 	bl	8000efe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_InitTick+0x70>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	e007      	b.n	8000cee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	e004      	b.n	8000cee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	e001      	b.n	8000cee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000004 	.word	0x20000004

08000d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_IncTick+0x1c>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <HAL_IncTick+0x20>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a03      	ldr	r2, [pc, #12]	; (8000d20 <HAL_IncTick+0x1c>)
 8000d14:	6013      	str	r3, [r2, #0]
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	20000098 	.word	0x20000098
 8000d24:	20000008 	.word	0x20000008

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000098 	.word	0x20000098

08000d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff ffee 	bl	8000d28 <HAL_GetTick>
 8000d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d58:	d004      	beq.n	8000d64 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_Delay+0x40>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	4413      	add	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d64:	bf00      	nop
 8000d66:	f7ff ffdf 	bl	8000d28 <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d8f7      	bhi.n	8000d66 <HAL_Delay+0x26>
  {
  }
}
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000008 	.word	0x20000008

08000d84 <__NVIC_SetPriorityGrouping>:
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_GetPriorityGrouping>:
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_SetPriority>:
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb4:	d301      	bcc.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <SysTick_Config+0x40>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f7ff ff8e 	bl	8000de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <SysTick_Config+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <SysTick_Config+0x40>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff47 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0c:	f7ff ff5e 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	f7ff ff90 	bl	8000e3c <NVIC_EncodePriority>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff5f 	bl	8000de8 <__NVIC_SetPriority>
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffb2 	bl	8000ea4 <SysTick_Config>
 8000f40:	4603      	mov	r3, r0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d141      	bne.n	8000fde <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f5a:	4b4b      	ldr	r3, [pc, #300]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f66:	d131      	bne.n	8000fcc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f68:	4b47      	ldr	r3, [pc, #284]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f6e:	4a46      	ldr	r2, [pc, #280]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f78:	4b43      	ldr	r3, [pc, #268]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f80:	4a41      	ldr	r2, [pc, #260]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f88:	4b40      	ldr	r3, [pc, #256]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2232      	movs	r2, #50	; 0x32
 8000f8e:	fb02 f303 	mul.w	r3, r2, r3
 8000f92:	4a3f      	ldr	r2, [pc, #252]	; (8001090 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f94:	fba2 2303 	umull	r2, r3, r2, r3
 8000f98:	0c9b      	lsrs	r3, r3, #18
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f9e:	e002      	b.n	8000fa6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fa6:	4b38      	ldr	r3, [pc, #224]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fb2:	d102      	bne.n	8000fba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f2      	bne.n	8000fa0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fba:	4b33      	ldr	r3, [pc, #204]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fc6:	d158      	bne.n	800107a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e057      	b.n	800107c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fcc:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fd2:	4a2d      	ldr	r2, [pc, #180]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000fdc:	e04d      	b.n	800107a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fe4:	d141      	bne.n	800106a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fe6:	4b28      	ldr	r3, [pc, #160]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff2:	d131      	bne.n	8001058 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ff4:	4b24      	ldr	r3, [pc, #144]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ffa:	4a23      	ldr	r2, [pc, #140]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001000:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800100c:	4a1e      	ldr	r2, [pc, #120]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800100e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001012:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2232      	movs	r2, #50	; 0x32
 800101a:	fb02 f303 	mul.w	r3, r2, r3
 800101e:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001020:	fba2 2303 	umull	r2, r3, r2, r3
 8001024:	0c9b      	lsrs	r3, r3, #18
 8001026:	3301      	adds	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800102a:	e002      	b.n	8001032 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3b01      	subs	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800103e:	d102      	bne.n	8001046 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f2      	bne.n	800102c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001052:	d112      	bne.n	800107a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e011      	b.n	800107c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800105a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001068:	e007      	b.n	800107a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001072:	4a05      	ldr	r2, [pc, #20]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001074:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001078:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	40007000 	.word	0x40007000
 800108c:	20000000 	.word	0x20000000
 8001090:	431bde83 	.word	0x431bde83

08001094 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800109e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a2:	6093      	str	r3, [r2, #8]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40007000 	.word	0x40007000

080010b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e308      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d075      	beq.n	80011be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010d2:	4ba3      	ldr	r3, [pc, #652]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 030c 	and.w	r3, r3, #12
 80010da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010dc:	4ba0      	ldr	r3, [pc, #640]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	2b0c      	cmp	r3, #12
 80010ea:	d102      	bne.n	80010f2 <HAL_RCC_OscConfig+0x3e>
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d002      	beq.n	80010f8 <HAL_RCC_OscConfig+0x44>
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	2b08      	cmp	r3, #8
 80010f6:	d10b      	bne.n	8001110 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f8:	4b99      	ldr	r3, [pc, #612]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d05b      	beq.n	80011bc <HAL_RCC_OscConfig+0x108>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d157      	bne.n	80011bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e2e3      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001118:	d106      	bne.n	8001128 <HAL_RCC_OscConfig+0x74>
 800111a:	4b91      	ldr	r3, [pc, #580]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a90      	ldr	r2, [pc, #576]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e01d      	b.n	8001164 <HAL_RCC_OscConfig+0xb0>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001130:	d10c      	bne.n	800114c <HAL_RCC_OscConfig+0x98>
 8001132:	4b8b      	ldr	r3, [pc, #556]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a8a      	ldr	r2, [pc, #552]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	4b88      	ldr	r3, [pc, #544]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a87      	ldr	r2, [pc, #540]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e00b      	b.n	8001164 <HAL_RCC_OscConfig+0xb0>
 800114c:	4b84      	ldr	r3, [pc, #528]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a83      	ldr	r2, [pc, #524]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b81      	ldr	r3, [pc, #516]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a80      	ldr	r2, [pc, #512]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 800115e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d013      	beq.n	8001194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116c:	f7ff fddc 	bl	8000d28 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001174:	f7ff fdd8 	bl	8000d28 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b64      	cmp	r3, #100	; 0x64
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e2a8      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001186:	4b76      	ldr	r3, [pc, #472]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f0      	beq.n	8001174 <HAL_RCC_OscConfig+0xc0>
 8001192:	e014      	b.n	80011be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001194:	f7ff fdc8 	bl	8000d28 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800119c:	f7ff fdc4 	bl	8000d28 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b64      	cmp	r3, #100	; 0x64
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e294      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ae:	4b6c      	ldr	r3, [pc, #432]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0xe8>
 80011ba:	e000      	b.n	80011be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d075      	beq.n	80012b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ca:	4b65      	ldr	r3, [pc, #404]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011d4:	4b62      	ldr	r3, [pc, #392]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	2b0c      	cmp	r3, #12
 80011e2:	d102      	bne.n	80011ea <HAL_RCC_OscConfig+0x136>
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d002      	beq.n	80011f0 <HAL_RCC_OscConfig+0x13c>
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d11f      	bne.n	8001230 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011f0:	4b5b      	ldr	r3, [pc, #364]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <HAL_RCC_OscConfig+0x154>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e267      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001208:	4b55      	ldr	r3, [pc, #340]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	061b      	lsls	r3, r3, #24
 8001216:	4952      	ldr	r1, [pc, #328]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	4313      	orrs	r3, r2
 800121a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800121c:	4b51      	ldr	r3, [pc, #324]	; (8001364 <HAL_RCC_OscConfig+0x2b0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fd35 	bl	8000c90 <HAL_InitTick>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d043      	beq.n	80012b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e253      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d023      	beq.n	8001280 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001238:	4b49      	ldr	r3, [pc, #292]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a48      	ldr	r2, [pc, #288]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001244:	f7ff fd70 	bl	8000d28 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124c:	f7ff fd6c 	bl	8000d28 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e23c      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800125e:	4b40      	ldr	r3, [pc, #256]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126a:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	061b      	lsls	r3, r3, #24
 8001278:	4939      	ldr	r1, [pc, #228]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 800127a:	4313      	orrs	r3, r2
 800127c:	604b      	str	r3, [r1, #4]
 800127e:	e01a      	b.n	80012b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001280:	4b37      	ldr	r3, [pc, #220]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a36      	ldr	r2, [pc, #216]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001286:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800128a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128c:	f7ff fd4c 	bl	8000d28 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001294:	f7ff fd48 	bl	8000d28 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e218      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0x1e0>
 80012b2:	e000      	b.n	80012b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d03c      	beq.n	800133c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d01c      	beq.n	8001304 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012d0:	4a23      	ldr	r2, [pc, #140]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012da:	f7ff fd25 	bl	8000d28 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e2:	f7ff fd21 	bl	8000d28 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e1f1      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 80012f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0ef      	beq.n	80012e2 <HAL_RCC_OscConfig+0x22e>
 8001302:	e01b      	b.n	800133c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800130a:	4a15      	ldr	r2, [pc, #84]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	f023 0301 	bic.w	r3, r3, #1
 8001310:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001314:	f7ff fd08 	bl	8000d28 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800131c:	f7ff fd04 	bl	8000d28 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e1d4      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1ef      	bne.n	800131c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80ab 	beq.w	80014a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d106      	bne.n	8001368 <HAL_RCC_OscConfig+0x2b4>
 800135a:	2301      	movs	r3, #1
 800135c:	e005      	b.n	800136a <HAL_RCC_OscConfig+0x2b6>
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	20000004 	.word	0x20000004
 8001368:	2300      	movs	r3, #0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00d      	beq.n	800138a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4baf      	ldr	r3, [pc, #700]	; (800162c <HAL_RCC_OscConfig+0x578>)
 8001370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001372:	4aae      	ldr	r2, [pc, #696]	; (800162c <HAL_RCC_OscConfig+0x578>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	6593      	str	r3, [r2, #88]	; 0x58
 800137a:	4bac      	ldr	r3, [pc, #688]	; (800162c <HAL_RCC_OscConfig+0x578>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001386:	2301      	movs	r3, #1
 8001388:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800138a:	4ba9      	ldr	r3, [pc, #676]	; (8001630 <HAL_RCC_OscConfig+0x57c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001392:	2b00      	cmp	r3, #0
 8001394:	d118      	bne.n	80013c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001396:	4ba6      	ldr	r3, [pc, #664]	; (8001630 <HAL_RCC_OscConfig+0x57c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4aa5      	ldr	r2, [pc, #660]	; (8001630 <HAL_RCC_OscConfig+0x57c>)
 800139c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a2:	f7ff fcc1 	bl	8000d28 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013aa:	f7ff fcbd 	bl	8000d28 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e18d      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013bc:	4b9c      	ldr	r3, [pc, #624]	; (8001630 <HAL_RCC_OscConfig+0x57c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d108      	bne.n	80013e2 <HAL_RCC_OscConfig+0x32e>
 80013d0:	4b96      	ldr	r3, [pc, #600]	; (800162c <HAL_RCC_OscConfig+0x578>)
 80013d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d6:	4a95      	ldr	r2, [pc, #596]	; (800162c <HAL_RCC_OscConfig+0x578>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013e0:	e024      	b.n	800142c <HAL_RCC_OscConfig+0x378>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2b05      	cmp	r3, #5
 80013e8:	d110      	bne.n	800140c <HAL_RCC_OscConfig+0x358>
 80013ea:	4b90      	ldr	r3, [pc, #576]	; (800162c <HAL_RCC_OscConfig+0x578>)
 80013ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f0:	4a8e      	ldr	r2, [pc, #568]	; (800162c <HAL_RCC_OscConfig+0x578>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013fa:	4b8c      	ldr	r3, [pc, #560]	; (800162c <HAL_RCC_OscConfig+0x578>)
 80013fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001400:	4a8a      	ldr	r2, [pc, #552]	; (800162c <HAL_RCC_OscConfig+0x578>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800140a:	e00f      	b.n	800142c <HAL_RCC_OscConfig+0x378>
 800140c:	4b87      	ldr	r3, [pc, #540]	; (800162c <HAL_RCC_OscConfig+0x578>)
 800140e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001412:	4a86      	ldr	r2, [pc, #536]	; (800162c <HAL_RCC_OscConfig+0x578>)
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800141c:	4b83      	ldr	r3, [pc, #524]	; (800162c <HAL_RCC_OscConfig+0x578>)
 800141e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001422:	4a82      	ldr	r2, [pc, #520]	; (800162c <HAL_RCC_OscConfig+0x578>)
 8001424:	f023 0304 	bic.w	r3, r3, #4
 8001428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d016      	beq.n	8001462 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001434:	f7ff fc78 	bl	8000d28 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800143a:	e00a      	b.n	8001452 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800143c:	f7ff fc74 	bl	8000d28 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	f241 3288 	movw	r2, #5000	; 0x1388
 800144a:	4293      	cmp	r3, r2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e142      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001452:	4b76      	ldr	r3, [pc, #472]	; (800162c <HAL_RCC_OscConfig+0x578>)
 8001454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0ed      	beq.n	800143c <HAL_RCC_OscConfig+0x388>
 8001460:	e015      	b.n	800148e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001462:	f7ff fc61 	bl	8000d28 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001468:	e00a      	b.n	8001480 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800146a:	f7ff fc5d 	bl	8000d28 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	f241 3288 	movw	r2, #5000	; 0x1388
 8001478:	4293      	cmp	r3, r2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e12b      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001480:	4b6a      	ldr	r3, [pc, #424]	; (800162c <HAL_RCC_OscConfig+0x578>)
 8001482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1ed      	bne.n	800146a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800148e:	7ffb      	ldrb	r3, [r7, #31]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d105      	bne.n	80014a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001494:	4b65      	ldr	r3, [pc, #404]	; (800162c <HAL_RCC_OscConfig+0x578>)
 8001496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001498:	4a64      	ldr	r2, [pc, #400]	; (800162c <HAL_RCC_OscConfig+0x578>)
 800149a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800149e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d03c      	beq.n	8001526 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d01c      	beq.n	80014ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014b4:	4b5d      	ldr	r3, [pc, #372]	; (800162c <HAL_RCC_OscConfig+0x578>)
 80014b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014ba:	4a5c      	ldr	r2, [pc, #368]	; (800162c <HAL_RCC_OscConfig+0x578>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c4:	f7ff fc30 	bl	8000d28 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014cc:	f7ff fc2c 	bl	8000d28 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e0fc      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014de:	4b53      	ldr	r3, [pc, #332]	; (800162c <HAL_RCC_OscConfig+0x578>)
 80014e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0ef      	beq.n	80014cc <HAL_RCC_OscConfig+0x418>
 80014ec:	e01b      	b.n	8001526 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014ee:	4b4f      	ldr	r3, [pc, #316]	; (800162c <HAL_RCC_OscConfig+0x578>)
 80014f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014f4:	4a4d      	ldr	r2, [pc, #308]	; (800162c <HAL_RCC_OscConfig+0x578>)
 80014f6:	f023 0301 	bic.w	r3, r3, #1
 80014fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fe:	f7ff fc13 	bl	8000d28 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001506:	f7ff fc0f 	bl	8000d28 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e0df      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001518:	4b44      	ldr	r3, [pc, #272]	; (800162c <HAL_RCC_OscConfig+0x578>)
 800151a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1ef      	bne.n	8001506 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 80d3 	beq.w	80016d6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001530:	4b3e      	ldr	r3, [pc, #248]	; (800162c <HAL_RCC_OscConfig+0x578>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 030c 	and.w	r3, r3, #12
 8001538:	2b0c      	cmp	r3, #12
 800153a:	f000 808d 	beq.w	8001658 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d15a      	bne.n	80015fc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001546:	4b39      	ldr	r3, [pc, #228]	; (800162c <HAL_RCC_OscConfig+0x578>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a38      	ldr	r2, [pc, #224]	; (800162c <HAL_RCC_OscConfig+0x578>)
 800154c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001552:	f7ff fbe9 	bl	8000d28 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800155a:	f7ff fbe5 	bl	8000d28 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e0b5      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800156c:	4b2f      	ldr	r3, [pc, #188]	; (800162c <HAL_RCC_OscConfig+0x578>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f0      	bne.n	800155a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001578:	4b2c      	ldr	r3, [pc, #176]	; (800162c <HAL_RCC_OscConfig+0x578>)
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_RCC_OscConfig+0x580>)
 800157e:	4013      	ands	r3, r2
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6a11      	ldr	r1, [r2, #32]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001588:	3a01      	subs	r2, #1
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	4311      	orrs	r1, r2
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001592:	0212      	lsls	r2, r2, #8
 8001594:	4311      	orrs	r1, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800159a:	0852      	lsrs	r2, r2, #1
 800159c:	3a01      	subs	r2, #1
 800159e:	0552      	lsls	r2, r2, #21
 80015a0:	4311      	orrs	r1, r2
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015a6:	0852      	lsrs	r2, r2, #1
 80015a8:	3a01      	subs	r2, #1
 80015aa:	0652      	lsls	r2, r2, #25
 80015ac:	4311      	orrs	r1, r2
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015b2:	06d2      	lsls	r2, r2, #27
 80015b4:	430a      	orrs	r2, r1
 80015b6:	491d      	ldr	r1, [pc, #116]	; (800162c <HAL_RCC_OscConfig+0x578>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_RCC_OscConfig+0x578>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1a      	ldr	r2, [pc, #104]	; (800162c <HAL_RCC_OscConfig+0x578>)
 80015c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <HAL_RCC_OscConfig+0x578>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4a17      	ldr	r2, [pc, #92]	; (800162c <HAL_RCC_OscConfig+0x578>)
 80015ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff fba8 	bl	8000d28 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015dc:	f7ff fba4 	bl	8000d28 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e074      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_RCC_OscConfig+0x578>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0x528>
 80015fa:	e06c      	b.n	80016d6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_RCC_OscConfig+0x578>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0a      	ldr	r2, [pc, #40]	; (800162c <HAL_RCC_OscConfig+0x578>)
 8001602:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001606:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_RCC_OscConfig+0x578>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_RCC_OscConfig+0x578>)
 800160e:	f023 0303 	bic.w	r3, r3, #3
 8001612:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_RCC_OscConfig+0x578>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	4a04      	ldr	r2, [pc, #16]	; (800162c <HAL_RCC_OscConfig+0x578>)
 800161a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800161e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001622:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fb80 	bl	8000d28 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800162a:	e00e      	b.n	800164a <HAL_RCC_OscConfig+0x596>
 800162c:	40021000 	.word	0x40021000
 8001630:	40007000 	.word	0x40007000
 8001634:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001638:	f7ff fb76 	bl	8000d28 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e046      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800164a:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <HAL_RCC_OscConfig+0x62c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x584>
 8001656:	e03e      	b.n	80016d6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e039      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001664:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <HAL_RCC_OscConfig+0x62c>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f003 0203 	and.w	r2, r3, #3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	429a      	cmp	r2, r3
 8001676:	d12c      	bne.n	80016d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	3b01      	subs	r3, #1
 8001684:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d123      	bne.n	80016d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d11b      	bne.n	80016d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d113      	bne.n	80016d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	3b01      	subs	r3, #1
 80016b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d109      	bne.n	80016d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c8:	085b      	lsrs	r3, r3, #1
 80016ca:	3b01      	subs	r3, #1
 80016cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3720      	adds	r7, #32
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021000 	.word	0x40021000

080016e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e11e      	b.n	800193a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016fc:	4b91      	ldr	r3, [pc, #580]	; (8001944 <HAL_RCC_ClockConfig+0x260>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d910      	bls.n	800172c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b8e      	ldr	r3, [pc, #568]	; (8001944 <HAL_RCC_ClockConfig+0x260>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 020f 	bic.w	r2, r3, #15
 8001712:	498c      	ldr	r1, [pc, #560]	; (8001944 <HAL_RCC_ClockConfig+0x260>)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b8a      	ldr	r3, [pc, #552]	; (8001944 <HAL_RCC_ClockConfig+0x260>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e106      	b.n	800193a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d073      	beq.n	8001820 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b03      	cmp	r3, #3
 800173e:	d129      	bne.n	8001794 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001740:	4b81      	ldr	r3, [pc, #516]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0f4      	b.n	800193a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001750:	f000 f966 	bl	8001a20 <RCC_GetSysClockFreqFromPLLSource>
 8001754:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4a7c      	ldr	r2, [pc, #496]	; (800194c <HAL_RCC_ClockConfig+0x268>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d93f      	bls.n	80017de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800175e:	4b7a      	ldr	r3, [pc, #488]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d009      	beq.n	800177e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001772:	2b00      	cmp	r3, #0
 8001774:	d033      	beq.n	80017de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800177a:	2b00      	cmp	r3, #0
 800177c:	d12f      	bne.n	80017de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800177e:	4b72      	ldr	r3, [pc, #456]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001786:	4a70      	ldr	r2, [pc, #448]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 8001788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800178c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e024      	b.n	80017de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d107      	bne.n	80017ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179c:	4b6a      	ldr	r3, [pc, #424]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d109      	bne.n	80017bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0c6      	b.n	800193a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ac:	4b66      	ldr	r3, [pc, #408]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0be      	b.n	800193a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80017bc:	f000 f8ce 	bl	800195c <HAL_RCC_GetSysClockFreq>
 80017c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4a61      	ldr	r2, [pc, #388]	; (800194c <HAL_RCC_ClockConfig+0x268>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d909      	bls.n	80017de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017ca:	4b5f      	ldr	r3, [pc, #380]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017d2:	4a5d      	ldr	r2, [pc, #372]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 80017d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017de:	4b5a      	ldr	r3, [pc, #360]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f023 0203 	bic.w	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4957      	ldr	r1, [pc, #348]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017f0:	f7ff fa9a 	bl	8000d28 <HAL_GetTick>
 80017f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f6:	e00a      	b.n	800180e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f8:	f7ff fa96 	bl	8000d28 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	; 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e095      	b.n	800193a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180e:	4b4e      	ldr	r3, [pc, #312]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 020c 	and.w	r2, r3, #12
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	429a      	cmp	r2, r3
 800181e:	d1eb      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d023      	beq.n	8001874 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001838:	4b43      	ldr	r3, [pc, #268]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	4a42      	ldr	r2, [pc, #264]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 800183e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001842:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d007      	beq.n	8001860 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001850:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001858:	4a3b      	ldr	r2, [pc, #236]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 800185a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800185e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001860:	4b39      	ldr	r3, [pc, #228]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	4936      	ldr	r1, [pc, #216]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
 8001872:	e008      	b.n	8001886 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2b80      	cmp	r3, #128	; 0x80
 8001878:	d105      	bne.n	8001886 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800187a:	4b33      	ldr	r3, [pc, #204]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	4a32      	ldr	r2, [pc, #200]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 8001880:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001884:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001886:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <HAL_RCC_ClockConfig+0x260>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d21d      	bcs.n	80018d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <HAL_RCC_ClockConfig+0x260>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f023 020f 	bic.w	r2, r3, #15
 800189c:	4929      	ldr	r1, [pc, #164]	; (8001944 <HAL_RCC_ClockConfig+0x260>)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018a4:	f7ff fa40 	bl	8000d28 <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	f7ff fa3c 	bl	8000d28 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e03b      	b.n	800193a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_RCC_ClockConfig+0x260>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d1ed      	bne.n	80018ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d008      	beq.n	80018ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018dc:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4917      	ldr	r1, [pc, #92]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d009      	beq.n	800190e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	490f      	ldr	r1, [pc, #60]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800190e:	f000 f825 	bl	800195c <HAL_RCC_GetSysClockFreq>
 8001912:	4602      	mov	r2, r0
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <HAL_RCC_ClockConfig+0x264>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	490c      	ldr	r1, [pc, #48]	; (8001950 <HAL_RCC_ClockConfig+0x26c>)
 8001920:	5ccb      	ldrb	r3, [r1, r3]
 8001922:	f003 031f 	and.w	r3, r3, #31
 8001926:	fa22 f303 	lsr.w	r3, r2, r3
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <HAL_RCC_ClockConfig+0x270>)
 800192c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_RCC_ClockConfig+0x274>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f9ac 	bl	8000c90 <HAL_InitTick>
 8001938:	4603      	mov	r3, r0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40022000 	.word	0x40022000
 8001948:	40021000 	.word	0x40021000
 800194c:	04c4b400 	.word	0x04c4b400
 8001950:	08003b80 	.word	0x08003b80
 8001954:	20000000 	.word	0x20000000
 8001958:	20000004 	.word	0x20000004

0800195c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001962:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b04      	cmp	r3, #4
 800196c:	d102      	bne.n	8001974 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800196e:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	e047      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001974:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b08      	cmp	r3, #8
 800197e:	d102      	bne.n	8001986 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001980:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	e03e      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001986:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d136      	bne.n	8001a00 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800199c:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	3301      	adds	r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d10c      	bne.n	80019ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019b0:	4a1a      	ldr	r2, [pc, #104]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	4a16      	ldr	r2, [pc, #88]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019ba:	68d2      	ldr	r2, [r2, #12]
 80019bc:	0a12      	lsrs	r2, r2, #8
 80019be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019c2:	fb02 f303 	mul.w	r3, r2, r3
 80019c6:	617b      	str	r3, [r7, #20]
      break;
 80019c8:	e00c      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019ca:	4a13      	ldr	r2, [pc, #76]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d2:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019d4:	68d2      	ldr	r2, [r2, #12]
 80019d6:	0a12      	lsrs	r2, r2, #8
 80019d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019dc:	fb02 f303 	mul.w	r3, r2, r3
 80019e0:	617b      	str	r3, [r7, #20]
      break;
 80019e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0e5b      	lsrs	r3, r3, #25
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	3301      	adds	r3, #1
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	e001      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a04:	693b      	ldr	r3, [r7, #16]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	371c      	adds	r7, #28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000
 8001a18:	00f42400 	.word	0x00f42400
 8001a1c:	007a1200 	.word	0x007a1200

08001a20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a26:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d10c      	bne.n	8001a5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a44:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4c:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a4e:	68d2      	ldr	r2, [r2, #12]
 8001a50:	0a12      	lsrs	r2, r2, #8
 8001a52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	617b      	str	r3, [r7, #20]
    break;
 8001a5c:	e00c      	b.n	8001a78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a68:	68d2      	ldr	r2, [r2, #12]
 8001a6a:	0a12      	lsrs	r2, r2, #8
 8001a6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	617b      	str	r3, [r7, #20]
    break;
 8001a76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	0e5b      	lsrs	r3, r3, #25
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	3301      	adds	r3, #1
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001a92:	687b      	ldr	r3, [r7, #4]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	007a1200 	.word	0x007a1200
 8001aa8:	00f42400 	.word	0x00f42400

08001aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ab8:	2300      	movs	r3, #0
 8001aba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 8098 	beq.w	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aca:	2300      	movs	r3, #0
 8001acc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ace:	4b43      	ldr	r3, [pc, #268]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10d      	bne.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	4b40      	ldr	r3, [pc, #256]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	4a3f      	ldr	r2, [pc, #252]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae6:	4b3d      	ldr	r3, [pc, #244]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af2:	2301      	movs	r3, #1
 8001af4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001af6:	4b3a      	ldr	r3, [pc, #232]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a39      	ldr	r2, [pc, #228]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b02:	f7ff f911 	bl	8000d28 <HAL_GetTick>
 8001b06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b08:	e009      	b.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0a:	f7ff f90d 	bl	8000d28 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d902      	bls.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	74fb      	strb	r3, [r7, #19]
        break;
 8001b1c:	e005      	b.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b1e:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0ef      	beq.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001b2a:	7cfb      	ldrb	r3, [r7, #19]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d159      	bne.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b30:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d01e      	beq.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d019      	beq.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b4c:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b68:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6e:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b78:	4a18      	ldr	r2, [pc, #96]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d016      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8a:	f7ff f8cd 	bl	8000d28 <HAL_GetTick>
 8001b8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b90:	e00b      	b.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b92:	f7ff f8c9 	bl	8000d28 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d902      	bls.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	74fb      	strb	r3, [r7, #19]
            break;
 8001ba8:	e006      	b.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0ec      	beq.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001bb8:	7cfb      	ldrb	r3, [r7, #19]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10b      	bne.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bcc:	4903      	ldr	r1, [pc, #12]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001bd4:	e008      	b.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001bd6:	7cfb      	ldrb	r3, [r7, #19]
 8001bd8:	74bb      	strb	r3, [r7, #18]
 8001bda:	e005      	b.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001be4:	7cfb      	ldrb	r3, [r7, #19]
 8001be6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001be8:	7c7b      	ldrb	r3, [r7, #17]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d105      	bne.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bee:	4baf      	ldr	r3, [pc, #700]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	4aae      	ldr	r2, [pc, #696]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00a      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c06:	4ba9      	ldr	r3, [pc, #676]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0c:	f023 0203 	bic.w	r2, r3, #3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	49a5      	ldr	r1, [pc, #660]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00a      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c28:	4ba0      	ldr	r3, [pc, #640]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2e:	f023 020c 	bic.w	r2, r3, #12
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	499d      	ldr	r1, [pc, #628]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00a      	beq.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c4a:	4b98      	ldr	r3, [pc, #608]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4994      	ldr	r1, [pc, #592]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00a      	beq.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c6c:	4b8f      	ldr	r3, [pc, #572]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	498c      	ldr	r1, [pc, #560]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c8e:	4b87      	ldr	r3, [pc, #540]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	4983      	ldr	r1, [pc, #524]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00a      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cb0:	4b7e      	ldr	r3, [pc, #504]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	497b      	ldr	r1, [pc, #492]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00a      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cd2:	4b76      	ldr	r3, [pc, #472]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	4972      	ldr	r1, [pc, #456]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00a      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001cf4:	4b6d      	ldr	r3, [pc, #436]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	496a      	ldr	r1, [pc, #424]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00a      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d16:	4b65      	ldr	r3, [pc, #404]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	4961      	ldr	r1, [pc, #388]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00a      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001d38:	4b5c      	ldr	r3, [pc, #368]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d3e:	f023 0203 	bic.w	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d46:	4959      	ldr	r1, [pc, #356]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d5a:	4b54      	ldr	r3, [pc, #336]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	4950      	ldr	r1, [pc, #320]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d015      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d7c:	4b4b      	ldr	r3, [pc, #300]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4948      	ldr	r1, [pc, #288]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d9a:	d105      	bne.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d9c:	4b43      	ldr	r3, [pc, #268]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4a42      	ldr	r2, [pc, #264]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001da6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d015      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001db4:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc2:	493a      	ldr	r1, [pc, #232]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dd2:	d105      	bne.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001dd4:	4b35      	ldr	r3, [pc, #212]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4a34      	ldr	r2, [pc, #208]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001dda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dde:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d015      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001dec:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfa:	492c      	ldr	r1, [pc, #176]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e0a:	d105      	bne.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e0c:	4b27      	ldr	r3, [pc, #156]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4a26      	ldr	r2, [pc, #152]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d015      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e32:	491e      	ldr	r1, [pc, #120]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e42:	d105      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	4a18      	ldr	r2, [pc, #96]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d015      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4910      	ldr	r1, [pc, #64]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e7a:	d105      	bne.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d018      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	4902      	ldr	r1, [pc, #8]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001eaa:	e001      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8001eac:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001eb8:	d105      	bne.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001eba:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	4a20      	ldr	r2, [pc, #128]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d015      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee0:	4917      	ldr	r1, [pc, #92]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef0:	d105      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001ef2:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efc:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d015      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001f0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f18:	4909      	ldr	r1, [pc, #36]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f28:	d105      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001f30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f34:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001f36:	7cbb      	ldrb	r3, [r7, #18]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000

08001f44 <LL_GPIO_SetPinMode>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	b08b      	sub	sp, #44	; 0x2c
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	613b      	str	r3, [r7, #16]
  return result;
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001f6a:	2320      	movs	r3, #32
 8001f6c:	e003      	b.n	8001f76 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2103      	movs	r1, #3
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	401a      	ands	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	fa93 f3a3 	rbit	r3, r3
 8001f8c:	61fb      	str	r3, [r7, #28]
  return result;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001f98:	2320      	movs	r3, #32
 8001f9a:	e003      	b.n	8001fa4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	431a      	orrs	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	601a      	str	r2, [r3, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	372c      	adds	r7, #44	; 0x2c
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_GPIO_SetPinOutputType>:
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b085      	sub	sp, #20
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	605a      	str	r2, [r3, #4]
}
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_GPIO_SetPinSpeed>:
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b08b      	sub	sp, #44	; 0x2c
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	613b      	str	r3, [r7, #16]
  return result;
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002014:	2320      	movs	r3, #32
 8002016:	e003      	b.n	8002020 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2103      	movs	r1, #3
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	401a      	ands	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	61fb      	str	r3, [r7, #28]
  return result;
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002042:	2320      	movs	r3, #32
 8002044:	e003      	b.n	800204e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	431a      	orrs	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	609a      	str	r2, [r3, #8]
}
 800205c:	bf00      	nop
 800205e:	372c      	adds	r7, #44	; 0x2c
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_GPIO_SetPinPull>:
{
 8002068:	b480      	push	{r7}
 800206a:	b08b      	sub	sp, #44	; 0x2c
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	613b      	str	r3, [r7, #16]
  return result;
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800208e:	2320      	movs	r3, #32
 8002090:	e003      	b.n	800209a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2103      	movs	r1, #3
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	401a      	ands	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	61fb      	str	r3, [r7, #28]
  return result;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80020bc:	2320      	movs	r3, #32
 80020be:	e003      	b.n	80020c8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	431a      	orrs	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	60da      	str	r2, [r3, #12]
}
 80020d6:	bf00      	nop
 80020d8:	372c      	adds	r7, #44	; 0x2c
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <LL_GPIO_SetAFPin_0_7>:
{
 80020e2:	b480      	push	{r7}
 80020e4:	b08b      	sub	sp, #44	; 0x2c
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a1a      	ldr	r2, [r3, #32]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	613b      	str	r3, [r7, #16]
  return result;
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002108:	2320      	movs	r3, #32
 800210a:	e003      	b.n	8002114 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	210f      	movs	r1, #15
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	401a      	ands	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	61fb      	str	r3, [r7, #28]
  return result;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002136:	2320      	movs	r3, #32
 8002138:	e003      	b.n	8002142 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	431a      	orrs	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	621a      	str	r2, [r3, #32]
}
 8002150:	bf00      	nop
 8002152:	372c      	adds	r7, #44	; 0x2c
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_GPIO_SetAFPin_8_15>:
{
 800215c:	b480      	push	{r7}
 800215e:	b08b      	sub	sp, #44	; 0x2c
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	613b      	str	r3, [r7, #16]
  return result;
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002184:	2320      	movs	r3, #32
 8002186:	e003      	b.n	8002190 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	210f      	movs	r1, #15
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	401a      	ands	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	61fb      	str	r3, [r7, #28]
  return result;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80021b4:	2320      	movs	r3, #32
 80021b6:	e003      	b.n	80021c0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	431a      	orrs	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80021ce:	bf00      	nop
 80021d0:	372c      	adds	r7, #44	; 0x2c
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b088      	sub	sp, #32
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	60fb      	str	r3, [r7, #12]
  return result;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <LL_GPIO_Init+0x26>
    return 32U;
 80021fc:	2320      	movs	r3, #32
 80021fe:	e003      	b.n	8002208 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800220a:	e048      	b.n	800229e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2101      	movs	r1, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d03a      	beq.n	8002298 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d003      	beq.n	8002232 <LL_GPIO_Init+0x58>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d10e      	bne.n	8002250 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	461a      	mov	r2, r3
 8002238:	69b9      	ldr	r1, [r7, #24]
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fed7 	bl	8001fee <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	6819      	ldr	r1, [r3, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	461a      	mov	r2, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff feb7 	bl	8001fbe <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	461a      	mov	r2, r3
 8002256:	69b9      	ldr	r1, [r7, #24]
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff05 	bl	8002068 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d111      	bne.n	800228a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	2bff      	cmp	r3, #255	; 0xff
 800226a:	d807      	bhi.n	800227c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	461a      	mov	r2, r3
 8002272:	69b9      	ldr	r1, [r7, #24]
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff ff34 	bl	80020e2 <LL_GPIO_SetAFPin_0_7>
 800227a:	e006      	b.n	800228a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	461a      	mov	r2, r3
 8002282:	69b9      	ldr	r1, [r7, #24]
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff69 	bl	800215c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	461a      	mov	r2, r3
 8002290:	69b9      	ldr	r1, [r7, #24]
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff fe56 	bl	8001f44 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	3301      	adds	r3, #1
 800229c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1af      	bne.n	800220c <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <LL_RCC_HSI_IsReady+0x24>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c8:	d101      	bne.n	80022ce <LL_RCC_HSI_IsReady+0x16>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <LL_RCC_HSI_IsReady+0x18>
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000

080022e0 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <LL_RCC_LSE_IsReady+0x24>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d101      	bne.n	80022f6 <LL_RCC_LSE_IsReady+0x16>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <LL_RCC_LSE_IsReady+0x18>
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000

08002308 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <LL_RCC_GetSysClkSource+0x18>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 030c 	and.w	r3, r3, #12
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000

08002324 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <LL_RCC_GetAHBPrescaler+0x18>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000

08002340 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000

0800235c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000

08002378 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <LL_RCC_GetUSARTClockSource+0x24>)
 8002382:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	401a      	ands	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	041b      	lsls	r3, r3, #16
 800238e:	4313      	orrs	r3, r2
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	40021000 	.word	0x40021000

080023a0 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <LL_RCC_GetUARTClockSource+0x24>)
 80023aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	401a      	ands	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	041b      	lsls	r3, r3, #16
 80023b6:	4313      	orrs	r3, r2
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	40021000 	.word	0x40021000

080023c8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <LL_RCC_PLL_GetMainSource+0x18>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0303 	and.w	r3, r3, #3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000

080023e4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <LL_RCC_PLL_GetN+0x18>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	0a1b      	lsrs	r3, r3, #8
 80023ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	40021000 	.word	0x40021000

08002400 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <LL_RCC_PLL_GetR+0x18>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000

0800241c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <LL_RCC_PLL_GetDivider+0x18>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000

08002438 <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b03      	cmp	r3, #3
 8002448:	d132      	bne.n	80024b0 <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ff94 	bl	8002378 <LL_RCC_GetUSARTClockSource>
 8002450:	4603      	mov	r3, r0
 8002452:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8002456:	d016      	beq.n	8002486 <LL_RCC_GetUSARTClockFreq+0x4e>
 8002458:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 800245c:	d81c      	bhi.n	8002498 <LL_RCC_GetUSARTClockFreq+0x60>
 800245e:	4a52      	ldr	r2, [pc, #328]	; (80025a8 <LL_RCC_GetUSARTClockFreq+0x170>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d003      	beq.n	800246c <LL_RCC_GetUSARTClockFreq+0x34>
 8002464:	4a51      	ldr	r2, [pc, #324]	; (80025ac <LL_RCC_GetUSARTClockFreq+0x174>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d004      	beq.n	8002474 <LL_RCC_GetUSARTClockFreq+0x3c>
 800246a:	e015      	b.n	8002498 <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800246c:	f000 f934 	bl	80026d8 <RCC_GetSystemClockFreq>
 8002470:	60f8      	str	r0, [r7, #12]
        break;
 8002472:	e094      	b.n	800259e <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002474:	f7ff ff20 	bl	80022b8 <LL_RCC_HSI_IsReady>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 8082 	beq.w	8002584 <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 8002480:	4b4b      	ldr	r3, [pc, #300]	; (80025b0 <LL_RCC_GetUSARTClockFreq+0x178>)
 8002482:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002484:	e07e      	b.n	8002584 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002486:	f7ff ff2b 	bl	80022e0 <LL_RCC_LSE_IsReady>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d07b      	beq.n	8002588 <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 8002490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002494:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002496:	e077      	b.n	8002588 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002498:	f000 f91e 	bl	80026d8 <RCC_GetSystemClockFreq>
 800249c:	4603      	mov	r3, r0
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f940 	bl	8002724 <RCC_GetHCLKClockFreq>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f96a 	bl	8002780 <RCC_GetPCLK2ClockFreq>
 80024ac:	60f8      	str	r0, [r7, #12]
        break;
 80024ae:	e076      	b.n	800259e <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b0c      	cmp	r3, #12
 80024b4:	d131      	bne.n	800251a <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ff5e 	bl	8002378 <LL_RCC_GetUSARTClockSource>
 80024bc:	4603      	mov	r3, r0
 80024be:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80024c2:	d015      	beq.n	80024f0 <LL_RCC_GetUSARTClockFreq+0xb8>
 80024c4:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80024c8:	d81b      	bhi.n	8002502 <LL_RCC_GetUSARTClockFreq+0xca>
 80024ca:	4a3a      	ldr	r2, [pc, #232]	; (80025b4 <LL_RCC_GetUSARTClockFreq+0x17c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d003      	beq.n	80024d8 <LL_RCC_GetUSARTClockFreq+0xa0>
 80024d0:	4a39      	ldr	r2, [pc, #228]	; (80025b8 <LL_RCC_GetUSARTClockFreq+0x180>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d004      	beq.n	80024e0 <LL_RCC_GetUSARTClockFreq+0xa8>
 80024d6:	e014      	b.n	8002502 <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80024d8:	f000 f8fe 	bl	80026d8 <RCC_GetSystemClockFreq>
 80024dc:	60f8      	str	r0, [r7, #12]
        break;
 80024de:	e05e      	b.n	800259e <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80024e0:	f7ff feea 	bl	80022b8 <LL_RCC_HSI_IsReady>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d050      	beq.n	800258c <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 80024ea:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <LL_RCC_GetUSARTClockFreq+0x178>)
 80024ec:	60fb      	str	r3, [r7, #12]
        }
        break;
 80024ee:	e04d      	b.n	800258c <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80024f0:	f7ff fef6 	bl	80022e0 <LL_RCC_LSE_IsReady>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d04a      	beq.n	8002590 <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 80024fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024fe:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002500:	e046      	b.n	8002590 <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002502:	f000 f8e9 	bl	80026d8 <RCC_GetSystemClockFreq>
 8002506:	4603      	mov	r3, r0
 8002508:	4618      	mov	r0, r3
 800250a:	f000 f90b 	bl	8002724 <RCC_GetHCLKClockFreq>
 800250e:	4603      	mov	r3, r0
 8002510:	4618      	mov	r0, r3
 8002512:	f000 f91f 	bl	8002754 <RCC_GetPCLK1ClockFreq>
 8002516:	60f8      	str	r0, [r7, #12]
        break;
 8002518:	e041      	b.n	800259e <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b30      	cmp	r3, #48	; 0x30
 800251e:	d139      	bne.n	8002594 <LL_RCC_GetUSARTClockFreq+0x15c>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff ff29 	bl	8002378 <LL_RCC_GetUSARTClockSource>
 8002526:	4603      	mov	r3, r0
 8002528:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800252c:	d015      	beq.n	800255a <LL_RCC_GetUSARTClockFreq+0x122>
 800252e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8002532:	d81b      	bhi.n	800256c <LL_RCC_GetUSARTClockFreq+0x134>
 8002534:	4a21      	ldr	r2, [pc, #132]	; (80025bc <LL_RCC_GetUSARTClockFreq+0x184>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d003      	beq.n	8002542 <LL_RCC_GetUSARTClockFreq+0x10a>
 800253a:	4a21      	ldr	r2, [pc, #132]	; (80025c0 <LL_RCC_GetUSARTClockFreq+0x188>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d004      	beq.n	800254a <LL_RCC_GetUSARTClockFreq+0x112>
 8002540:	e014      	b.n	800256c <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8002542:	f000 f8c9 	bl	80026d8 <RCC_GetSystemClockFreq>
 8002546:	60f8      	str	r0, [r7, #12]
          break;
 8002548:	e029      	b.n	800259e <LL_RCC_GetUSARTClockFreq+0x166>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 800254a:	f7ff feb5 	bl	80022b8 <LL_RCC_HSI_IsReady>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d021      	beq.n	8002598 <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = HSI_VALUE;
 8002554:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <LL_RCC_GetUSARTClockFreq+0x178>)
 8002556:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002558:	e01e      	b.n	8002598 <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 800255a:	f7ff fec1 	bl	80022e0 <LL_RCC_LSE_IsReady>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01b      	beq.n	800259c <LL_RCC_GetUSARTClockFreq+0x164>
          {
            usart_frequency = LSE_VALUE;
 8002564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002568:	60fb      	str	r3, [r7, #12]
          }
          break;
 800256a:	e017      	b.n	800259c <LL_RCC_GetUSARTClockFreq+0x164>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800256c:	f000 f8b4 	bl	80026d8 <RCC_GetSystemClockFreq>
 8002570:	4603      	mov	r3, r0
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f8d6 	bl	8002724 <RCC_GetHCLKClockFreq>
 8002578:	4603      	mov	r3, r0
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f8ea 	bl	8002754 <RCC_GetPCLK1ClockFreq>
 8002580:	60f8      	str	r0, [r7, #12]
          break;
 8002582:	e00c      	b.n	800259e <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8002584:	bf00      	nop
 8002586:	e00a      	b.n	800259e <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8002588:	bf00      	nop
 800258a:	e008      	b.n	800259e <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 800258c:	bf00      	nop
 800258e:	e006      	b.n	800259e <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8002590:	bf00      	nop
 8002592:	e004      	b.n	800259e <LL_RCC_GetUSARTClockFreq+0x166>
      }
    }
 8002594:	bf00      	nop
 8002596:	e002      	b.n	800259e <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 8002598:	bf00      	nop
 800259a:	e000      	b.n	800259e <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 800259c:	bf00      	nop
  }
  return usart_frequency;
 800259e:	68fb      	ldr	r3, [r7, #12]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	00030001 	.word	0x00030001
 80025ac:	00030002 	.word	0x00030002
 80025b0:	00f42400 	.word	0x00f42400
 80025b4:	000c0004 	.word	0x000c0004
 80025b8:	000c0008 	.word	0x000c0008
 80025bc:	00300010 	.word	0x00300010
 80025c0:	00300020 	.word	0x00300020

080025c4 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2bc0      	cmp	r3, #192	; 0xc0
 80025d4:	d131      	bne.n	800263a <LL_RCC_GetUARTClockFreq+0x76>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff fee2 	bl	80023a0 <LL_RCC_GetUARTClockSource>
 80025dc:	4603      	mov	r3, r0
 80025de:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80025e2:	d015      	beq.n	8002610 <LL_RCC_GetUARTClockFreq+0x4c>
 80025e4:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80025e8:	d81b      	bhi.n	8002622 <LL_RCC_GetUARTClockFreq+0x5e>
 80025ea:	4a36      	ldr	r2, [pc, #216]	; (80026c4 <LL_RCC_GetUARTClockFreq+0x100>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d003      	beq.n	80025f8 <LL_RCC_GetUARTClockFreq+0x34>
 80025f0:	4a35      	ldr	r2, [pc, #212]	; (80026c8 <LL_RCC_GetUARTClockFreq+0x104>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d004      	beq.n	8002600 <LL_RCC_GetUARTClockFreq+0x3c>
 80025f6:	e014      	b.n	8002622 <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80025f8:	f000 f86e 	bl	80026d8 <RCC_GetSystemClockFreq>
 80025fc:	60f8      	str	r0, [r7, #12]
        break;
 80025fe:	e021      	b.n	8002644 <LL_RCC_GetUARTClockFreq+0x80>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002600:	f7ff fe5a 	bl	80022b8 <LL_RCC_HSI_IsReady>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d019      	beq.n	800263e <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = HSI_VALUE;
 800260a:	4b30      	ldr	r3, [pc, #192]	; (80026cc <LL_RCC_GetUARTClockFreq+0x108>)
 800260c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800260e:	e016      	b.n	800263e <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002610:	f7ff fe66 	bl	80022e0 <LL_RCC_LSE_IsReady>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d013      	beq.n	8002642 <LL_RCC_GetUARTClockFreq+0x7e>
        {
          uart_frequency = LSE_VALUE;
 800261a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800261e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002620:	e00f      	b.n	8002642 <LL_RCC_GetUARTClockFreq+0x7e>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002622:	f000 f859 	bl	80026d8 <RCC_GetSystemClockFreq>
 8002626:	4603      	mov	r3, r0
 8002628:	4618      	mov	r0, r3
 800262a:	f000 f87b 	bl	8002724 <RCC_GetHCLKClockFreq>
 800262e:	4603      	mov	r3, r0
 8002630:	4618      	mov	r0, r3
 8002632:	f000 f88f 	bl	8002754 <RCC_GetPCLK1ClockFreq>
 8002636:	60f8      	str	r0, [r7, #12]
        break;
 8002638:	e004      	b.n	8002644 <LL_RCC_GetUARTClockFreq+0x80>
    }
  }
 800263a:	bf00      	nop
 800263c:	e002      	b.n	8002644 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 800263e:	bf00      	nop
 8002640:	e000      	b.n	8002644 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 8002642:	bf00      	nop

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800264a:	d131      	bne.n	80026b0 <LL_RCC_GetUARTClockFreq+0xec>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff fea7 	bl	80023a0 <LL_RCC_GetUARTClockSource>
 8002652:	4603      	mov	r3, r0
 8002654:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8002658:	d015      	beq.n	8002686 <LL_RCC_GetUARTClockFreq+0xc2>
 800265a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800265e:	d81b      	bhi.n	8002698 <LL_RCC_GetUARTClockFreq+0xd4>
 8002660:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <LL_RCC_GetUARTClockFreq+0x10c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d003      	beq.n	800266e <LL_RCC_GetUARTClockFreq+0xaa>
 8002666:	4a1b      	ldr	r2, [pc, #108]	; (80026d4 <LL_RCC_GetUARTClockFreq+0x110>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d004      	beq.n	8002676 <LL_RCC_GetUARTClockFreq+0xb2>
 800266c:	e014      	b.n	8002698 <LL_RCC_GetUARTClockFreq+0xd4>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800266e:	f000 f833 	bl	80026d8 <RCC_GetSystemClockFreq>
 8002672:	60f8      	str	r0, [r7, #12]
        break;
 8002674:	e021      	b.n	80026ba <LL_RCC_GetUARTClockFreq+0xf6>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002676:	f7ff fe1f 	bl	80022b8 <LL_RCC_HSI_IsReady>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d019      	beq.n	80026b4 <LL_RCC_GetUARTClockFreq+0xf0>
        {
          uart_frequency = HSI_VALUE;
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <LL_RCC_GetUARTClockFreq+0x108>)
 8002682:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002684:	e016      	b.n	80026b4 <LL_RCC_GetUARTClockFreq+0xf0>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002686:	f7ff fe2b 	bl	80022e0 <LL_RCC_LSE_IsReady>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d013      	beq.n	80026b8 <LL_RCC_GetUARTClockFreq+0xf4>
        {
          uart_frequency = LSE_VALUE;
 8002690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002694:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002696:	e00f      	b.n	80026b8 <LL_RCC_GetUARTClockFreq+0xf4>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002698:	f000 f81e 	bl	80026d8 <RCC_GetSystemClockFreq>
 800269c:	4603      	mov	r3, r0
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f840 	bl	8002724 <RCC_GetHCLKClockFreq>
 80026a4:	4603      	mov	r3, r0
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f854 	bl	8002754 <RCC_GetPCLK1ClockFreq>
 80026ac:	60f8      	str	r0, [r7, #12]
        break;
 80026ae:	e004      	b.n	80026ba <LL_RCC_GetUARTClockFreq+0xf6>
    }
  }
 80026b0:	bf00      	nop
 80026b2:	e002      	b.n	80026ba <LL_RCC_GetUARTClockFreq+0xf6>
        break;
 80026b4:	bf00      	nop
 80026b6:	e000      	b.n	80026ba <LL_RCC_GetUARTClockFreq+0xf6>
        break;
 80026b8:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	00c00040 	.word	0x00c00040
 80026c8:	00c00080 	.word	0x00c00080
 80026cc:	00f42400 	.word	0x00f42400
 80026d0:	03000100 	.word	0x03000100
 80026d4:	03000200 	.word	0x03000200

080026d8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80026de:	f7ff fe13 	bl	8002308 <LL_RCC_GetSysClkSource>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b0c      	cmp	r3, #12
 80026e6:	d00c      	beq.n	8002702 <RCC_GetSystemClockFreq+0x2a>
 80026e8:	2b0c      	cmp	r3, #12
 80026ea:	d80e      	bhi.n	800270a <RCC_GetSystemClockFreq+0x32>
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d002      	beq.n	80026f6 <RCC_GetSystemClockFreq+0x1e>
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d003      	beq.n	80026fc <RCC_GetSystemClockFreq+0x24>
 80026f4:	e009      	b.n	800270a <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <RCC_GetSystemClockFreq+0x44>)
 80026f8:	607b      	str	r3, [r7, #4]
      break;
 80026fa:	e009      	b.n	8002710 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <RCC_GetSystemClockFreq+0x48>)
 80026fe:	607b      	str	r3, [r7, #4]
      break;
 8002700:	e006      	b.n	8002710 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002702:	f000 f853 	bl	80027ac <RCC_PLL_GetFreqDomain_SYS>
 8002706:	6078      	str	r0, [r7, #4]
      break;
 8002708:	e002      	b.n	8002710 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 800270a:	4b04      	ldr	r3, [pc, #16]	; (800271c <RCC_GetSystemClockFreq+0x44>)
 800270c:	607b      	str	r3, [r7, #4]
      break;
 800270e:	bf00      	nop
  }

  return frequency;
 8002710:	687b      	ldr	r3, [r7, #4]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	00f42400 	.word	0x00f42400
 8002720:	007a1200 	.word	0x007a1200

08002724 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800272c:	f7ff fdfa 	bl	8002324 <LL_RCC_GetAHBPrescaler>
 8002730:	4603      	mov	r3, r0
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	4a05      	ldr	r2, [pc, #20]	; (8002750 <RCC_GetHCLKClockFreq+0x2c>)
 800273a:	5cd3      	ldrb	r3, [r2, r3]
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	08003b80 	.word	0x08003b80

08002754 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800275c:	f7ff fdf0 	bl	8002340 <LL_RCC_GetAPB1Prescaler>
 8002760:	4603      	mov	r3, r0
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	4a05      	ldr	r2, [pc, #20]	; (800277c <RCC_GetPCLK1ClockFreq+0x28>)
 8002766:	5cd3      	ldrb	r3, [r2, r3]
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	08003b90 	.word	0x08003b90

08002780 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002788:	f7ff fde8 	bl	800235c <LL_RCC_GetAPB2Prescaler>
 800278c:	4603      	mov	r3, r0
 800278e:	0adb      	lsrs	r3, r3, #11
 8002790:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <RCC_GetPCLK2ClockFreq+0x28>)
 8002792:	5cd3      	ldrb	r3, [r2, r3]
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	08003b90 	.word	0x08003b90

080027ac <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80027b2:	f7ff fe09 	bl	80023c8 <LL_RCC_PLL_GetMainSource>
 80027b6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d003      	beq.n	80027c6 <RCC_PLL_GetFreqDomain_SYS+0x1a>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d003      	beq.n	80027cc <RCC_PLL_GetFreqDomain_SYS+0x20>
 80027c4:	e005      	b.n	80027d2 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80027c8:	607b      	str	r3, [r7, #4]
      break;
 80027ca:	e005      	b.n	80027d8 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80027cc:	4b10      	ldr	r3, [pc, #64]	; (8002810 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 80027ce:	607b      	str	r3, [r7, #4]
      break;
 80027d0:	e002      	b.n	80027d8 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80027d4:	607b      	str	r3, [r7, #4]
      break;
 80027d6:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80027d8:	f7ff fe04 	bl	80023e4 <LL_RCC_PLL_GetN>
 80027dc:	4602      	mov	r2, r0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	fb03 f402 	mul.w	r4, r3, r2
 80027e4:	f7ff fe1a 	bl	800241c <LL_RCC_PLL_GetDivider>
 80027e8:	4603      	mov	r3, r0
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	3301      	adds	r3, #1
 80027ee:	fbb4 f4f3 	udiv	r4, r4, r3
 80027f2:	f7ff fe05 	bl	8002400 <LL_RCC_PLL_GetR>
 80027f6:	4603      	mov	r3, r0
 80027f8:	0e5b      	lsrs	r3, r3, #25
 80027fa:	3301      	adds	r3, #1
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bd90      	pop	{r4, r7, pc}
 800280a:	bf00      	nop
 800280c:	00f42400 	.word	0x00f42400
 8002810:	007a1200 	.word	0x007a1200

08002814 <LL_USART_IsEnabled>:
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <LL_USART_IsEnabled+0x18>
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <LL_USART_IsEnabled+0x1a>
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <LL_USART_SetPrescaler>:
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	f023 030f 	bic.w	r3, r3, #15
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	b292      	uxth	r2, r2
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <LL_USART_SetStopBitsLength>:
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	605a      	str	r2, [r3, #4]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <LL_USART_SetHWFlowCtrl>:
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	609a      	str	r2, [r3, #8]
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <LL_USART_SetBaudRate>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b0b      	cmp	r3, #11
 80028c2:	d83c      	bhi.n	800293e <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d039      	beq.n	800293e <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d0:	d122      	bne.n	8002918 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	4b1c      	ldr	r3, [pc, #112]	; (800294c <LL_USART_SetBaudRate+0x9c>)
 80028da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e4:	005a      	lsls	r2, r3, #1
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	441a      	add	r2, r3
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	085b      	lsrs	r3, r3, #1
 8002904:	b29b      	uxth	r3, r3
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	60da      	str	r2, [r3, #12]
}
 8002916:	e012      	b.n	800293e <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <LL_USART_SetBaudRate+0x9c>)
 8002920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	fbb2 f2f3 	udiv	r2, r2, r3
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	085b      	lsrs	r3, r3, #1
 800292e:	441a      	add	r2, r3
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	b29b      	uxth	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	60da      	str	r2, [r3, #12]
}
 800293e:	bf00      	nop
 8002940:	371c      	adds	r7, #28
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	08003b98 	.word	0x08003b98

08002950 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af02      	add	r7, sp, #8
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ff56 	bl	8002814 <LL_USART_IsEnabled>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d165      	bne.n	8002a3a <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <LL_USART_Init+0xf4>)
 8002974:	4013      	ands	r3, r2
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	6891      	ldr	r1, [r2, #8]
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	6912      	ldr	r2, [r2, #16]
 800297e:	4311      	orrs	r1, r2
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	6952      	ldr	r2, [r2, #20]
 8002984:	4311      	orrs	r1, r2
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	69d2      	ldr	r2, [r2, #28]
 800298a:	430a      	orrs	r2, r1
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	4619      	mov	r1, r3
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ff62 	bl	8002862 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	4619      	mov	r1, r3
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ff6f 	bl	8002888 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a26      	ldr	r2, [pc, #152]	; (8002a48 <LL_USART_Init+0xf8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d104      	bne.n	80029bc <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80029b2:	2003      	movs	r0, #3
 80029b4:	f7ff fd40 	bl	8002438 <LL_RCC_GetUSARTClockFreq>
 80029b8:	60b8      	str	r0, [r7, #8]
 80029ba:	e023      	b.n	8002a04 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a23      	ldr	r2, [pc, #140]	; (8002a4c <LL_USART_Init+0xfc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d104      	bne.n	80029ce <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80029c4:	200c      	movs	r0, #12
 80029c6:	f7ff fd37 	bl	8002438 <LL_RCC_GetUSARTClockFreq>
 80029ca:	60b8      	str	r0, [r7, #8]
 80029cc:	e01a      	b.n	8002a04 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART3)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <LL_USART_Init+0x100>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d104      	bne.n	80029e0 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80029d6:	2030      	movs	r0, #48	; 0x30
 80029d8:	f7ff fd2e 	bl	8002438 <LL_RCC_GetUSARTClockFreq>
 80029dc:	60b8      	str	r0, [r7, #8]
 80029de:	e011      	b.n	8002a04 <LL_USART_Init+0xb4>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <LL_USART_Init+0x104>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d104      	bne.n	80029f2 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80029e8:	20c0      	movs	r0, #192	; 0xc0
 80029ea:	f7ff fdeb 	bl	80025c4 <LL_RCC_GetUARTClockFreq>
 80029ee:	60b8      	str	r0, [r7, #8]
 80029f0:	e008      	b.n	8002a04 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <LL_USART_Init+0x108>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d104      	bne.n	8002a04 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80029fa:	f44f 7040 	mov.w	r0, #768	; 0x300
 80029fe:	f7ff fde1 	bl	80025c4 <LL_RCC_GetUARTClockFreq>
 8002a02:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d011      	beq.n	8002a2e <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00d      	beq.n	8002a2e <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 8002a12:	2300      	movs	r3, #0
 8002a14:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	69d9      	ldr	r1, [r3, #28]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	460b      	mov	r3, r1
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff ff41 	bl	80028b0 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4619      	mov	r1, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff ff00 	bl	800283a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	efff69f3 	.word	0xefff69f3
 8002a48:	40013800 	.word	0x40013800
 8002a4c:	40004400 	.word	0x40004400
 8002a50:	40004800 	.word	0x40004800
 8002a54:	40004c00 	.word	0x40004c00
 8002a58:	40005000 	.word	0x40005000

08002a5c <LL_GPIO_IsOutputPinSet>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->ODR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695a      	ldr	r2, [r3, #20]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d101      	bne.n	8002a78 <LL_GPIO_IsOutputPinSet+0x1c>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <LL_GPIO_IsOutputPinSet+0x1e>
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <LL_GPIO_SetOutputPin>:
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	619a      	str	r2, [r3, #24]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_GPIO_ResetOutputPin>:
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <LED_init>:


// Funkcija LED_init() poskrbi, da se pravilno inicializira LED_group_handle_t struktura.
// Poskrbi tudi, da se določi začetno stanje LEDic.
void LED_init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
		// Uporabite makroje "GPIOn" in "LL_GPIO_PIN_n" iz nizko-nivojske LL knjižnice.
		// Spodaj imate primer za inicializacijo LEDice LED0.


		// LEDice na portu F
		LED_group.LEDs[LED0].pin = LL_GPIO_PIN_2;
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <LED_init+0x70>)
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	605a      	str	r2, [r3, #4]
		LED_group.LEDs[LED0].port = GPIOF;
 8002aca:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <LED_init+0x70>)
 8002acc:	4a19      	ldr	r2, [pc, #100]	; (8002b34 <LED_init+0x74>)
 8002ace:	601a      	str	r2, [r3, #0]

		LED_group.LEDs[LED1].pin = LL_GPIO_PIN_3;
 8002ad0:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <LED_init+0x70>)
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	60da      	str	r2, [r3, #12]
		LED_group.LEDs[LED1].port = GPIOF;
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <LED_init+0x70>)
 8002ad8:	4a16      	ldr	r2, [pc, #88]	; (8002b34 <LED_init+0x74>)
 8002ada:	609a      	str	r2, [r3, #8]

		LED_group.LEDs[LED2].pin = LL_GPIO_PIN_4;
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <LED_init+0x70>)
 8002ade:	2210      	movs	r2, #16
 8002ae0:	615a      	str	r2, [r3, #20]
		LED_group.LEDs[LED2].port = GPIOF;
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <LED_init+0x70>)
 8002ae4:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <LED_init+0x74>)
 8002ae6:	611a      	str	r2, [r3, #16]

		LED_group.LEDs[LED3].pin = LL_GPIO_PIN_5;
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <LED_init+0x70>)
 8002aea:	2220      	movs	r2, #32
 8002aec:	61da      	str	r2, [r3, #28]
		LED_group.LEDs[LED3].port = GPIOF;
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <LED_init+0x70>)
 8002af0:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <LED_init+0x74>)
 8002af2:	619a      	str	r2, [r3, #24]
	//-----------------------------------------------------------
		// LEDice na portu C
		LED_group.LEDs[LED4].pin = LL_GPIO_PIN_0;
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <LED_init+0x70>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24
		LED_group.LEDs[LED4].port = GPIOC;
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <LED_init+0x70>)
 8002afc:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <LED_init+0x78>)
 8002afe:	621a      	str	r2, [r3, #32]

		LED_group.LEDs[LED5].pin = LL_GPIO_PIN_1;
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <LED_init+0x70>)
 8002b02:	2202      	movs	r2, #2
 8002b04:	62da      	str	r2, [r3, #44]	; 0x2c
		LED_group.LEDs[LED5].port = GPIOC;
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <LED_init+0x70>)
 8002b08:	4a0b      	ldr	r2, [pc, #44]	; (8002b38 <LED_init+0x78>)
 8002b0a:	629a      	str	r2, [r3, #40]	; 0x28

		LED_group.LEDs[LED6].pin = LL_GPIO_PIN_2;
 8002b0c:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <LED_init+0x70>)
 8002b0e:	2204      	movs	r2, #4
 8002b10:	635a      	str	r2, [r3, #52]	; 0x34
		LED_group.LEDs[LED6].port = GPIOC;
 8002b12:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <LED_init+0x70>)
 8002b14:	4a08      	ldr	r2, [pc, #32]	; (8002b38 <LED_init+0x78>)
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30

		LED_group.LEDs[LED7].pin = LL_GPIO_PIN_3;
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <LED_init+0x70>)
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	63da      	str	r2, [r3, #60]	; 0x3c
		LED_group.LEDs[LED7].port = GPIOC;
 8002b1e:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <LED_init+0x70>)
 8002b20:	4a05      	ldr	r2, [pc, #20]	; (8002b38 <LED_init+0x78>)
 8002b22:	639a      	str	r2, [r3, #56]	; 0x38

	// 2. Nastavite začetno stanje LEDic (t.i. privzeto stanje (angl. default state)).

		// Na začetku po inicializaciji želimo imeti vse LEDice ugasnjene.
		// Uporabi se lahko kar LEDs_write() funkcijo.
		LEDs_write(0x00);
 8002b24:	2000      	movs	r0, #0
 8002b26:	f000 f895 	bl	8002c54 <LEDs_write>

}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	2000009c 	.word	0x2000009c
 8002b34:	48001400 	.word	0x48001400
 8002b38:	48000800 	.word	0x48000800

08002b3c <LED_on>:

// Funkcija LED_on() prižge tisto LEDico v skupini, ki jo specificira
// vrednost "LEDn". Vrednost "LEDn" pa je lahko eden od elementov iz
// seznama naštevnega tipa LEDs_enum_t.
void LED_on(LEDs_enum_t LEDn)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
	// Za prižig LEDice uporabimo sledečo nizko-nivojsko LL funkcijo:
	//
	//		void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
	//
	LL_GPIO_SetOutputPin(LED_group.LEDs[LEDn].port, LED_group.LEDs[LEDn].pin );
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	4a07      	ldr	r2, [pc, #28]	; (8002b68 <LED_on+0x2c>)
 8002b4a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	4905      	ldr	r1, [pc, #20]	; (8002b68 <LED_on+0x2c>)
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f7ff ff93 	bl	8002a86 <LL_GPIO_SetOutputPin>
	// zamenjate z npr. LED3 iz seznama naštevnega tipa; in tako boste s klicem zgornje
	// funkcijo postavili na visoko stanje prav tisti digitalni izhod, ki pripada
	// portu in pinu LEDice LED3.


}
 8002b60:	bf00      	nop
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	2000009c 	.word	0x2000009c

08002b6c <LED_off>:

// Funkcija LED_on() ugasne tisto LEDico v skupini, ki jo specificira
// vrednost "LEDn". Vrednost "LEDn" pa je lahko eden od elementov iz
// seznama naštevnega tipa LEDs_enum_t.
void LED_off(LEDs_enum_t LEDn)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin( LED_group.LEDs[LEDn].port, LED_group.LEDs[LEDn].pin );
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	4a07      	ldr	r2, [pc, #28]	; (8002b98 <LED_off+0x2c>)
 8002b7a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	4905      	ldr	r1, [pc, #20]	; (8002b98 <LED_off+0x2c>)
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	440b      	add	r3, r1
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f7ff ff89 	bl	8002aa2 <LL_GPIO_ResetOutputPin>
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	2000009c 	.word	0x2000009c

08002b9c <LEDs_on>:
// S funkcijo "LEDs_on()" prižgemo le tiste LEDice v LED skupini, ki jih določa vhodni argument
// bitna maska "LED_bitmask": če je postavljen i-ti bit maske "LED_bitmask", potem prižgemo i-to
// LEDico v skupini; sicer ne spreminjamo stanja LEDice. Pri tem se upošteva enak vrstni red LEDic,
// kot je bil definiran v naštevnem tipu LEDs_enum_t.
void LEDs_on(uint8_t LED_bitmask)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71fb      	strb	r3, [r7, #7]

	// Pomožna bitna maska, s katero bomo "brali" vrednosti posameznih bitov
	// vhodnega argumenta "LED_bitmask" od LSB bita proti MSB bitu.
	uint8_t bitmask = 0x01;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]

	// S "for" zanko se sprehodimo preko vseh LEDic v sistemu.
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	73bb      	strb	r3, [r7, #14]
 8002bae:	e018      	b.n	8002be2 <LEDs_on+0x46>
	{
		// S pomočjo pomožne maske "bitmask" preberemo stanje i-tega bita v vhodnem argumentu "LED_bitmask".
		if ( LED_bitmask & bitmask )
 8002bb0:	79fa      	ldrb	r2, [r7, #7]
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00c      	beq.n	8002bd6 <LEDs_on+0x3a>
		{
			// In če je i-ti bit v vhodnem argumentu "LED_bitmask" postavljen, prižgemo i-to LEDico.
			LL_GPIO_SetOutputPin( LED_group.LEDs[i].port, LED_group.LEDs[i].pin );
 8002bbc:	7bbb      	ldrb	r3, [r7, #14]
 8002bbe:	4a0d      	ldr	r2, [pc, #52]	; (8002bf4 <LEDs_on+0x58>)
 8002bc0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002bc4:	7bbb      	ldrb	r3, [r7, #14]
 8002bc6:	490b      	ldr	r1, [pc, #44]	; (8002bf4 <LEDs_on+0x58>)
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	440b      	add	r3, r1
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	f7ff ff58 	bl	8002a86 <LL_GPIO_SetOutputPin>
		}

		// In nato si pripravimo novo pomožno bitno masko za branje naslednjega bita v vhodnem argumentu.
		bitmask <<= 1;
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8002bdc:	7bbb      	ldrb	r3, [r7, #14]
 8002bde:	3301      	adds	r3, #1
 8002be0:	73bb      	strb	r3, [r7, #14]
 8002be2:	7bbb      	ldrb	r3, [r7, #14]
 8002be4:	2b07      	cmp	r3, #7
 8002be6:	d9e3      	bls.n	8002bb0 <LEDs_on+0x14>
	}
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	2000009c 	.word	0x2000009c

08002bf8 <LEDs_off>:
// S funkcijo "LEDs_off()" ugašamo le tiste LEDice v LED skupini, ki jih določa vhodni argument
// bitna maska "LED_bitmask": če je postavljen i-ti bit maske "LED_bitmask", potem ugasnemo i-to
// LEDico v skupini; sicer ne spreminjamo stanja LEDice. Pri tem se upošteva enak vrstni red LEDic,
// kot je bil definiran v naštevnem tipu LEDs_enum_t.
void LEDs_off(uint8_t LED_bitmask)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
	uint8_t bitmask = 0x01;
 8002c02:	2301      	movs	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8002c06:	2300      	movs	r3, #0
 8002c08:	73bb      	strb	r3, [r7, #14]
 8002c0a:	e018      	b.n	8002c3e <LEDs_off+0x46>
		{
			// S pomočjo pomožne maske "bitmask" preberemo stanje i-tega bita v vhodnem argumentu "LED_bitmask".
			if ( LED_bitmask & bitmask )
 8002c0c:	79fa      	ldrb	r2, [r7, #7]
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	4013      	ands	r3, r2
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00c      	beq.n	8002c32 <LEDs_off+0x3a>
			{
				// In če je i-ti bit v vhodnem argumentu "LED_bitmask" postavljen, prižgemo i-to LEDico.
				LL_GPIO_ResetOutputPin( LED_group.LEDs[i].port, LED_group.LEDs[i].pin );
 8002c18:	7bbb      	ldrb	r3, [r7, #14]
 8002c1a:	4a0d      	ldr	r2, [pc, #52]	; (8002c50 <LEDs_off+0x58>)
 8002c1c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002c20:	7bbb      	ldrb	r3, [r7, #14]
 8002c22:	490b      	ldr	r1, [pc, #44]	; (8002c50 <LEDs_off+0x58>)
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	440b      	add	r3, r1
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	f7ff ff38 	bl	8002aa2 <LL_GPIO_ResetOutputPin>
			}

			// In nato si pripravimo novo pomožno bitno masko za branje naslednjega bita v vhodnem argumentu.
			bitmask <<= 1;
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8002c38:	7bbb      	ldrb	r3, [r7, #14]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	73bb      	strb	r3, [r7, #14]
 8002c3e:	7bbb      	ldrb	r3, [r7, #14]
 8002c40:	2b07      	cmp	r3, #7
 8002c42:	d9e3      	bls.n	8002c0c <LEDs_off+0x14>




	// DOPOLNI. Reši se na enak način kot LEDs_on().
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000009c 	.word	0x2000009c

08002c54 <LEDs_write>:
// V primeru funkcije LEDs_write() pa vrednost vhodnega argumenta "value"
// neposredno določa, katere LEDice v LED skupini bodo prižgane ter katere
// ugasnjene po ideji: če postavljen i-ti bit vrednosti "value", potem naj
// bo prižgana i-ta LEDica; sicer naj bo ugasnjena.
void LEDs_write(uint8_t value)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]
	uint8_t bitmask = 0x01;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]

	// S "for" zanko se sprehodimo preko vseh LEDic v sistemu.
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	73bb      	strb	r3, [r7, #14]
 8002c66:	e014      	b.n	8002c92 <LEDs_write+0x3e>
	{
		// Preveri vrednost i-tega bita vhodnega argumenta "value".
		if (value & bitmask)
 8002c68:	79fa      	ldrb	r2, [r7, #7]
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d004      	beq.n	8002c7e <LEDs_write+0x2a>
		{
			// Če je i-ti bit enak 1, potem naj se prižge i-ta LEDica, pri čemer se pa
			// upošteva vrstni red LEDic, kot je bil definiran v naštevnem tipu LEDs_enum_t;

			LED_on(i);
 8002c74:	7bbb      	ldrb	r3, [r7, #14]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff ff60 	bl	8002b3c <LED_on>
 8002c7c:	e003      	b.n	8002c86 <LEDs_write+0x32>
		}
		else
		{
			// sicer pa naj se i-ta LEDica ugasne.

			LED_off(i);
 8002c7e:	7bbb      	ldrb	r3, [r7, #14]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff73 	bl	8002b6c <LED_off>

		}


		// In nato si pripravimo novo pomožno bitno masko za branje naslednjega bita v vhodnem argumentu.
		bitmask <<= 1;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8002c8c:	7bbb      	ldrb	r3, [r7, #14]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	73bb      	strb	r3, [r7, #14]
 8002c92:	7bbb      	ldrb	r3, [r7, #14]
 8002c94:	2b07      	cmp	r3, #7
 8002c96:	d9e7      	bls.n	8002c68 <LEDs_write+0x14>
	}
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <LEDs_read>:


// Funkcija LEDs_read() vrne 8-bitno vrednost, kjer i-ti bit odraža stanje
// i-te LEDice v LED skupini.
uint8_t LEDs_read(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	71fb      	strb	r3, [r7, #7]
	uint8_t bitmask = 0x01;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	71bb      	strb	r3, [r7, #6]

	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	717b      	strb	r3, [r7, #5]
 8002cb6:	e019      	b.n	8002cec <LEDs_read+0x48>
	{
		if ( LL_GPIO_IsOutputPinSet( LED_group.LEDs[i].port, LED_group.LEDs[i].pin ) )
 8002cb8:	797b      	ldrb	r3, [r7, #5]
 8002cba:	4a10      	ldr	r2, [pc, #64]	; (8002cfc <LEDs_read+0x58>)
 8002cbc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002cc0:	797b      	ldrb	r3, [r7, #5]
 8002cc2:	490e      	ldr	r1, [pc, #56]	; (8002cfc <LEDs_read+0x58>)
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4610      	mov	r0, r2
 8002cce:	f7ff fec5 	bl	8002a5c <LL_GPIO_IsOutputPinSet>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <LEDs_read+0x3c>
			value |= bitmask;
 8002cd8:	79fa      	ldrb	r2, [r7, #7]
 8002cda:	79bb      	ldrb	r3, [r7, #6]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	71fb      	strb	r3, [r7, #7]

		bitmask <<= 1;
 8002ce0:	79bb      	ldrb	r3, [r7, #6]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8002ce6:	797b      	ldrb	r3, [r7, #5]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	717b      	strb	r3, [r7, #5]
 8002cec:	797b      	ldrb	r3, [r7, #5]
 8002cee:	2b07      	cmp	r3, #7
 8002cf0:	d9e2      	bls.n	8002cb8 <LEDs_read+0x14>
	}

	return value;
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	2000009c 	.word	0x2000009c

08002d00 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	2b80      	cmp	r3, #128	; 0x80
 8002d12:	d101      	bne.n	8002d18 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_USART_EnableIT_RXNE_RXFNE>:
{
 8002d26:	b480      	push	{r7}
 8002d28:	b089      	sub	sp, #36	; 0x24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	e853 3f00 	ldrex	r3, [r3]
 8002d38:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f043 0320 	orr.w	r3, r3, #32
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	61ba      	str	r2, [r7, #24]
 8002d48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4a:	6979      	ldr	r1, [r7, #20]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	e841 2300 	strex	r3, r2, [r1]
 8002d52:	613b      	str	r3, [r7, #16]
   return(result);
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1e9      	bne.n	8002d2e <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	3724      	adds	r7, #36	; 0x24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <LL_USART_EnableIT_TXE_TXFNF>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b089      	sub	sp, #36	; 0x24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	e853 3f00 	ldrex	r3, [r3]
 8002d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d82:	61fb      	str	r3, [r7, #28]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	61ba      	str	r2, [r7, #24]
 8002d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	6979      	ldr	r1, [r7, #20]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	e841 2300 	strex	r3, r2, [r1]
 8002d94:	613b      	str	r3, [r7, #16]
   return(result);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e9      	bne.n	8002d70 <LL_USART_EnableIT_TXE_TXFNF+0x8>
}
 8002d9c:	bf00      	nop
 8002d9e:	bf00      	nop
 8002da0:	3724      	adds	r7, #36	; 0x24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_USART_DisableIT_TXE_TXFNF>:
{
 8002daa:	b480      	push	{r7}
 8002dac:	b089      	sub	sp, #36	; 0x24
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	e853 3f00 	ldrex	r3, [r3]
 8002dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	61ba      	str	r2, [r7, #24]
 8002dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dce:	6979      	ldr	r1, [r7, #20]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	e841 2300 	strex	r3, r2, [r1]
 8002dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1e9      	bne.n	8002db2 <LL_USART_DisableIT_TXE_TXFNF+0x8>
}
 8002dde:	bf00      	nop
 8002de0:	bf00      	nop
 8002de2:	3724      	adds	r7, #36	; 0x24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	b2db      	uxtb	r3, r3
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <SCI_init>:


// Funkcija SCI_init() poskrbi za inicializacijo SCI "handle" strukture SCI
// in modificira dolžino medpomnilnika printf() funkcije.
void SCI_init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0

		// USART vmesnik specificiramo s pred-definiranim makrojem iz LL knjižnice, podobno kot
		// smo to storili za specifikacijo GPIO porta v prejšnjih vajah.

			// DOPOLNI done
	SCI.USARTx = USART3;
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <SCI_init+0x40>)
 8002e2a:	4a0f      	ldr	r2, [pc, #60]	; (8002e68 <SCI_init+0x44>)
 8002e2c:	601a      	str	r2, [r3, #0]
		// standardni izhod "stdout" s pomočjo printf() funkcije,
		// bomo nastavili na 0. Na ta način dosežemo najboljšo odzivnost
		// printf() funkcije, saj se tako ne čaka, da se medpomnilnik napolne,
		// preden se pošlje sporočilo. Sporočila bodo tako poslana takoj, ko se
		// prejme vsaj en znak.
		setvbuf(stdout, NULL, _IONBF, 0);
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <SCI_init+0x48>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6898      	ldr	r0, [r3, #8]
 8002e34:	2300      	movs	r3, #0
 8002e36:	2202      	movs	r2, #2
 8002e38:	2100      	movs	r1, #0
 8002e3a:	f000 fa87 	bl	800334c <setvbuf>

		// ----- Dodati je potrebno še dva koraka v inizializaciji:


			// 3. Inicializacija SCI medpomnilnikov  (RX and TX)
				BUF_init( &SCI_RX_buf_handle, SCI_RX_buffer, SCI_RX_BUF_LEN);	// RX SCI medpomnilnik
 8002e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e42:	490b      	ldr	r1, [pc, #44]	; (8002e70 <SCI_init+0x4c>)
 8002e44:	480b      	ldr	r0, [pc, #44]	; (8002e74 <SCI_init+0x50>)
 8002e46:	f000 f921 	bl	800308c <BUF_init>
				BUF_init( &SCI_TX_buf_handle, SCI_TX_buffer, SCI_TX_BUF_LEN);	// TX SCI medpomnilnik
 8002e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e4e:	490a      	ldr	r1, [pc, #40]	; (8002e78 <SCI_init+0x54>)
 8002e50:	480a      	ldr	r0, [pc, #40]	; (8002e7c <SCI_init+0x58>)
 8002e52:	f000 f91b 	bl	800308c <BUF_init>
				// prekinitve ob sprejemu novega podatka presko USART enote, s katero
				// implementiramo SCI vmesnik. Uporabimo seveda primerno LL funkcijo,
				// ki omogoči prekinitve ob postavitvi RXNE zastavice.

					// DOPOLNI
				LL_USART_EnableIT_RXNE_RXFNE(SCI.USARTx);
 8002e56:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <SCI_init+0x40>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff ff63 	bl	8002d26 <LL_USART_EnableIT_RXNE_RXFNE>
				// ko že imamo pripravljen sprejemni RX medpomnilnik, kamor se bodo ob
				// prekinitvah shranjevali novoprejeti podatki.



}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	200000dc 	.word	0x200000dc
 8002e68:	40004800 	.word	0x40004800
 8002e6c:	2000000c 	.word	0x2000000c
 8002e70:	200002e0 	.word	0x200002e0
 8002e74:	200004e0 	.word	0x200004e0
 8002e78:	200000e0 	.word	0x200000e0
 8002e7c:	200004f8 	.word	0x200004f8

08002e80 <SCI_send_byte>:

// Funkcija SCI_send_byte() pošlje en sam BAJT preko SCI vmesnika (uporabno, kadar pošiljamo binarne podatke).
// Ker SCI vmesnik implementiramo z USART vmesnikom, je potrebno pravzaprav bajt podatkov poslati z oddajnikom USART enote.
// Pri tem si pomagamo z LL funkcijo.
void SCI_send_byte(uint8_t data)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]
	// S čakanjem v zanki zagotovimo, da lahko USART oddajnik sprejme nov bajt v oddajni register.
	// Za ugotavljanje, ali je že mogoče pisati v oddajni register USART vmesnika, uporabimo ustrezno
	// nizko-nivojsko LL funkcijo za delo z USART-om.

		//	DOPOLNI done
	while(! LL_USART_IsActiveFlag_TXE_TXFNF(SCI.USARTx) );
 8002e8a:	bf00      	nop
 8002e8c:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <SCI_send_byte+0x34>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff35 	bl	8002d00 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f7      	beq.n	8002e8c <SCI_send_byte+0xc>

	// In nato z uporabo USART vmesnika pošljemo en bajt podatkov "data". Za pošiljane podatka preko USART vmesnika
	// prav tako uporabimo ustrezno nizko-nivojsko LL funkcijo.

		//	DOPOLNI done
	LL_USART_TransmitData8 (SCI.USARTx, data);
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <SCI_send_byte+0x34>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	79fa      	ldrb	r2, [r7, #7]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ffae 	bl	8002e06 <LL_USART_TransmitData8>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200000dc 	.word	0x200000dc

08002eb8 <SCI_send_bytes>:

// Funkcija SCI_send_bytes() pošlje zaporedje bajtov preko SCI vmesnika.
// Lokacija podatkov zapošiljanje je podana z vhodnim argumentom "*data",
// dolžina podatkov za pošiljanje pa je podano z vhodnim argumentom "size".
void SCI_send_bytes(uint8_t *data, uint32_t size)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
	for( int i = 0; i < size; i++ )
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	e009      	b.n	8002edc <SCI_send_bytes+0x24>
	{
		SCI_send_byte(data[i]);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ffd5 	bl	8002e80 <SCI_send_byte>
	for( int i = 0; i < size; i++ )
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d8f1      	bhi.n	8002ec8 <SCI_send_bytes+0x10>
	}
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <_write>:
// redefiniramo _write() funkcijo pravzaprav priredimo uporabo printf() funkcije
// tako, da pošilja sporočila na točno tak način, kakor to sami želimo.
// In mi želimo uporabljati funkcijo printf() tako, da bomo s pomočjo nje
// pošiljali formatirana sporočila preko SCI vmesnika.
int _write(int file, char *ptr, int len)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
	// Sedaj pa uporabimo našo SCI sistemsko funkcijo SCI_send_bytes()
	// da z njo pošljemo te podatke, na katere kaže "ptr".
	// Ker naša funkcija SCI_send_bytes() uporablja drugačen tip
	// vhodnih argumentov, je potrebno poskrbeti za eksplicitno
	// pretvorbo med tipi (angl. type-casting).
	SCI_send_bytes( (uint8_t*) ptr, (uint32_t) len );
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4619      	mov	r1, r3
 8002efe:	68b8      	ldr	r0, [r7, #8]
 8002f00:	f7ff ffda 	bl	8002eb8 <SCI_send_bytes>


	// Funkcija _write() mora vrniti število uspešno poslanih
	// znakov. Tu poenostavimo in privzamemo, da je bilo uspešno
	// poslanih vseh "len" znakov.
	return len;
 8002f04:	687b      	ldr	r3, [r7, #4]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <SCI_send_bytes_IT>:

// Funkcija SCI_send_bytes_IT() pošlje zaporedje bajtov preko SCI vmesnika s pomočjo prekinitev.
// Lokacija podatkov zapošiljanje je podana z vhodnim argumentom "*data",
// dolžina podatkov za pošiljanje pa je podano z vhodnim argumentom "size".
void SCI_send_bytes_IT(uint8_t *data, uint32_t size)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
	uint8_t	d;


	// Najprej je potrebno celotno zaporedje bajtov z naslova "data" shraniti v oddajni medpomnilnik.
	// To storimo s "for" zanko.
	for(uint32_t i=0; i < size ; i++ )
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	e00a      	b.n	8002f36 <SCI_send_bytes_IT+0x26>
	{
		BUF_store_byte( &SCI_TX_buf_handle, data[i] );
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4413      	add	r3, r2
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4815      	ldr	r0, [pc, #84]	; (8002f80 <SCI_send_bytes_IT+0x70>)
 8002f2c:	f000 f8d9 	bl	80030e2 <BUF_store_byte>
	for(uint32_t i=0; i < size ; i++ )
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3301      	adds	r3, #1
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d3f0      	bcc.n	8002f20 <SCI_send_bytes_IT+0x10>
	}


	// Če je potrebno poslati vsaj en znak,
	if ( size > 0 )
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d019      	beq.n	8002f78 <SCI_send_bytes_IT+0x68>
	{
		// najprej preverimo, če lahko prvi bajt za pošiljanje vpišemo
		// v oddajni podatkovni register TDR že kar takoj. Uporabimo
		// ustrezno LL funkcijo, ki nam vrne to informacijo.
		if ( LL_USART_IsActiveFlag_TXE_TXFNF(SCI.USARTx) )		// TX empty?
 8002f44:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <SCI_send_bytes_IT+0x74>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fed9 	bl	8002d00 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00c      	beq.n	8002f6e <SCI_send_bytes_IT+0x5e>
		{
			// Če oddajnik lahko sprejme nov bajt, potem ta prvi bajt
			// najprej preberemo iz oddajnega medpomnilnika v pomožno
			// spremenljivko "d".
			BUF_get_byte( &SCI_TX_buf_handle, &d  );
 8002f54:	f107 030b 	add.w	r3, r7, #11
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4809      	ldr	r0, [pc, #36]	; (8002f80 <SCI_send_bytes_IT+0x70>)
 8002f5c:	f000 f900 	bl	8003160 <BUF_get_byte>

			// in nato ta bajt s pomočjo LL funkcije takoj vpišemo
			// v oddajni podatkovni register.

				// DOPOLNI done
			LL_USART_TransmitData8 (SCI.USARTx, d);
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <SCI_send_bytes_IT+0x74>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	7afa      	ldrb	r2, [r7, #11]
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff4c 	bl	8002e06 <LL_USART_TransmitData8>
		// Da pa bo sploh prišlo do prekinitve, ko bo oddajni register spet prost,
		// je pa potrebno te prekinitve najprej omogočiti. To storimo z LL funkcijo
		// tu spodaj.

			// DOPOLNI done
		LL_USART_EnableIT_TXE_TXFNF (SCI.USARTx);
 8002f6e:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <SCI_send_bytes_IT+0x74>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fef8 	bl	8002d68 <LL_USART_EnableIT_TXE_TXFNF>
	}

}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	200004f8 	.word	0x200004f8
 8002f84:	200000dc 	.word	0x200000dc

08002f88 <SCI_receive_char_Callback>:
// ------- "callback" funkcije, ki implementirajo prekinitvene rutine ---------

// Funkcija SCI_receive_char_Callback() je "callback" funkcija, ki jo bomo poklicali
// ob prekinitvah, ko bo sprejet nov znak preko USARTa, s katerim implementiramo sistemski SCI vmesnik.
void SCI_receive_char_Callback(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
	// Nato pa ta podatek shranimo v sprejemni RX medpomnilnik SCI vmesnika za nadaljno obdelavo kasneje.
	BUF_store_byte( &SCI_TX_buf_handle, received_data );
	*/

	//v eni vrstici
	BUF_store_byte( &SCI_RX_buf_handle, LL_USART_ReceiveData8(SCI.USARTx) );
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <SCI_receive_char_Callback+0x1c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff2b 	bl	8002dec <LL_USART_ReceiveData8>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4803      	ldr	r0, [pc, #12]	; (8002fa8 <SCI_receive_char_Callback+0x20>)
 8002f9c:	f000 f8a1 	bl	80030e2 <BUF_store_byte>
}
 8002fa0:	bf00      	nop
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	200000dc 	.word	0x200000dc
 8002fa8:	200004e0 	.word	0x200004e0

08002fac <SCI_transmit_char_Callback>:


// Funkcija SCI_transmit_char_Callback() je "callback" funkcija, ki jo bomo poklicali
// ob prekinitvah, ko bo oddajni register USART vmesnika prost (tj. bo lahko sprejel nov podatek).
void SCI_transmit_char_Callback(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
	buf_rtrn_codes_t	return_code;			// sem shranimo rezultat poskusa branja iz medpomnilnika


	// Najprej poskusimo prebrati naslednji podatek, ki ga želimo poslati.
	// Zapomnimo si "vrnjeno kodo" (angl. return code), ki jo vrne BUF_ funkcija.
	return_code = BUF_get_byte( &SCI_TX_buf_handle, &data_to_transmit );
 8002fb2:	1dbb      	adds	r3, r7, #6
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	480f      	ldr	r0, [pc, #60]	; (8002ff4 <SCI_transmit_char_Callback+0x48>)
 8002fb8:	f000 f8d2 	bl	8003160 <BUF_get_byte>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	71fb      	strb	r3, [r7, #7]

	// S pomočjo "vrnjene kode" ugotovimo, če sedaj imamo na voljo naslednji podatek za pošiljanje.
	if ( return_code == BUFFER_OK )
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <SCI_transmit_char_Callback+0x28>
	{
		// In če je na voljo naslednji podatek, ga kar vpišemo v oddajni podatkovni register
		// USART vmesnika s pomočjo LL funkcije.

			// DOPOLNI done
		LL_USART_TransmitData8 (SCI.USARTx, data_to_transmit);
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <SCI_transmit_char_Callback+0x4c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	79ba      	ldrb	r2, [r7, #6]
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff ff19 	bl	8002e06 <LL_USART_TransmitData8>


	// Po vsakem podatku, ki ga pošljemo, je potrebno preveriti, če smo morda
	// poslali zadnji podatek. To je pomembno, saj moramo v tem primeru ustaviti
	// "avtomatsko" pošiljanje podatkov s pomočjo prekinitev.
	if ( BUF_get_data_size( &SCI_TX_buf_handle ) == 0)
 8002fd4:	4807      	ldr	r0, [pc, #28]	; (8002ff4 <SCI_transmit_char_Callback+0x48>)
 8002fd6:	f000 f921 	bl	800321c <BUF_get_data_size>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d104      	bne.n	8002fea <SCI_transmit_char_Callback+0x3e>
		// saj nimamo več kaj pošiljati. Tako onemogočimo avtomatsko
		// pošiljanje iz oddajnega TX medpomnilnika SCI vmesnika s pomočjo prekinitev.
		// Uporabimo ustrezno LL funkcijo za onemogočitev prekinitve.

			//	DOPOLNI done
		LL_USART_DisableIT_TXE_TXFNF (SCI.USARTx);
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <SCI_transmit_char_Callback+0x4c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fee0 	bl	8002daa <LL_USART_DisableIT_TXE_TXFNF>
	}

}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	200004f8 	.word	0x200004f8
 8002ff8:	200000dc 	.word	0x200000dc

08002ffc <SCI_demo_echo_with_interrupts>:
// za sprejemanje in pošiljanje podatkov. Ideja testne funkcije je popolnoma enaka kot v primeru "polling demo"
// funkcije SCI_demo_echo_with_polling(), le da tokrat za sprejem podatkov poskrbijo prekinitve v navezi s sprejemnim
// RX medpomnilnikom SCI vmesnika. Pošiljanje podatkov nazaj pa je seveda tudi izvedeno s pomočjo prekinitev s
// funkcijo SCI_send_bytes_IT(). tokrat izvedemo sprejem podatkov preko sprejemnega RX medpomnilnika
void SCI_demo_echo_with_interrupts(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8003002:	af00      	add	r7, sp, #0

	// spremenljivke, s pomočjo katerih bomo simulirali "zaposlenost procesorja" ("CPU busy")
	#define N_MAX_IT		500

	float a_0 = 0.5;
 8003004:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003008:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	float a_n;
	float sum = 0;
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	// V neskončni zanki
	while(1)
	{

		// preverjamo, koliko bajtov novo-sprejetih podatkov je na voljo v sprejemnem RX medpomnilniku SCI vmesnika.
		message_size = BUF_get_data_size( &SCI_RX_buf_handle);
 8003014:	481c      	ldr	r0, [pc, #112]	; (8003088 <SCI_demo_echo_with_interrupts+0x8c>)
 8003016:	f000 f901 	bl	800321c <BUF_get_data_size>
 800301a:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204

		// In če je na voljo vsaj en bajt podatkov,
		if ( message_size > 0 )
 800301e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00c      	beq.n	8003040 <SCI_demo_echo_with_interrupts+0x44>
		{
			// shranimo te novo-sprejete podatke v pomožno spremenljivko za sporočilo, ki ga bomo poslali nazaj.
			BUF_get_bytes( &SCI_RX_buf_handle, message, message_size );
 8003026:	1d3b      	adds	r3, r7, #4
 8003028:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 800302c:	4619      	mov	r1, r3
 800302e:	4816      	ldr	r0, [pc, #88]	; (8003088 <SCI_demo_echo_with_interrupts+0x8c>)
 8003030:	f000 f8c8 	bl	80031c4 <BUF_get_bytes>

			// In nato vsebino te pomožne spremenljivke pošljemo nazaj pošiljatelju z uporabo funkcije,
			// ki pošilja binarne podatke s pomočjo prekinitev.

				// DOPOLNI
			SCI_send_bytes_IT(message, message_size);
 8003034:	1d3b      	adds	r3, r7, #4
 8003036:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ff68 	bl	8002f10 <SCI_send_bytes_IT>
		// Večajte število členov N_MAX_IT in opazujte, če povečana zaposlenost procesorja
		// še vedno vpliva na sprejem podatkov preko serijskega vmesnika. Napake v sprejemu
		// podatkov seveda opazujete v "echo" odzivu na terminalu.


		a_n = a_0;
 8003040:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003044:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t n=0; n<N_MAX_IT; n++)
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800304e:	e014      	b.n	800307a <SCI_demo_echo_with_interrupts+0x7e>
		{
			 sum = sum + a_n;
 8003050:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 8003054:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 8003058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800305c:	edc7 7a84 	vstr	s15, [r7, #528]	; 0x210
			 a_n = a_n * a_0;
 8003060:	ed97 7a85 	vldr	s14, [r7, #532]	; 0x214
 8003064:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8003068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800306c:	edc7 7a85 	vstr	s15, [r7, #532]	; 0x214
		for(uint32_t n=0; n<N_MAX_IT; n++)
 8003070:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003074:	3301      	adds	r3, #1
 8003076:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800307a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800307e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003082:	d3e5      	bcc.n	8003050 <SCI_demo_echo_with_interrupts+0x54>
		message_size = BUF_get_data_size( &SCI_RX_buf_handle);
 8003084:	e7c6      	b.n	8003014 <SCI_demo_echo_with_interrupts+0x18>
 8003086:	bf00      	nop
 8003088:	200004e0 	.word	0x200004e0

0800308c <BUF_init>:


// -------------- Public function implementations --------------

void BUF_init(buf_handle_t *buf_handle, uint8_t *buffer_ptr, uint32_t buf_length)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
	// Initialize the buffer handle according to given parameters.
	buf_handle->buffer = buffer_ptr;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	601a      	str	r2, [r3, #0]
	buf_handle->length = buf_length;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	605a      	str	r2, [r3, #4]


	// And flush the buffer.
	BUF_flush(buf_handle);
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f804 	bl	80030b2 <BUF_flush>
}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <BUF_flush>:


buf_rtrn_codes_t BUF_flush(buf_handle_t *buf_handle)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
	buf_handle->front = 0;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	60da      	str	r2, [r3, #12]
	buf_handle->rear = 0;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]
	buf_handle->data_size = 0;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	611a      	str	r2, [r3, #16]
	buf_handle->free_size = buf_handle->length;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	615a      	str	r2, [r3, #20]

	return BUFFER_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <BUF_store_byte>:



// Store one byte of data.
buf_rtrn_codes_t BUF_store_byte(buf_handle_t *buf_handle, uint8_t data)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	460b      	mov	r3, r1
 80030ec:	70fb      	strb	r3, [r7, #3]
	// check if buffer already full
	if (buf_handle->data_size >= buf_handle->length)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691a      	ldr	r2, [r3, #16]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d301      	bcc.n	80030fe <BUF_store_byte+0x1c>
	{
		return BUFFER_FULL;	//-> if so, return error
 80030fa:	2301      	movs	r3, #1
 80030fc:	e02a      	b.n	8003154 <BUF_store_byte+0x72>
	}
	else // Ta else je fucking useless!!
	{
		// check special case: buffer empty
		if (buf_handle->data_size == 0)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <BUF_store_byte+0x32>
		{
			buf_handle->front = 0;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	60da      	str	r2, [r3, #12]
			buf_handle->rear = 0;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
 8003112:	e00d      	b.n	8003130 <BUF_store_byte+0x4e>
		}
		else
		{
			// increase rear pointer and apply modular arithmetics
			buf_handle->rear++;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	609a      	str	r2, [r3, #8]

			if (buf_handle->rear >= buf_handle->length)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <BUF_store_byte+0x4e>
			{
				buf_handle->rear = 0;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	609a      	str	r2, [r3, #8]
			}
		}


		// by now rear pointer is ready for new data -> store data
		buf_handle->buffer[buf_handle->rear] = data;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4413      	add	r3, r2
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	701a      	strb	r2, [r3, #0]

		// update data size and free size
		buf_handle->data_size++;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	611a      	str	r2, [r3, #16]
		buf_handle->free_size--;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	1e5a      	subs	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	615a      	str	r2, [r3, #20]

		return BUFFER_OK;
 8003152:	2300      	movs	r3, #0
	}

}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <BUF_get_byte>:



// Read one byte of data and store it to the given location.
buf_rtrn_codes_t BUF_get_byte(buf_handle_t *buf_handle, uint8_t *data)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
	// first check if buffer empty
	if (buf_handle->data_size == 0)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <BUF_get_byte+0x16>
	{
		return BUFFER_EMPTY;	// return error code and exit this function
 8003172:	2302      	movs	r3, #2
 8003174:	e020      	b.n	80031b8 <BUF_get_byte+0x58>
	}

	// else read and return data from the buffer "front"
	*data = buf_handle->buffer[buf_handle->front];	//Get data from the queue "front"
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	4413      	add	r3, r2
 8003180:	781a      	ldrb	r2, [r3, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	701a      	strb	r2, [r3, #0]

	// update data size and free size
	buf_handle->data_size--;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	1e5a      	subs	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	611a      	str	r2, [r3, #16]
	buf_handle->free_size++;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	615a      	str	r2, [r3, #20]


	// update the "front" value NOT using the modulo arithmetics but
	// using if-then instead because it is faster on uC
	buf_handle->front++;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	60da      	str	r2, [r3, #12]

	if (buf_handle->front >= buf_handle->length)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d302      	bcc.n	80031b6 <BUF_get_byte+0x56>
	{
		buf_handle->front = 0;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	60da      	str	r2, [r3, #12]
	}

	return BUFFER_OK;	// return BUFFER_OK error code
 80031b6:	2300      	movs	r3, #0

}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <BUF_get_bytes>:


// Read the specified number of bytes (size) from the buffer and store it to the &data location.
buf_rtrn_codes_t BUF_get_bytes(buf_handle_t *buf_handle, uint8_t *data,  uint32_t size)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
	uint32_t buf_data_size;
	buf_rtrn_codes_t	rtnr_code;

	// check if enough bytes available in the buffer
	buf_data_size = buf_handle->data_size;	// remember the initial buffer data size
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	61bb      	str	r3, [r7, #24]
	if (buf_data_size >= size)
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d319      	bcc.n	8003212 <BUF_get_bytes+0x4e>
	{
		// get all the data byte by byte and store in the &data location
		for(int i=0; i<buf_data_size; i++ )
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	e010      	b.n	8003206 <BUF_get_bytes+0x42>
		{
			// get one byte and remember the return code
			rtnr_code = BUF_get_byte( buf_handle, &data[i] );
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	4413      	add	r3, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f7ff ffb7 	bl	8003160 <BUF_get_byte>
 80031f2:	4603      	mov	r3, r0
 80031f4:	75fb      	strb	r3, [r7, #23]

			// if something went wrong reading this byte
			if ( rtnr_code != BUFFER_OK )
 80031f6:	7dfb      	ldrb	r3, [r7, #23]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <BUF_get_bytes+0x3c>
				 return rtnr_code;
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
 80031fe:	e009      	b.n	8003214 <BUF_get_bytes+0x50>
		for(int i=0; i<buf_data_size; i++ )
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	3301      	adds	r3, #1
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	429a      	cmp	r2, r3
 800320c:	d8ea      	bhi.n	80031e4 <BUF_get_bytes+0x20>
		}

		// if we are here, everything went OK
		return BUFFER_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	e000      	b.n	8003214 <BUF_get_bytes+0x50>

	}
	// if not enough bytes available, return error
	else
		return BUFFER_NOT_ENOUGH_DATA;
 8003212:	2304      	movs	r3, #4


}
 8003214:	4618      	mov	r0, r3
 8003216:	3720      	adds	r7, #32
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <BUF_get_data_size>:



// Get the number of bytes currently in the buffer queue.
uint32_t BUF_get_data_size(buf_handle_t *buf_handle)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
	return buf_handle->data_size;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <KBD_init>:

// Funkcija KBD_init() poskrbi, da se pravilno inicializira keyboard_handle_t strukturna spremenljivka.
// Poskrbi tudi za inicializacijo medpomnilnika tipkovnice.
//
void KBD_init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
		// To storite tako, da pravilno inicializirate "handle" strukture posameznih tipk.
		// Uporabite makroje "GPIOn" in "LL_GPIO_PIN_n" iz nizko-nivojske LL knjižnice.


		// buttons on port C
		keyboard.buttons[ BTN_ESC ].pin = LL_GPIO_PIN_14 ;
 800323a:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <KBD_init+0xa0>)
 800323c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003240:	605a      	str	r2, [r3, #4]
		keyboard.buttons[ BTN_ESC ].port = GPIOC;
 8003242:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <KBD_init+0xa0>)
 8003244:	4a24      	ldr	r2, [pc, #144]	; (80032d8 <KBD_init+0xa4>)
 8003246:	601a      	str	r2, [r3, #0]

		keyboard.buttons[ BTN_OK ].pin = LL_GPIO_PIN_15 ;
 8003248:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <KBD_init+0xa0>)
 800324a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800324e:	611a      	str	r2, [r3, #16]
		keyboard.buttons[ BTN_OK ].port = GPIOC;
 8003250:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <KBD_init+0xa0>)
 8003252:	4a21      	ldr	r2, [pc, #132]	; (80032d8 <KBD_init+0xa4>)
 8003254:	60da      	str	r2, [r3, #12]

			// DOPOLNI done


		// buttons on port G
		keyboard.buttons[ BTN_RIGHT ].pin = LL_GPIO_PIN_8 ;
 8003256:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <KBD_init+0xa0>)
 8003258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800325c:	61da      	str	r2, [r3, #28]
		keyboard.buttons[ BTN_RIGHT ].port = GPIOG;
 800325e:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <KBD_init+0xa0>)
 8003260:	4a1e      	ldr	r2, [pc, #120]	; (80032dc <KBD_init+0xa8>)
 8003262:	619a      	str	r2, [r3, #24]

		keyboard.buttons[ BTN_LEFT ].pin = LL_GPIO_PIN_6 ;
 8003264:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <KBD_init+0xa0>)
 8003266:	2240      	movs	r2, #64	; 0x40
 8003268:	629a      	str	r2, [r3, #40]	; 0x28
		keyboard.buttons[ BTN_LEFT ].port = GPIOG;
 800326a:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <KBD_init+0xa0>)
 800326c:	4a1b      	ldr	r2, [pc, #108]	; (80032dc <KBD_init+0xa8>)
 800326e:	625a      	str	r2, [r3, #36]	; 0x24

		keyboard.buttons[ BTN_DOWN ].pin = LL_GPIO_PIN_1 ;
 8003270:	4b18      	ldr	r3, [pc, #96]	; (80032d4 <KBD_init+0xa0>)
 8003272:	2202      	movs	r2, #2
 8003274:	635a      	str	r2, [r3, #52]	; 0x34
		keyboard.buttons[ BTN_DOWN ].port = GPIOG;
 8003276:	4b17      	ldr	r3, [pc, #92]	; (80032d4 <KBD_init+0xa0>)
 8003278:	4a18      	ldr	r2, [pc, #96]	; (80032dc <KBD_init+0xa8>)
 800327a:	631a      	str	r2, [r3, #48]	; 0x30

		keyboard.buttons[ BTN_UP ].pin = LL_GPIO_PIN_0 ;
 800327c:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <KBD_init+0xa0>)
 800327e:	2201      	movs	r2, #1
 8003280:	641a      	str	r2, [r3, #64]	; 0x40
		keyboard.buttons[ BTN_UP ].port = GPIOG;
 8003282:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <KBD_init+0xa0>)
 8003284:	4a15      	ldr	r2, [pc, #84]	; (80032dc <KBD_init+0xa8>)
 8003286:	63da      	str	r2, [r3, #60]	; 0x3c

	// 2. Inicializirajte začetne vrednosti "handle" strukture za posamezne tipke v tipkovnici na sistemskem nivoju


		// Sprehodimo se preko vseh "handle" struktur za delo s posameznimi tipkami.
		for(int i=0; i < NUM_OF_BTN; i++)
 8003288:	2300      	movs	r3, #0
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	e016      	b.n	80032bc <KBD_init+0x88>
			// Ne pozabite, da v "handle" strukturah za posamezne tipke hranimo tudi vrednost prejšnjega
			// in trenutnega stanja tipk! In te vrednosti je potrebno na začetku nastaviti.
			// Smiselno jih je nastaviti na tako vrednost, kot da so tipke na začetku v sproščenem,
			// nestisnjenem stanju. In tu si lahko pomagate s pomožnim naštevnim tipom button_sig_value_t.

			keyboard.buttons[i].state_old = BTN_SIG_VALUE_RELEASED;
 800328e:	4911      	ldr	r1, [pc, #68]	; (80032d4 <KBD_init+0xa0>)
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	3308      	adds	r3, #8
 800329e:	2201      	movs	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]
			keyboard.buttons[i].state_new = BTN_SIG_VALUE_RELEASED;
 80032a2:	490c      	ldr	r1, [pc, #48]	; (80032d4 <KBD_init+0xa0>)
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	3309      	adds	r3, #9
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
		for(int i=0; i < NUM_OF_BTN; i++)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3301      	adds	r3, #1
 80032ba:	607b      	str	r3, [r7, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b05      	cmp	r3, #5
 80032c0:	dde5      	ble.n	800328e <KBD_init+0x5a>

	// 3. Inicializiramo še medpomnilnik tipkovnice.

		// Uporabimo funkcijo BUF_init(), ki določi, katera tabela se bo uporabljala kot
		// ciklični medpomnilnik ter kako dolg bo ta medpomnilnik.
		BUF_init( &kbd_buf_handle, kbd_buffer, KBD_BUF_LEN);
 80032c2:	2220      	movs	r2, #32
 80032c4:	4906      	ldr	r1, [pc, #24]	; (80032e0 <KBD_init+0xac>)
 80032c6:	4807      	ldr	r0, [pc, #28]	; (80032e4 <KBD_init+0xb0>)
 80032c8:	f7ff fee0 	bl	800308c <BUF_init>

}
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000510 	.word	0x20000510
 80032d8:	48000800 	.word	0x48000800
 80032dc:	48001800 	.word	0x48001800
 80032e0:	20000570 	.word	0x20000570
 80032e4:	20000558 	.word	0x20000558

080032e8 <__errno>:
 80032e8:	4b01      	ldr	r3, [pc, #4]	; (80032f0 <__errno+0x8>)
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	2000000c 	.word	0x2000000c

080032f4 <__libc_init_array>:
 80032f4:	b570      	push	{r4, r5, r6, lr}
 80032f6:	4d0d      	ldr	r5, [pc, #52]	; (800332c <__libc_init_array+0x38>)
 80032f8:	4c0d      	ldr	r4, [pc, #52]	; (8003330 <__libc_init_array+0x3c>)
 80032fa:	1b64      	subs	r4, r4, r5
 80032fc:	10a4      	asrs	r4, r4, #2
 80032fe:	2600      	movs	r6, #0
 8003300:	42a6      	cmp	r6, r4
 8003302:	d109      	bne.n	8003318 <__libc_init_array+0x24>
 8003304:	4d0b      	ldr	r5, [pc, #44]	; (8003334 <__libc_init_array+0x40>)
 8003306:	4c0c      	ldr	r4, [pc, #48]	; (8003338 <__libc_init_array+0x44>)
 8003308:	f000 fc2e 	bl	8003b68 <_init>
 800330c:	1b64      	subs	r4, r4, r5
 800330e:	10a4      	asrs	r4, r4, #2
 8003310:	2600      	movs	r6, #0
 8003312:	42a6      	cmp	r6, r4
 8003314:	d105      	bne.n	8003322 <__libc_init_array+0x2e>
 8003316:	bd70      	pop	{r4, r5, r6, pc}
 8003318:	f855 3b04 	ldr.w	r3, [r5], #4
 800331c:	4798      	blx	r3
 800331e:	3601      	adds	r6, #1
 8003320:	e7ee      	b.n	8003300 <__libc_init_array+0xc>
 8003322:	f855 3b04 	ldr.w	r3, [r5], #4
 8003326:	4798      	blx	r3
 8003328:	3601      	adds	r6, #1
 800332a:	e7f2      	b.n	8003312 <__libc_init_array+0x1e>
 800332c:	08003c2c 	.word	0x08003c2c
 8003330:	08003c2c 	.word	0x08003c2c
 8003334:	08003c2c 	.word	0x08003c2c
 8003338:	08003c30 	.word	0x08003c30

0800333c <memset>:
 800333c:	4402      	add	r2, r0
 800333e:	4603      	mov	r3, r0
 8003340:	4293      	cmp	r3, r2
 8003342:	d100      	bne.n	8003346 <memset+0xa>
 8003344:	4770      	bx	lr
 8003346:	f803 1b01 	strb.w	r1, [r3], #1
 800334a:	e7f9      	b.n	8003340 <memset+0x4>

0800334c <setvbuf>:
 800334c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003350:	461d      	mov	r5, r3
 8003352:	4b5d      	ldr	r3, [pc, #372]	; (80034c8 <setvbuf+0x17c>)
 8003354:	681f      	ldr	r7, [r3, #0]
 8003356:	4604      	mov	r4, r0
 8003358:	460e      	mov	r6, r1
 800335a:	4690      	mov	r8, r2
 800335c:	b127      	cbz	r7, 8003368 <setvbuf+0x1c>
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	b913      	cbnz	r3, 8003368 <setvbuf+0x1c>
 8003362:	4638      	mov	r0, r7
 8003364:	f000 f9d2 	bl	800370c <__sinit>
 8003368:	4b58      	ldr	r3, [pc, #352]	; (80034cc <setvbuf+0x180>)
 800336a:	429c      	cmp	r4, r3
 800336c:	d167      	bne.n	800343e <setvbuf+0xf2>
 800336e:	687c      	ldr	r4, [r7, #4]
 8003370:	f1b8 0f02 	cmp.w	r8, #2
 8003374:	d006      	beq.n	8003384 <setvbuf+0x38>
 8003376:	f1b8 0f01 	cmp.w	r8, #1
 800337a:	f200 809f 	bhi.w	80034bc <setvbuf+0x170>
 800337e:	2d00      	cmp	r5, #0
 8003380:	f2c0 809c 	blt.w	80034bc <setvbuf+0x170>
 8003384:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003386:	07db      	lsls	r3, r3, #31
 8003388:	d405      	bmi.n	8003396 <setvbuf+0x4a>
 800338a:	89a3      	ldrh	r3, [r4, #12]
 800338c:	0598      	lsls	r0, r3, #22
 800338e:	d402      	bmi.n	8003396 <setvbuf+0x4a>
 8003390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003392:	f000 fa59 	bl	8003848 <__retarget_lock_acquire_recursive>
 8003396:	4621      	mov	r1, r4
 8003398:	4638      	mov	r0, r7
 800339a:	f000 f923 	bl	80035e4 <_fflush_r>
 800339e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033a0:	b141      	cbz	r1, 80033b4 <setvbuf+0x68>
 80033a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033a6:	4299      	cmp	r1, r3
 80033a8:	d002      	beq.n	80033b0 <setvbuf+0x64>
 80033aa:	4638      	mov	r0, r7
 80033ac:	f000 fa7a 	bl	80038a4 <_free_r>
 80033b0:	2300      	movs	r3, #0
 80033b2:	6363      	str	r3, [r4, #52]	; 0x34
 80033b4:	2300      	movs	r3, #0
 80033b6:	61a3      	str	r3, [r4, #24]
 80033b8:	6063      	str	r3, [r4, #4]
 80033ba:	89a3      	ldrh	r3, [r4, #12]
 80033bc:	0619      	lsls	r1, r3, #24
 80033be:	d503      	bpl.n	80033c8 <setvbuf+0x7c>
 80033c0:	6921      	ldr	r1, [r4, #16]
 80033c2:	4638      	mov	r0, r7
 80033c4:	f000 fa6e 	bl	80038a4 <_free_r>
 80033c8:	89a3      	ldrh	r3, [r4, #12]
 80033ca:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80033ce:	f023 0303 	bic.w	r3, r3, #3
 80033d2:	f1b8 0f02 	cmp.w	r8, #2
 80033d6:	81a3      	strh	r3, [r4, #12]
 80033d8:	d06c      	beq.n	80034b4 <setvbuf+0x168>
 80033da:	ab01      	add	r3, sp, #4
 80033dc:	466a      	mov	r2, sp
 80033de:	4621      	mov	r1, r4
 80033e0:	4638      	mov	r0, r7
 80033e2:	f000 fa33 	bl	800384c <__swhatbuf_r>
 80033e6:	89a3      	ldrh	r3, [r4, #12]
 80033e8:	4318      	orrs	r0, r3
 80033ea:	81a0      	strh	r0, [r4, #12]
 80033ec:	2d00      	cmp	r5, #0
 80033ee:	d130      	bne.n	8003452 <setvbuf+0x106>
 80033f0:	9d00      	ldr	r5, [sp, #0]
 80033f2:	4628      	mov	r0, r5
 80033f4:	f000 fa4e 	bl	8003894 <malloc>
 80033f8:	4606      	mov	r6, r0
 80033fa:	2800      	cmp	r0, #0
 80033fc:	d155      	bne.n	80034aa <setvbuf+0x15e>
 80033fe:	f8dd 9000 	ldr.w	r9, [sp]
 8003402:	45a9      	cmp	r9, r5
 8003404:	d14a      	bne.n	800349c <setvbuf+0x150>
 8003406:	f04f 35ff 	mov.w	r5, #4294967295
 800340a:	2200      	movs	r2, #0
 800340c:	60a2      	str	r2, [r4, #8]
 800340e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003412:	6022      	str	r2, [r4, #0]
 8003414:	6122      	str	r2, [r4, #16]
 8003416:	2201      	movs	r2, #1
 8003418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800341c:	6162      	str	r2, [r4, #20]
 800341e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003420:	f043 0302 	orr.w	r3, r3, #2
 8003424:	07d2      	lsls	r2, r2, #31
 8003426:	81a3      	strh	r3, [r4, #12]
 8003428:	d405      	bmi.n	8003436 <setvbuf+0xea>
 800342a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800342e:	d102      	bne.n	8003436 <setvbuf+0xea>
 8003430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003432:	f000 fa0a 	bl	800384a <__retarget_lock_release_recursive>
 8003436:	4628      	mov	r0, r5
 8003438:	b003      	add	sp, #12
 800343a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800343e:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <setvbuf+0x184>)
 8003440:	429c      	cmp	r4, r3
 8003442:	d101      	bne.n	8003448 <setvbuf+0xfc>
 8003444:	68bc      	ldr	r4, [r7, #8]
 8003446:	e793      	b.n	8003370 <setvbuf+0x24>
 8003448:	4b22      	ldr	r3, [pc, #136]	; (80034d4 <setvbuf+0x188>)
 800344a:	429c      	cmp	r4, r3
 800344c:	bf08      	it	eq
 800344e:	68fc      	ldreq	r4, [r7, #12]
 8003450:	e78e      	b.n	8003370 <setvbuf+0x24>
 8003452:	2e00      	cmp	r6, #0
 8003454:	d0cd      	beq.n	80033f2 <setvbuf+0xa6>
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	b913      	cbnz	r3, 8003460 <setvbuf+0x114>
 800345a:	4638      	mov	r0, r7
 800345c:	f000 f956 	bl	800370c <__sinit>
 8003460:	f1b8 0f01 	cmp.w	r8, #1
 8003464:	bf08      	it	eq
 8003466:	89a3      	ldrheq	r3, [r4, #12]
 8003468:	6026      	str	r6, [r4, #0]
 800346a:	bf04      	itt	eq
 800346c:	f043 0301 	orreq.w	r3, r3, #1
 8003470:	81a3      	strheq	r3, [r4, #12]
 8003472:	89a2      	ldrh	r2, [r4, #12]
 8003474:	f012 0308 	ands.w	r3, r2, #8
 8003478:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800347c:	d01c      	beq.n	80034b8 <setvbuf+0x16c>
 800347e:	07d3      	lsls	r3, r2, #31
 8003480:	bf41      	itttt	mi
 8003482:	2300      	movmi	r3, #0
 8003484:	426d      	negmi	r5, r5
 8003486:	60a3      	strmi	r3, [r4, #8]
 8003488:	61a5      	strmi	r5, [r4, #24]
 800348a:	bf58      	it	pl
 800348c:	60a5      	strpl	r5, [r4, #8]
 800348e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003490:	f015 0501 	ands.w	r5, r5, #1
 8003494:	d115      	bne.n	80034c2 <setvbuf+0x176>
 8003496:	f412 7f00 	tst.w	r2, #512	; 0x200
 800349a:	e7c8      	b.n	800342e <setvbuf+0xe2>
 800349c:	4648      	mov	r0, r9
 800349e:	f000 f9f9 	bl	8003894 <malloc>
 80034a2:	4606      	mov	r6, r0
 80034a4:	2800      	cmp	r0, #0
 80034a6:	d0ae      	beq.n	8003406 <setvbuf+0xba>
 80034a8:	464d      	mov	r5, r9
 80034aa:	89a3      	ldrh	r3, [r4, #12]
 80034ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b0:	81a3      	strh	r3, [r4, #12]
 80034b2:	e7d0      	b.n	8003456 <setvbuf+0x10a>
 80034b4:	2500      	movs	r5, #0
 80034b6:	e7a8      	b.n	800340a <setvbuf+0xbe>
 80034b8:	60a3      	str	r3, [r4, #8]
 80034ba:	e7e8      	b.n	800348e <setvbuf+0x142>
 80034bc:	f04f 35ff 	mov.w	r5, #4294967295
 80034c0:	e7b9      	b.n	8003436 <setvbuf+0xea>
 80034c2:	2500      	movs	r5, #0
 80034c4:	e7b7      	b.n	8003436 <setvbuf+0xea>
 80034c6:	bf00      	nop
 80034c8:	2000000c 	.word	0x2000000c
 80034cc:	08003bec 	.word	0x08003bec
 80034d0:	08003c0c 	.word	0x08003c0c
 80034d4:	08003bcc 	.word	0x08003bcc

080034d8 <__sflush_r>:
 80034d8:	898a      	ldrh	r2, [r1, #12]
 80034da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034de:	4605      	mov	r5, r0
 80034e0:	0710      	lsls	r0, r2, #28
 80034e2:	460c      	mov	r4, r1
 80034e4:	d458      	bmi.n	8003598 <__sflush_r+0xc0>
 80034e6:	684b      	ldr	r3, [r1, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	dc05      	bgt.n	80034f8 <__sflush_r+0x20>
 80034ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	dc02      	bgt.n	80034f8 <__sflush_r+0x20>
 80034f2:	2000      	movs	r0, #0
 80034f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034fa:	2e00      	cmp	r6, #0
 80034fc:	d0f9      	beq.n	80034f2 <__sflush_r+0x1a>
 80034fe:	2300      	movs	r3, #0
 8003500:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003504:	682f      	ldr	r7, [r5, #0]
 8003506:	602b      	str	r3, [r5, #0]
 8003508:	d032      	beq.n	8003570 <__sflush_r+0x98>
 800350a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800350c:	89a3      	ldrh	r3, [r4, #12]
 800350e:	075a      	lsls	r2, r3, #29
 8003510:	d505      	bpl.n	800351e <__sflush_r+0x46>
 8003512:	6863      	ldr	r3, [r4, #4]
 8003514:	1ac0      	subs	r0, r0, r3
 8003516:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003518:	b10b      	cbz	r3, 800351e <__sflush_r+0x46>
 800351a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800351c:	1ac0      	subs	r0, r0, r3
 800351e:	2300      	movs	r3, #0
 8003520:	4602      	mov	r2, r0
 8003522:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003524:	6a21      	ldr	r1, [r4, #32]
 8003526:	4628      	mov	r0, r5
 8003528:	47b0      	blx	r6
 800352a:	1c43      	adds	r3, r0, #1
 800352c:	89a3      	ldrh	r3, [r4, #12]
 800352e:	d106      	bne.n	800353e <__sflush_r+0x66>
 8003530:	6829      	ldr	r1, [r5, #0]
 8003532:	291d      	cmp	r1, #29
 8003534:	d82c      	bhi.n	8003590 <__sflush_r+0xb8>
 8003536:	4a2a      	ldr	r2, [pc, #168]	; (80035e0 <__sflush_r+0x108>)
 8003538:	40ca      	lsrs	r2, r1
 800353a:	07d6      	lsls	r6, r2, #31
 800353c:	d528      	bpl.n	8003590 <__sflush_r+0xb8>
 800353e:	2200      	movs	r2, #0
 8003540:	6062      	str	r2, [r4, #4]
 8003542:	04d9      	lsls	r1, r3, #19
 8003544:	6922      	ldr	r2, [r4, #16]
 8003546:	6022      	str	r2, [r4, #0]
 8003548:	d504      	bpl.n	8003554 <__sflush_r+0x7c>
 800354a:	1c42      	adds	r2, r0, #1
 800354c:	d101      	bne.n	8003552 <__sflush_r+0x7a>
 800354e:	682b      	ldr	r3, [r5, #0]
 8003550:	b903      	cbnz	r3, 8003554 <__sflush_r+0x7c>
 8003552:	6560      	str	r0, [r4, #84]	; 0x54
 8003554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003556:	602f      	str	r7, [r5, #0]
 8003558:	2900      	cmp	r1, #0
 800355a:	d0ca      	beq.n	80034f2 <__sflush_r+0x1a>
 800355c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003560:	4299      	cmp	r1, r3
 8003562:	d002      	beq.n	800356a <__sflush_r+0x92>
 8003564:	4628      	mov	r0, r5
 8003566:	f000 f99d 	bl	80038a4 <_free_r>
 800356a:	2000      	movs	r0, #0
 800356c:	6360      	str	r0, [r4, #52]	; 0x34
 800356e:	e7c1      	b.n	80034f4 <__sflush_r+0x1c>
 8003570:	6a21      	ldr	r1, [r4, #32]
 8003572:	2301      	movs	r3, #1
 8003574:	4628      	mov	r0, r5
 8003576:	47b0      	blx	r6
 8003578:	1c41      	adds	r1, r0, #1
 800357a:	d1c7      	bne.n	800350c <__sflush_r+0x34>
 800357c:	682b      	ldr	r3, [r5, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0c4      	beq.n	800350c <__sflush_r+0x34>
 8003582:	2b1d      	cmp	r3, #29
 8003584:	d001      	beq.n	800358a <__sflush_r+0xb2>
 8003586:	2b16      	cmp	r3, #22
 8003588:	d101      	bne.n	800358e <__sflush_r+0xb6>
 800358a:	602f      	str	r7, [r5, #0]
 800358c:	e7b1      	b.n	80034f2 <__sflush_r+0x1a>
 800358e:	89a3      	ldrh	r3, [r4, #12]
 8003590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003594:	81a3      	strh	r3, [r4, #12]
 8003596:	e7ad      	b.n	80034f4 <__sflush_r+0x1c>
 8003598:	690f      	ldr	r7, [r1, #16]
 800359a:	2f00      	cmp	r7, #0
 800359c:	d0a9      	beq.n	80034f2 <__sflush_r+0x1a>
 800359e:	0793      	lsls	r3, r2, #30
 80035a0:	680e      	ldr	r6, [r1, #0]
 80035a2:	bf08      	it	eq
 80035a4:	694b      	ldreq	r3, [r1, #20]
 80035a6:	600f      	str	r7, [r1, #0]
 80035a8:	bf18      	it	ne
 80035aa:	2300      	movne	r3, #0
 80035ac:	eba6 0807 	sub.w	r8, r6, r7
 80035b0:	608b      	str	r3, [r1, #8]
 80035b2:	f1b8 0f00 	cmp.w	r8, #0
 80035b6:	dd9c      	ble.n	80034f2 <__sflush_r+0x1a>
 80035b8:	6a21      	ldr	r1, [r4, #32]
 80035ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80035bc:	4643      	mov	r3, r8
 80035be:	463a      	mov	r2, r7
 80035c0:	4628      	mov	r0, r5
 80035c2:	47b0      	blx	r6
 80035c4:	2800      	cmp	r0, #0
 80035c6:	dc06      	bgt.n	80035d6 <__sflush_r+0xfe>
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ce:	81a3      	strh	r3, [r4, #12]
 80035d0:	f04f 30ff 	mov.w	r0, #4294967295
 80035d4:	e78e      	b.n	80034f4 <__sflush_r+0x1c>
 80035d6:	4407      	add	r7, r0
 80035d8:	eba8 0800 	sub.w	r8, r8, r0
 80035dc:	e7e9      	b.n	80035b2 <__sflush_r+0xda>
 80035de:	bf00      	nop
 80035e0:	20400001 	.word	0x20400001

080035e4 <_fflush_r>:
 80035e4:	b538      	push	{r3, r4, r5, lr}
 80035e6:	690b      	ldr	r3, [r1, #16]
 80035e8:	4605      	mov	r5, r0
 80035ea:	460c      	mov	r4, r1
 80035ec:	b913      	cbnz	r3, 80035f4 <_fflush_r+0x10>
 80035ee:	2500      	movs	r5, #0
 80035f0:	4628      	mov	r0, r5
 80035f2:	bd38      	pop	{r3, r4, r5, pc}
 80035f4:	b118      	cbz	r0, 80035fe <_fflush_r+0x1a>
 80035f6:	6983      	ldr	r3, [r0, #24]
 80035f8:	b90b      	cbnz	r3, 80035fe <_fflush_r+0x1a>
 80035fa:	f000 f887 	bl	800370c <__sinit>
 80035fe:	4b14      	ldr	r3, [pc, #80]	; (8003650 <_fflush_r+0x6c>)
 8003600:	429c      	cmp	r4, r3
 8003602:	d11b      	bne.n	800363c <_fflush_r+0x58>
 8003604:	686c      	ldr	r4, [r5, #4]
 8003606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0ef      	beq.n	80035ee <_fflush_r+0xa>
 800360e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003610:	07d0      	lsls	r0, r2, #31
 8003612:	d404      	bmi.n	800361e <_fflush_r+0x3a>
 8003614:	0599      	lsls	r1, r3, #22
 8003616:	d402      	bmi.n	800361e <_fflush_r+0x3a>
 8003618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800361a:	f000 f915 	bl	8003848 <__retarget_lock_acquire_recursive>
 800361e:	4628      	mov	r0, r5
 8003620:	4621      	mov	r1, r4
 8003622:	f7ff ff59 	bl	80034d8 <__sflush_r>
 8003626:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003628:	07da      	lsls	r2, r3, #31
 800362a:	4605      	mov	r5, r0
 800362c:	d4e0      	bmi.n	80035f0 <_fflush_r+0xc>
 800362e:	89a3      	ldrh	r3, [r4, #12]
 8003630:	059b      	lsls	r3, r3, #22
 8003632:	d4dd      	bmi.n	80035f0 <_fflush_r+0xc>
 8003634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003636:	f000 f908 	bl	800384a <__retarget_lock_release_recursive>
 800363a:	e7d9      	b.n	80035f0 <_fflush_r+0xc>
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <_fflush_r+0x70>)
 800363e:	429c      	cmp	r4, r3
 8003640:	d101      	bne.n	8003646 <_fflush_r+0x62>
 8003642:	68ac      	ldr	r4, [r5, #8]
 8003644:	e7df      	b.n	8003606 <_fflush_r+0x22>
 8003646:	4b04      	ldr	r3, [pc, #16]	; (8003658 <_fflush_r+0x74>)
 8003648:	429c      	cmp	r4, r3
 800364a:	bf08      	it	eq
 800364c:	68ec      	ldreq	r4, [r5, #12]
 800364e:	e7da      	b.n	8003606 <_fflush_r+0x22>
 8003650:	08003bec 	.word	0x08003bec
 8003654:	08003c0c 	.word	0x08003c0c
 8003658:	08003bcc 	.word	0x08003bcc

0800365c <std>:
 800365c:	2300      	movs	r3, #0
 800365e:	b510      	push	{r4, lr}
 8003660:	4604      	mov	r4, r0
 8003662:	e9c0 3300 	strd	r3, r3, [r0]
 8003666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800366a:	6083      	str	r3, [r0, #8]
 800366c:	8181      	strh	r1, [r0, #12]
 800366e:	6643      	str	r3, [r0, #100]	; 0x64
 8003670:	81c2      	strh	r2, [r0, #14]
 8003672:	6183      	str	r3, [r0, #24]
 8003674:	4619      	mov	r1, r3
 8003676:	2208      	movs	r2, #8
 8003678:	305c      	adds	r0, #92	; 0x5c
 800367a:	f7ff fe5f 	bl	800333c <memset>
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <std+0x38>)
 8003680:	6263      	str	r3, [r4, #36]	; 0x24
 8003682:	4b05      	ldr	r3, [pc, #20]	; (8003698 <std+0x3c>)
 8003684:	62a3      	str	r3, [r4, #40]	; 0x28
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <std+0x40>)
 8003688:	62e3      	str	r3, [r4, #44]	; 0x2c
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <std+0x44>)
 800368c:	6224      	str	r4, [r4, #32]
 800368e:	6323      	str	r3, [r4, #48]	; 0x30
 8003690:	bd10      	pop	{r4, pc}
 8003692:	bf00      	nop
 8003694:	08003a19 	.word	0x08003a19
 8003698:	08003a3b 	.word	0x08003a3b
 800369c:	08003a73 	.word	0x08003a73
 80036a0:	08003a97 	.word	0x08003a97

080036a4 <_cleanup_r>:
 80036a4:	4901      	ldr	r1, [pc, #4]	; (80036ac <_cleanup_r+0x8>)
 80036a6:	f000 b8af 	b.w	8003808 <_fwalk_reent>
 80036aa:	bf00      	nop
 80036ac:	080035e5 	.word	0x080035e5

080036b0 <__sfmoreglue>:
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	1e4a      	subs	r2, r1, #1
 80036b4:	2568      	movs	r5, #104	; 0x68
 80036b6:	4355      	muls	r5, r2
 80036b8:	460e      	mov	r6, r1
 80036ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80036be:	f000 f941 	bl	8003944 <_malloc_r>
 80036c2:	4604      	mov	r4, r0
 80036c4:	b140      	cbz	r0, 80036d8 <__sfmoreglue+0x28>
 80036c6:	2100      	movs	r1, #0
 80036c8:	e9c0 1600 	strd	r1, r6, [r0]
 80036cc:	300c      	adds	r0, #12
 80036ce:	60a0      	str	r0, [r4, #8]
 80036d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80036d4:	f7ff fe32 	bl	800333c <memset>
 80036d8:	4620      	mov	r0, r4
 80036da:	bd70      	pop	{r4, r5, r6, pc}

080036dc <__sfp_lock_acquire>:
 80036dc:	4801      	ldr	r0, [pc, #4]	; (80036e4 <__sfp_lock_acquire+0x8>)
 80036de:	f000 b8b3 	b.w	8003848 <__retarget_lock_acquire_recursive>
 80036e2:	bf00      	nop
 80036e4:	20000598 	.word	0x20000598

080036e8 <__sfp_lock_release>:
 80036e8:	4801      	ldr	r0, [pc, #4]	; (80036f0 <__sfp_lock_release+0x8>)
 80036ea:	f000 b8ae 	b.w	800384a <__retarget_lock_release_recursive>
 80036ee:	bf00      	nop
 80036f0:	20000598 	.word	0x20000598

080036f4 <__sinit_lock_acquire>:
 80036f4:	4801      	ldr	r0, [pc, #4]	; (80036fc <__sinit_lock_acquire+0x8>)
 80036f6:	f000 b8a7 	b.w	8003848 <__retarget_lock_acquire_recursive>
 80036fa:	bf00      	nop
 80036fc:	20000593 	.word	0x20000593

08003700 <__sinit_lock_release>:
 8003700:	4801      	ldr	r0, [pc, #4]	; (8003708 <__sinit_lock_release+0x8>)
 8003702:	f000 b8a2 	b.w	800384a <__retarget_lock_release_recursive>
 8003706:	bf00      	nop
 8003708:	20000593 	.word	0x20000593

0800370c <__sinit>:
 800370c:	b510      	push	{r4, lr}
 800370e:	4604      	mov	r4, r0
 8003710:	f7ff fff0 	bl	80036f4 <__sinit_lock_acquire>
 8003714:	69a3      	ldr	r3, [r4, #24]
 8003716:	b11b      	cbz	r3, 8003720 <__sinit+0x14>
 8003718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800371c:	f7ff bff0 	b.w	8003700 <__sinit_lock_release>
 8003720:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003724:	6523      	str	r3, [r4, #80]	; 0x50
 8003726:	4b13      	ldr	r3, [pc, #76]	; (8003774 <__sinit+0x68>)
 8003728:	4a13      	ldr	r2, [pc, #76]	; (8003778 <__sinit+0x6c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	62a2      	str	r2, [r4, #40]	; 0x28
 800372e:	42a3      	cmp	r3, r4
 8003730:	bf04      	itt	eq
 8003732:	2301      	moveq	r3, #1
 8003734:	61a3      	streq	r3, [r4, #24]
 8003736:	4620      	mov	r0, r4
 8003738:	f000 f820 	bl	800377c <__sfp>
 800373c:	6060      	str	r0, [r4, #4]
 800373e:	4620      	mov	r0, r4
 8003740:	f000 f81c 	bl	800377c <__sfp>
 8003744:	60a0      	str	r0, [r4, #8]
 8003746:	4620      	mov	r0, r4
 8003748:	f000 f818 	bl	800377c <__sfp>
 800374c:	2200      	movs	r2, #0
 800374e:	60e0      	str	r0, [r4, #12]
 8003750:	2104      	movs	r1, #4
 8003752:	6860      	ldr	r0, [r4, #4]
 8003754:	f7ff ff82 	bl	800365c <std>
 8003758:	68a0      	ldr	r0, [r4, #8]
 800375a:	2201      	movs	r2, #1
 800375c:	2109      	movs	r1, #9
 800375e:	f7ff ff7d 	bl	800365c <std>
 8003762:	68e0      	ldr	r0, [r4, #12]
 8003764:	2202      	movs	r2, #2
 8003766:	2112      	movs	r1, #18
 8003768:	f7ff ff78 	bl	800365c <std>
 800376c:	2301      	movs	r3, #1
 800376e:	61a3      	str	r3, [r4, #24]
 8003770:	e7d2      	b.n	8003718 <__sinit+0xc>
 8003772:	bf00      	nop
 8003774:	08003bc8 	.word	0x08003bc8
 8003778:	080036a5 	.word	0x080036a5

0800377c <__sfp>:
 800377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377e:	4607      	mov	r7, r0
 8003780:	f7ff ffac 	bl	80036dc <__sfp_lock_acquire>
 8003784:	4b1e      	ldr	r3, [pc, #120]	; (8003800 <__sfp+0x84>)
 8003786:	681e      	ldr	r6, [r3, #0]
 8003788:	69b3      	ldr	r3, [r6, #24]
 800378a:	b913      	cbnz	r3, 8003792 <__sfp+0x16>
 800378c:	4630      	mov	r0, r6
 800378e:	f7ff ffbd 	bl	800370c <__sinit>
 8003792:	3648      	adds	r6, #72	; 0x48
 8003794:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003798:	3b01      	subs	r3, #1
 800379a:	d503      	bpl.n	80037a4 <__sfp+0x28>
 800379c:	6833      	ldr	r3, [r6, #0]
 800379e:	b30b      	cbz	r3, 80037e4 <__sfp+0x68>
 80037a0:	6836      	ldr	r6, [r6, #0]
 80037a2:	e7f7      	b.n	8003794 <__sfp+0x18>
 80037a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80037a8:	b9d5      	cbnz	r5, 80037e0 <__sfp+0x64>
 80037aa:	4b16      	ldr	r3, [pc, #88]	; (8003804 <__sfp+0x88>)
 80037ac:	60e3      	str	r3, [r4, #12]
 80037ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80037b2:	6665      	str	r5, [r4, #100]	; 0x64
 80037b4:	f000 f847 	bl	8003846 <__retarget_lock_init_recursive>
 80037b8:	f7ff ff96 	bl	80036e8 <__sfp_lock_release>
 80037bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80037c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80037c4:	6025      	str	r5, [r4, #0]
 80037c6:	61a5      	str	r5, [r4, #24]
 80037c8:	2208      	movs	r2, #8
 80037ca:	4629      	mov	r1, r5
 80037cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80037d0:	f7ff fdb4 	bl	800333c <memset>
 80037d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80037d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80037dc:	4620      	mov	r0, r4
 80037de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037e0:	3468      	adds	r4, #104	; 0x68
 80037e2:	e7d9      	b.n	8003798 <__sfp+0x1c>
 80037e4:	2104      	movs	r1, #4
 80037e6:	4638      	mov	r0, r7
 80037e8:	f7ff ff62 	bl	80036b0 <__sfmoreglue>
 80037ec:	4604      	mov	r4, r0
 80037ee:	6030      	str	r0, [r6, #0]
 80037f0:	2800      	cmp	r0, #0
 80037f2:	d1d5      	bne.n	80037a0 <__sfp+0x24>
 80037f4:	f7ff ff78 	bl	80036e8 <__sfp_lock_release>
 80037f8:	230c      	movs	r3, #12
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	e7ee      	b.n	80037dc <__sfp+0x60>
 80037fe:	bf00      	nop
 8003800:	08003bc8 	.word	0x08003bc8
 8003804:	ffff0001 	.word	0xffff0001

08003808 <_fwalk_reent>:
 8003808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800380c:	4606      	mov	r6, r0
 800380e:	4688      	mov	r8, r1
 8003810:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003814:	2700      	movs	r7, #0
 8003816:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800381a:	f1b9 0901 	subs.w	r9, r9, #1
 800381e:	d505      	bpl.n	800382c <_fwalk_reent+0x24>
 8003820:	6824      	ldr	r4, [r4, #0]
 8003822:	2c00      	cmp	r4, #0
 8003824:	d1f7      	bne.n	8003816 <_fwalk_reent+0xe>
 8003826:	4638      	mov	r0, r7
 8003828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800382c:	89ab      	ldrh	r3, [r5, #12]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d907      	bls.n	8003842 <_fwalk_reent+0x3a>
 8003832:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003836:	3301      	adds	r3, #1
 8003838:	d003      	beq.n	8003842 <_fwalk_reent+0x3a>
 800383a:	4629      	mov	r1, r5
 800383c:	4630      	mov	r0, r6
 800383e:	47c0      	blx	r8
 8003840:	4307      	orrs	r7, r0
 8003842:	3568      	adds	r5, #104	; 0x68
 8003844:	e7e9      	b.n	800381a <_fwalk_reent+0x12>

08003846 <__retarget_lock_init_recursive>:
 8003846:	4770      	bx	lr

08003848 <__retarget_lock_acquire_recursive>:
 8003848:	4770      	bx	lr

0800384a <__retarget_lock_release_recursive>:
 800384a:	4770      	bx	lr

0800384c <__swhatbuf_r>:
 800384c:	b570      	push	{r4, r5, r6, lr}
 800384e:	460e      	mov	r6, r1
 8003850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003854:	2900      	cmp	r1, #0
 8003856:	b096      	sub	sp, #88	; 0x58
 8003858:	4614      	mov	r4, r2
 800385a:	461d      	mov	r5, r3
 800385c:	da07      	bge.n	800386e <__swhatbuf_r+0x22>
 800385e:	2300      	movs	r3, #0
 8003860:	602b      	str	r3, [r5, #0]
 8003862:	89b3      	ldrh	r3, [r6, #12]
 8003864:	061a      	lsls	r2, r3, #24
 8003866:	d410      	bmi.n	800388a <__swhatbuf_r+0x3e>
 8003868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800386c:	e00e      	b.n	800388c <__swhatbuf_r+0x40>
 800386e:	466a      	mov	r2, sp
 8003870:	f000 f938 	bl	8003ae4 <_fstat_r>
 8003874:	2800      	cmp	r0, #0
 8003876:	dbf2      	blt.n	800385e <__swhatbuf_r+0x12>
 8003878:	9a01      	ldr	r2, [sp, #4]
 800387a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800387e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003882:	425a      	negs	r2, r3
 8003884:	415a      	adcs	r2, r3
 8003886:	602a      	str	r2, [r5, #0]
 8003888:	e7ee      	b.n	8003868 <__swhatbuf_r+0x1c>
 800388a:	2340      	movs	r3, #64	; 0x40
 800388c:	2000      	movs	r0, #0
 800388e:	6023      	str	r3, [r4, #0]
 8003890:	b016      	add	sp, #88	; 0x58
 8003892:	bd70      	pop	{r4, r5, r6, pc}

08003894 <malloc>:
 8003894:	4b02      	ldr	r3, [pc, #8]	; (80038a0 <malloc+0xc>)
 8003896:	4601      	mov	r1, r0
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	f000 b853 	b.w	8003944 <_malloc_r>
 800389e:	bf00      	nop
 80038a0:	2000000c 	.word	0x2000000c

080038a4 <_free_r>:
 80038a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038a6:	2900      	cmp	r1, #0
 80038a8:	d048      	beq.n	800393c <_free_r+0x98>
 80038aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038ae:	9001      	str	r0, [sp, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f1a1 0404 	sub.w	r4, r1, #4
 80038b6:	bfb8      	it	lt
 80038b8:	18e4      	addlt	r4, r4, r3
 80038ba:	f000 f937 	bl	8003b2c <__malloc_lock>
 80038be:	4a20      	ldr	r2, [pc, #128]	; (8003940 <_free_r+0x9c>)
 80038c0:	9801      	ldr	r0, [sp, #4]
 80038c2:	6813      	ldr	r3, [r2, #0]
 80038c4:	4615      	mov	r5, r2
 80038c6:	b933      	cbnz	r3, 80038d6 <_free_r+0x32>
 80038c8:	6063      	str	r3, [r4, #4]
 80038ca:	6014      	str	r4, [r2, #0]
 80038cc:	b003      	add	sp, #12
 80038ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038d2:	f000 b931 	b.w	8003b38 <__malloc_unlock>
 80038d6:	42a3      	cmp	r3, r4
 80038d8:	d90b      	bls.n	80038f2 <_free_r+0x4e>
 80038da:	6821      	ldr	r1, [r4, #0]
 80038dc:	1862      	adds	r2, r4, r1
 80038de:	4293      	cmp	r3, r2
 80038e0:	bf04      	itt	eq
 80038e2:	681a      	ldreq	r2, [r3, #0]
 80038e4:	685b      	ldreq	r3, [r3, #4]
 80038e6:	6063      	str	r3, [r4, #4]
 80038e8:	bf04      	itt	eq
 80038ea:	1852      	addeq	r2, r2, r1
 80038ec:	6022      	streq	r2, [r4, #0]
 80038ee:	602c      	str	r4, [r5, #0]
 80038f0:	e7ec      	b.n	80038cc <_free_r+0x28>
 80038f2:	461a      	mov	r2, r3
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	b10b      	cbz	r3, 80038fc <_free_r+0x58>
 80038f8:	42a3      	cmp	r3, r4
 80038fa:	d9fa      	bls.n	80038f2 <_free_r+0x4e>
 80038fc:	6811      	ldr	r1, [r2, #0]
 80038fe:	1855      	adds	r5, r2, r1
 8003900:	42a5      	cmp	r5, r4
 8003902:	d10b      	bne.n	800391c <_free_r+0x78>
 8003904:	6824      	ldr	r4, [r4, #0]
 8003906:	4421      	add	r1, r4
 8003908:	1854      	adds	r4, r2, r1
 800390a:	42a3      	cmp	r3, r4
 800390c:	6011      	str	r1, [r2, #0]
 800390e:	d1dd      	bne.n	80038cc <_free_r+0x28>
 8003910:	681c      	ldr	r4, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	6053      	str	r3, [r2, #4]
 8003916:	4421      	add	r1, r4
 8003918:	6011      	str	r1, [r2, #0]
 800391a:	e7d7      	b.n	80038cc <_free_r+0x28>
 800391c:	d902      	bls.n	8003924 <_free_r+0x80>
 800391e:	230c      	movs	r3, #12
 8003920:	6003      	str	r3, [r0, #0]
 8003922:	e7d3      	b.n	80038cc <_free_r+0x28>
 8003924:	6825      	ldr	r5, [r4, #0]
 8003926:	1961      	adds	r1, r4, r5
 8003928:	428b      	cmp	r3, r1
 800392a:	bf04      	itt	eq
 800392c:	6819      	ldreq	r1, [r3, #0]
 800392e:	685b      	ldreq	r3, [r3, #4]
 8003930:	6063      	str	r3, [r4, #4]
 8003932:	bf04      	itt	eq
 8003934:	1949      	addeq	r1, r1, r5
 8003936:	6021      	streq	r1, [r4, #0]
 8003938:	6054      	str	r4, [r2, #4]
 800393a:	e7c7      	b.n	80038cc <_free_r+0x28>
 800393c:	b003      	add	sp, #12
 800393e:	bd30      	pop	{r4, r5, pc}
 8003940:	20000090 	.word	0x20000090

08003944 <_malloc_r>:
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	1ccd      	adds	r5, r1, #3
 8003948:	f025 0503 	bic.w	r5, r5, #3
 800394c:	3508      	adds	r5, #8
 800394e:	2d0c      	cmp	r5, #12
 8003950:	bf38      	it	cc
 8003952:	250c      	movcc	r5, #12
 8003954:	2d00      	cmp	r5, #0
 8003956:	4606      	mov	r6, r0
 8003958:	db01      	blt.n	800395e <_malloc_r+0x1a>
 800395a:	42a9      	cmp	r1, r5
 800395c:	d903      	bls.n	8003966 <_malloc_r+0x22>
 800395e:	230c      	movs	r3, #12
 8003960:	6033      	str	r3, [r6, #0]
 8003962:	2000      	movs	r0, #0
 8003964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003966:	f000 f8e1 	bl	8003b2c <__malloc_lock>
 800396a:	4921      	ldr	r1, [pc, #132]	; (80039f0 <_malloc_r+0xac>)
 800396c:	680a      	ldr	r2, [r1, #0]
 800396e:	4614      	mov	r4, r2
 8003970:	b99c      	cbnz	r4, 800399a <_malloc_r+0x56>
 8003972:	4f20      	ldr	r7, [pc, #128]	; (80039f4 <_malloc_r+0xb0>)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	b923      	cbnz	r3, 8003982 <_malloc_r+0x3e>
 8003978:	4621      	mov	r1, r4
 800397a:	4630      	mov	r0, r6
 800397c:	f000 f83c 	bl	80039f8 <_sbrk_r>
 8003980:	6038      	str	r0, [r7, #0]
 8003982:	4629      	mov	r1, r5
 8003984:	4630      	mov	r0, r6
 8003986:	f000 f837 	bl	80039f8 <_sbrk_r>
 800398a:	1c43      	adds	r3, r0, #1
 800398c:	d123      	bne.n	80039d6 <_malloc_r+0x92>
 800398e:	230c      	movs	r3, #12
 8003990:	6033      	str	r3, [r6, #0]
 8003992:	4630      	mov	r0, r6
 8003994:	f000 f8d0 	bl	8003b38 <__malloc_unlock>
 8003998:	e7e3      	b.n	8003962 <_malloc_r+0x1e>
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	1b5b      	subs	r3, r3, r5
 800399e:	d417      	bmi.n	80039d0 <_malloc_r+0x8c>
 80039a0:	2b0b      	cmp	r3, #11
 80039a2:	d903      	bls.n	80039ac <_malloc_r+0x68>
 80039a4:	6023      	str	r3, [r4, #0]
 80039a6:	441c      	add	r4, r3
 80039a8:	6025      	str	r5, [r4, #0]
 80039aa:	e004      	b.n	80039b6 <_malloc_r+0x72>
 80039ac:	6863      	ldr	r3, [r4, #4]
 80039ae:	42a2      	cmp	r2, r4
 80039b0:	bf0c      	ite	eq
 80039b2:	600b      	streq	r3, [r1, #0]
 80039b4:	6053      	strne	r3, [r2, #4]
 80039b6:	4630      	mov	r0, r6
 80039b8:	f000 f8be 	bl	8003b38 <__malloc_unlock>
 80039bc:	f104 000b 	add.w	r0, r4, #11
 80039c0:	1d23      	adds	r3, r4, #4
 80039c2:	f020 0007 	bic.w	r0, r0, #7
 80039c6:	1ac2      	subs	r2, r0, r3
 80039c8:	d0cc      	beq.n	8003964 <_malloc_r+0x20>
 80039ca:	1a1b      	subs	r3, r3, r0
 80039cc:	50a3      	str	r3, [r4, r2]
 80039ce:	e7c9      	b.n	8003964 <_malloc_r+0x20>
 80039d0:	4622      	mov	r2, r4
 80039d2:	6864      	ldr	r4, [r4, #4]
 80039d4:	e7cc      	b.n	8003970 <_malloc_r+0x2c>
 80039d6:	1cc4      	adds	r4, r0, #3
 80039d8:	f024 0403 	bic.w	r4, r4, #3
 80039dc:	42a0      	cmp	r0, r4
 80039de:	d0e3      	beq.n	80039a8 <_malloc_r+0x64>
 80039e0:	1a21      	subs	r1, r4, r0
 80039e2:	4630      	mov	r0, r6
 80039e4:	f000 f808 	bl	80039f8 <_sbrk_r>
 80039e8:	3001      	adds	r0, #1
 80039ea:	d1dd      	bne.n	80039a8 <_malloc_r+0x64>
 80039ec:	e7cf      	b.n	800398e <_malloc_r+0x4a>
 80039ee:	bf00      	nop
 80039f0:	20000090 	.word	0x20000090
 80039f4:	20000094 	.word	0x20000094

080039f8 <_sbrk_r>:
 80039f8:	b538      	push	{r3, r4, r5, lr}
 80039fa:	4d06      	ldr	r5, [pc, #24]	; (8003a14 <_sbrk_r+0x1c>)
 80039fc:	2300      	movs	r3, #0
 80039fe:	4604      	mov	r4, r0
 8003a00:	4608      	mov	r0, r1
 8003a02:	602b      	str	r3, [r5, #0]
 8003a04:	f7fd f8ba 	bl	8000b7c <_sbrk>
 8003a08:	1c43      	adds	r3, r0, #1
 8003a0a:	d102      	bne.n	8003a12 <_sbrk_r+0x1a>
 8003a0c:	682b      	ldr	r3, [r5, #0]
 8003a0e:	b103      	cbz	r3, 8003a12 <_sbrk_r+0x1a>
 8003a10:	6023      	str	r3, [r4, #0]
 8003a12:	bd38      	pop	{r3, r4, r5, pc}
 8003a14:	2000059c 	.word	0x2000059c

08003a18 <__sread>:
 8003a18:	b510      	push	{r4, lr}
 8003a1a:	460c      	mov	r4, r1
 8003a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a20:	f000 f890 	bl	8003b44 <_read_r>
 8003a24:	2800      	cmp	r0, #0
 8003a26:	bfab      	itete	ge
 8003a28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a2a:	89a3      	ldrhlt	r3, [r4, #12]
 8003a2c:	181b      	addge	r3, r3, r0
 8003a2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a32:	bfac      	ite	ge
 8003a34:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a36:	81a3      	strhlt	r3, [r4, #12]
 8003a38:	bd10      	pop	{r4, pc}

08003a3a <__swrite>:
 8003a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a3e:	461f      	mov	r7, r3
 8003a40:	898b      	ldrh	r3, [r1, #12]
 8003a42:	05db      	lsls	r3, r3, #23
 8003a44:	4605      	mov	r5, r0
 8003a46:	460c      	mov	r4, r1
 8003a48:	4616      	mov	r6, r2
 8003a4a:	d505      	bpl.n	8003a58 <__swrite+0x1e>
 8003a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a50:	2302      	movs	r3, #2
 8003a52:	2200      	movs	r2, #0
 8003a54:	f000 f858 	bl	8003b08 <_lseek_r>
 8003a58:	89a3      	ldrh	r3, [r4, #12]
 8003a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a62:	81a3      	strh	r3, [r4, #12]
 8003a64:	4632      	mov	r2, r6
 8003a66:	463b      	mov	r3, r7
 8003a68:	4628      	mov	r0, r5
 8003a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a6e:	f000 b817 	b.w	8003aa0 <_write_r>

08003a72 <__sseek>:
 8003a72:	b510      	push	{r4, lr}
 8003a74:	460c      	mov	r4, r1
 8003a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a7a:	f000 f845 	bl	8003b08 <_lseek_r>
 8003a7e:	1c43      	adds	r3, r0, #1
 8003a80:	89a3      	ldrh	r3, [r4, #12]
 8003a82:	bf15      	itete	ne
 8003a84:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a8e:	81a3      	strheq	r3, [r4, #12]
 8003a90:	bf18      	it	ne
 8003a92:	81a3      	strhne	r3, [r4, #12]
 8003a94:	bd10      	pop	{r4, pc}

08003a96 <__sclose>:
 8003a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a9a:	f000 b813 	b.w	8003ac4 <_close_r>
	...

08003aa0 <_write_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4d07      	ldr	r5, [pc, #28]	; (8003ac0 <_write_r+0x20>)
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	4608      	mov	r0, r1
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	2200      	movs	r2, #0
 8003aac:	602a      	str	r2, [r5, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f7ff fa1d 	bl	8002eee <_write>
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	d102      	bne.n	8003abe <_write_r+0x1e>
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	b103      	cbz	r3, 8003abe <_write_r+0x1e>
 8003abc:	6023      	str	r3, [r4, #0]
 8003abe:	bd38      	pop	{r3, r4, r5, pc}
 8003ac0:	2000059c 	.word	0x2000059c

08003ac4 <_close_r>:
 8003ac4:	b538      	push	{r3, r4, r5, lr}
 8003ac6:	4d06      	ldr	r5, [pc, #24]	; (8003ae0 <_close_r+0x1c>)
 8003ac8:	2300      	movs	r3, #0
 8003aca:	4604      	mov	r4, r0
 8003acc:	4608      	mov	r0, r1
 8003ace:	602b      	str	r3, [r5, #0]
 8003ad0:	f7fd f82b 	bl	8000b2a <_close>
 8003ad4:	1c43      	adds	r3, r0, #1
 8003ad6:	d102      	bne.n	8003ade <_close_r+0x1a>
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	b103      	cbz	r3, 8003ade <_close_r+0x1a>
 8003adc:	6023      	str	r3, [r4, #0]
 8003ade:	bd38      	pop	{r3, r4, r5, pc}
 8003ae0:	2000059c 	.word	0x2000059c

08003ae4 <_fstat_r>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	4d07      	ldr	r5, [pc, #28]	; (8003b04 <_fstat_r+0x20>)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	4604      	mov	r4, r0
 8003aec:	4608      	mov	r0, r1
 8003aee:	4611      	mov	r1, r2
 8003af0:	602b      	str	r3, [r5, #0]
 8003af2:	f7fd f826 	bl	8000b42 <_fstat>
 8003af6:	1c43      	adds	r3, r0, #1
 8003af8:	d102      	bne.n	8003b00 <_fstat_r+0x1c>
 8003afa:	682b      	ldr	r3, [r5, #0]
 8003afc:	b103      	cbz	r3, 8003b00 <_fstat_r+0x1c>
 8003afe:	6023      	str	r3, [r4, #0]
 8003b00:	bd38      	pop	{r3, r4, r5, pc}
 8003b02:	bf00      	nop
 8003b04:	2000059c 	.word	0x2000059c

08003b08 <_lseek_r>:
 8003b08:	b538      	push	{r3, r4, r5, lr}
 8003b0a:	4d07      	ldr	r5, [pc, #28]	; (8003b28 <_lseek_r+0x20>)
 8003b0c:	4604      	mov	r4, r0
 8003b0e:	4608      	mov	r0, r1
 8003b10:	4611      	mov	r1, r2
 8003b12:	2200      	movs	r2, #0
 8003b14:	602a      	str	r2, [r5, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	f7fd f823 	bl	8000b62 <_lseek>
 8003b1c:	1c43      	adds	r3, r0, #1
 8003b1e:	d102      	bne.n	8003b26 <_lseek_r+0x1e>
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	b103      	cbz	r3, 8003b26 <_lseek_r+0x1e>
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	bd38      	pop	{r3, r4, r5, pc}
 8003b28:	2000059c 	.word	0x2000059c

08003b2c <__malloc_lock>:
 8003b2c:	4801      	ldr	r0, [pc, #4]	; (8003b34 <__malloc_lock+0x8>)
 8003b2e:	f7ff be8b 	b.w	8003848 <__retarget_lock_acquire_recursive>
 8003b32:	bf00      	nop
 8003b34:	20000594 	.word	0x20000594

08003b38 <__malloc_unlock>:
 8003b38:	4801      	ldr	r0, [pc, #4]	; (8003b40 <__malloc_unlock+0x8>)
 8003b3a:	f7ff be86 	b.w	800384a <__retarget_lock_release_recursive>
 8003b3e:	bf00      	nop
 8003b40:	20000594 	.word	0x20000594

08003b44 <_read_r>:
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	4d07      	ldr	r5, [pc, #28]	; (8003b64 <_read_r+0x20>)
 8003b48:	4604      	mov	r4, r0
 8003b4a:	4608      	mov	r0, r1
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	2200      	movs	r2, #0
 8003b50:	602a      	str	r2, [r5, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f7fc ffcc 	bl	8000af0 <_read>
 8003b58:	1c43      	adds	r3, r0, #1
 8003b5a:	d102      	bne.n	8003b62 <_read_r+0x1e>
 8003b5c:	682b      	ldr	r3, [r5, #0]
 8003b5e:	b103      	cbz	r3, 8003b62 <_read_r+0x1e>
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	bd38      	pop	{r3, r4, r5, pc}
 8003b64:	2000059c 	.word	0x2000059c

08003b68 <_init>:
 8003b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6a:	bf00      	nop
 8003b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6e:	bc08      	pop	{r3}
 8003b70:	469e      	mov	lr, r3
 8003b72:	4770      	bx	lr

08003b74 <_fini>:
 8003b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b76:	bf00      	nop
 8003b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7a:	bc08      	pop	{r3}
 8003b7c:	469e      	mov	lr, r3
 8003b7e:	4770      	bx	lr
